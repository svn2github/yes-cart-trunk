<?xml version="1.0" encoding="utf-8"?>
<!--
  - Copyright 2009 Igor Azarnyi, Denys Pavlov
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:yci18n="org.yes.cart.ui.i18n.*"
           creationComplete="init()" width="100%" height="100%">

    <mx:Form width="100%" height="100%">
        <mx:FormItem width="100%">
            <mx:Grid x="0" y="0" width="100%" height="100%" id="supportedPgPanel">
                <mx:GridRow width="100%" height="50">
                    <mx:GridItem width="45%" height="50" textAlign="center" verticalAlign="middle">
                        <mx:Label text="@Resource(bundle='CarrierManagementPanel',key='availablePg')"/>
                    </mx:GridItem>
                    <mx:GridItem width="10%" height="50">
                    </mx:GridItem>
                    <mx:GridItem width="45%" height="50" textAlign="center" verticalAlign="middle">
                        <mx:Label text="@Resource(bundle='CarrierManagementPanel',key='supportedPg')"/>
                    </mx:GridItem>
                </mx:GridRow>
                <mx:GridRow width="100%" height="100%">
                    <mx:GridItem width="45%" height="100%">
                        <mx:List
                                id="availablePgList"
                                width="100%"
                                height="100%"
                                dataProvider="{availablePgs}"
                                labelFunction="pgName"
                                doubleClickEnabled="true"
                                itemDoubleClick="assignPg(event)"
                                click="availablePgSelected(event)"
                                >
                        </mx:List>
                    </mx:GridItem>
                    <mx:GridItem width="10%" height="100%" verticalAlign="middle" textAlign="center">
                        <mx:VBox width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
                            <mx:Button enabled="{addAvailableEnabled}"
                                       label="@Resource(bundle='CarrierManagementPanel',key='assignPg')"
                                       toolTip="@Resource(bundle='CarrierManagementPanel',key='assignPgHint')"
                                       click="assignPg(event)"/>
                            <mx:Button enabled="{addAssignedEnabled}"
                                       label="@Resource(bundle='CarrierManagementPanel',key='unassignPg')"
                                       toolTip="@Resource(bundle='CarrierManagementPanel',key='unassignPgHint')"
                                       click="unassignPg(event)"/>
                        </mx:VBox>
                    </mx:GridItem>
                    <mx:GridItem width="45%" height="100%">
                        <mx:List
                                id="assignedPgList"
                                width="100%"
                                height="100%"
                                dataProvider="{assignedPgs}"
                                labelFunction="pgName"
                                doubleClickEnabled="true"
                                itemDoubleClick="unassignPg(event)"
                                click="assignedPgSelected(event)"
                                >

                        </mx:List>
                    </mx:GridItem>
                </mx:GridRow>

            </mx:Grid>
        </mx:FormItem>
        <mx:FormItem>
            <mx:Button id="saveBtn" label="@Resource(bundle='CarrierManagementPanel',key='update')"/>
        </mx:FormItem>
    </mx:Form>

    <mx:ArrayCollection id="availablePgs"/>
    <mx:ArrayCollection id="assignedPgs"/>

    <mx:Boolean id="addAvailableEnabled">false</mx:Boolean>
    <mx:Boolean id="addAssignedEnabled">false</mx:Boolean>

    <mx:ArrayCollection id="allowedPaymentGateways"></mx:ArrayCollection>
    <mx:String id="supportedPaymentGateways"></mx:String>

    <mx:RemoteObject showBusyCursor="true" id="remotePaymentModulesManagementService"
                     destination="remotePaymentModulesManagementService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getAllowedPaymentGatewaysForShops" name="getAllowedPaymentGatewaysForShops"
                   result="onGetPaymentGatewaysResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>


    <mx:Script><![CDATA[
        import com.hexagonstar.util.debug.Debug;

        import mx.binding.utils.BindingUtils;
        import mx.binding.utils.ChangeWatcher;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;
        import mx.utils.StringUtil;

        import org.yes.cart.impl.CarrierSlaDTOImpl;
        import org.yes.cart.impl.CountryDTOImpl;
        import org.yes.cart.shopmanager.ShopManagerGlobal;

        private var _carrierSlaDTOImpl:CarrierSlaDTOImpl;
        [Bindable]
        private var slaTypes:Array;

        private var _binding:Array = [];

        public function get carrierSlaDTOImpl():CarrierSlaDTOImpl {
            return _carrierSlaDTOImpl;
        }

        public function set carrierSlaDTOImpl(value:CarrierSlaDTOImpl):void {
            _carrierSlaDTOImpl = value;
            supportedPaymentGateways = _carrierSlaDTOImpl.supportedPaymentGateways;
            bind();
        }


        private function init():void {
            var _localeFilter:String = resourceManager.getString('Common', 'localeFilter');
            remotePaymentModulesManagementService.getAllowedPaymentGatewaysForShops(_localeFilter);
        }

        /**
         * Handle obtain result.
         * @param event event with result
         */
        private function onGetPaymentGatewaysResult(event:ResultEvent):void {
            //assign loaded list of payment gateways to grid
            allowedPaymentGateways.refresh();
            allowedPaymentGateways.removeAll();
            allowedPaymentGateways.addAll(event.result as ArrayCollection);
        }



        private function unbind():void {
        }

        private function bind():void {

            var assignedPgsStr:String = supportedPaymentGateways;
            if (assignedPgsStr == null || assignedPgsStr == "null") {
                assignedPgs.removeAll();
                availablePgs.removeAll();
                availablePgs.addAll(allowedPaymentGateways);
            } else {
                var _assignedLabels:ArrayCollection = new ArrayCollection(assignedPgsStr.split(","));
                var _assignedPgs:ArrayCollection = new ArrayCollection();
                var _availablePgs:ArrayCollection = new ArrayCollection();
                for (var i:int = 0; i < allowedPaymentGateways.length; i++) {
                    var _assigned:Boolean = false;
                    for each (var _label:String in _assignedLabels) {
                        var _pg:Object = allowedPaymentGateways.getItemAt(i);
                        if (_pg['label'] == _label) {
                            _assignedPgs.addItem(_pg);
                            _assigned = true;
                            break;
                        }
                    }
                    if (!_assigned) {
                        _availablePgs.addItem(_pg);
                    }
                }
                availablePgs = _availablePgs;
                assignedPgs = _assignedPgs;
            }
            addAssignedEnabled = false;
            addAvailableEnabled = false;

        }

        private function availablePgSelected(event:MouseEvent):void {
            addAvailableEnabled = this.availablePgList.selectedItem != null;
        }

        private function assignedPgSelected(event:MouseEvent):void {
            addAssignedEnabled = this.assignedPgList.selectedItem != null;
        }

        private function assignPg(event:Event):void {
            if (this.addAvailableEnabled && this.availablePgList.selectedItem != null) {
                var _pgs:String = constructStringList(true, this.availablePgList.selectedItem);
                addAvailableEnabled = false;
                supportedPaymentGateways = _pgs;
                unbind();
                bind();
            }
        }

        private function unassignPg(event:Event):void {
            if (this.addAssignedEnabled && this.assignedPgList.selectedItem != null) {
                var _pgs:String = constructStringList(false, this.assignedPgList.selectedItem);
                addAssignedEnabled = false;
                supportedPaymentGateways = _pgs;
                unbind();
                bind();
            }
        }

        public function updateModel():void {
            _carrierSlaDTOImpl.supportedPaymentGateways = supportedPaymentGateways;
        }

        /**
         * Get shop name for representation in list.
         * @param item
         * @return
         */
        private function pgName(item:Object):String {

            try {

                if (item != null) {
                    return item['name'];

                } else {

                    return "-";
                }

            }
            catch (error:Error) {
            }

            return "-";


        }


        private function constructStringList(addFlag:Boolean, item:Object):String {
            var result:String = "";
            if (addFlag) {
                if (assignedPgs != null) {
                    for (var i:int = 0; i < assignedPgs.length; i++) {
                        result = result + assignedPgs[i]['label'] + ",";
                    }
                }
                result = result + item['label'] + ",";
            } else {
                if (assignedPgs != null) {
                    for (var j:int = 0; j < assignedPgs.length; j++) {
                        if (assignedPgs[j]['label'] != item['label']) {
                            result = result + assignedPgs[j]['label'] + ",";
                        }
                    }
                }
            }
            if (result != null && result.length > 0) {
                result = result.substr(0, result.length - 1);
            }
            Debug.trace("result -> " + result);
            return result;
        }

        private function onGetSupportedCurrenciesResult(event:ResultEvent):void {

            allowedPaymentGateways = event.result as ArrayCollection;

        }

        private function onRpcMethodFault(event:FaultEvent):void {
            ShopManagerGlobal.instance.defaultOnRpcMethodFault(event);
        }


        ]]>
    </mx:Script>
</mx:Canvas>