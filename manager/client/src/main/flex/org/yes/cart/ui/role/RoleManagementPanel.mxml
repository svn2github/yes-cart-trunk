<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
          title="@Resource(bundle='RoleManagementPanel',key='roles')"
          width="100%"
          height="100%"
          creationComplete="init();"
          paddingLeft="2" paddingRight="2" paddingBottom="5">
    <mx:Script>
		<![CDATA[
        import mx.controls.Alert;
        import mx.core.FlexGlobals;
        import mx.events.CloseEvent;
        import mx.events.ListEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import org.yes.cart.shopmanager.ShopManagerGlobal;

        public function init():void {
            remoteUserManagementService.getRolesList();
        }

        private function onRoleSelected(event:ListEvent):void {
            roleSelected = this.roleDataGrid.selectedItem != null;
        }


        private var newPopUp:RoleCreateEditDialog;

        private function onNewRoleClick(event:MouseEvent):void {
            newPopUp = RoleCreateEditDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), RoleCreateEditDialog, true));
            newPopUp.saveBtn.addEventListener(MouseEvent.CLICK, onCreateRoleClick);
            newPopUp.createNewRole();
            PopUpManager.centerPopUp(newPopUp);
        }

        private function onEditRoleClick(event:Event):void {
            var selectedRole:Object = this.roleDataGrid.selectedItem;
            if (selectedRole != null) {
                newPopUp = RoleCreateEditDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), RoleCreateEditDialog, true));
                newPopUp.saveBtn.addEventListener(MouseEvent.CLICK, onUpdateRoleClick);
                newPopUp.editRole(selectedRole.code, selectedRole.description);
                PopUpManager.centerPopUp(newPopUp);
            }
        }

        private function onCreateRoleClick(event:Event):void {

            remoteUserManagementService.addRole(
                    newPopUp.role.text,
                    newPopUp.description.text
            );

        }

        private function onUpdateRoleClick(event:Event):void {

            remoteUserManagementService.updateRole(
                    newPopUp.role.text,
                    newPopUp.description.text
            );

        }


        private function onDeleteRoleClick(event:MouseEvent):void {
            if (this.roleSelected) {
                Alert.show(
                        resourceManager.getString('RoleManagementPanel', 'deleteRoleConfirm', [ this.roleDataGrid.selectedItem.code ]),
                        resourceManager.getString('ShopManagerApplication', 'warning'),
                        Alert.OK | Alert.CANCEL, this, onDeleteRoleConfirm, null, Alert.OK);
            }
        }

        private function onDeleteRoleConfirm(event:CloseEvent):void {
            if (event.detail == Alert.OK && this.roleDataGrid.selectedItem != null) {
                var code:String = this.roleDataGrid.selectedItem.code;
                remoteUserManagementService.deleteRole(code);
            }
            remoteUserManagementService.getRolesList();
        }

        private function onGetRolesListResult(event:ResultEvent):void {
            this.roleDataGrid.dataProvider = event.result;
            roleSelected = false;

        }

        private function onAddRoleResult(event:ResultEvent):void {
            if (newPopUp != null) {
                newPopUp.saveBtn.removeEventListener(MouseEvent.CLICK, onCreateRoleClick);
                PopUpManager.removePopUp(newPopUp);
                newPopUp = null;
            }
            remoteUserManagementService.getRolesList();
            roleSelected = false;
        }

        private function onUpdateRoleResult(event:ResultEvent):void {
            if (newPopUp != null) {
                newPopUp.saveBtn.removeEventListener(MouseEvent.CLICK, onUpdateRoleClick);
                PopUpManager.removePopUp(newPopUp);
                newPopUp = null;
            }
            remoteUserManagementService.getRolesList();
            roleSelected = false;
        }

        private function onDeleteRoleResult(event:ResultEvent):void {
            Alert.show(
                    resourceManager.getString('RoleManagementPanel', 'roleDeletedConfirm'),
                    resourceManager.getString('ShopManagerApplication', 'info'));
            remoteUserManagementService.getRolesList();
            roleSelected = false;
        }

        private function onRpcMethodFault(event:FaultEvent):void {
            ShopManagerGlobal.instance.defaultOnRpcMethodFault(event);
        }
        ]]>
    </mx:Script>

    <mx:RemoteObject showBusyCursor="true"  id="remoteUserManagementService"
                     destination="remoteUserManagementService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getRolesList" name="getRolesList"
                   result="onGetRolesListResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="addRole" name="addRole"
                   result="onAddRoleResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="updateRole" name="updateRole"
                   result="onUpdateRoleResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="deleteRole" name="deleteRole"
                   result="onDeleteRoleResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>


    <mx:Boolean id="roleSelected">false</mx:Boolean>


    <mx:HBox paddingTop="5" width="100%">

        <mx:Button label="@Resource(bundle='RoleManagementPanel',key='newRole')"
                   toolTip="@Resource(bundle='RoleManagementPanel',key='newRoleToolTip')"
                   click="onNewRoleClick(event)"/>
        <mx:Button label="@Resource(bundle='RoleManagementPanel',key='editRole')"
                   toolTip="@Resource(bundle='RoleManagementPanel',key='editRoleToolTip')"
                   enabled="{roleSelected}"
                   click="onEditRoleClick(event)"/>
        <mx:Button label="@Resource(bundle='RoleManagementPanel',key='deleteRole')"
                   toolTip="@Resource(bundle='RoleManagementPanel',key='deleteRoleToolTip')"
                   enabled="{roleSelected}"
                   click="onDeleteRoleClick(event)"/>
    </mx:HBox>
    <mx:DataGrid id="roleDataGrid"
                 width="100%" height="100%"
                 doubleClickEnabled="true"
                 itemDoubleClick="onEditRoleClick(event)"
                 itemClick="onRoleSelected(event)">
        <mx:columns>
            <mx:DataGridColumn headerText="@Resource(bundle='RoleManagementPanel',key='role')" dataField="code"/>
            <mx:DataGridColumn headerText="@Resource(bundle='RoleManagementPanel',key='description')" dataField="description"/>
        </mx:columns>
    </mx:DataGrid>

</mx:Panel>