<?xml version="1.0" encoding="utf-8"?>
<!--
  - Copyright 2009 Igor Azarnyi, Denys Pavlov
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->


<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
         width="100%" height="100%" creationComplete="init();"
         paddingLeft="2" paddingTop="2" paddingRight="2" paddingBottom="2">
    <mx:Script>
        <![CDATA[
        import mx.controls.Alert;
        import mx.events.CloseEvent;
        import mx.events.DataGridEvent;
        import mx.events.ListEvent;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import org.yes.cart.impl.ShopDTOImpl;
        import org.yes.cart.impl.ShopExchangeRateDTOImpl;
        import org.yes.cart.shopmanager.ShopManagerGlobal;

        public var shopDTOImpl:ShopDTOImpl;

        private function init():void {
            remoteShopService.getSupportedCurrencies(shopDTOImpl.shopId);
            remoteShopExchangeRateService.getAllByShopId(shopDTOImpl.shopId);
        }


        public function setShopDTOImpl(value:ShopDTOImpl):void {
            shopDTOImpl = value;
        }

        /**
         * Handle result of exchange rate list obtain.
         * @param event
         */
        private function onGetAllByShopIdResult(event:ResultEvent):void {
            rateDataGrid.dataProvider = event.result;
        }

        private function onItemClick(event:ListEvent):void {

        }

        private function onRateItemEditEnd(event:DataGridEvent):void {


        }

        private function onSaveResult(event:ResultEvent):void {

            remoteShopExchangeRateService.getAllByShopId(shopDTOImpl.shopId);

        }

        private function onSaveFault(event:FaultEvent):void {

            //remoteShopExchangeRateService.getAllByShopId(shopDTOImpl.shopId);

        }

        private function onRemoveResult(event:ResultEvent):void {

            remoteShopExchangeRateService.getAllByShopId(shopDTOImpl.shopId);


        }


        private function onUpdateResult(event:ResultEvent):void {

            remoteShopExchangeRateService.getAllByShopId(shopDTOImpl.shopId);

        }

        private function onGetSupportedCurrenciesResult(event:ResultEvent):void {

            var assignedCurrencyStr:String = String(event.result);
            if (assignedCurrencyStr == null || assignedCurrencyStr == "null") {
                currencyList.removeAll();
            } else {
                currencyList = new ArrayCollection(assignedCurrencyStr.split(","));
            }

        }

        private function onUpdateDerivedPricesResult(event:ResultEvent):void {

            Alert.show(
                    resourceManager.getString('StoresManagementPanel', 'updatedPrices', [event.result]),
                    resourceManager.getString('Common', 'info')
            );


        }

        private function onRecalculatePricesClick(event:MouseEvent):void {

            Alert.show(
                    resourceManager.getString('StoresManagementPanel', 'recalculatePricesConfirm'),
                    resourceManager.getString('Common', 'info'),
                    Alert.YES | Alert.NO, null, onRecalculatePricesConfirmed, null, Alert.NO);


        }

        /**
         * User confirm price recalculation.
         * @param event
         */
        private function onRecalculatePricesConfirmed(event:CloseEvent):void {
            if (event.detail == Alert.YES) { //cancel/return order
                remoteShopExchangeRateService.updateDerivedPrices(shopDTOImpl.shopId);
            }
        }

        private function onAddNewExcangeRateClick(event:MouseEvent):void {

            var newShopUrl:ShopExchangeRateDTOImpl = new ShopExchangeRateDTOImpl();
            newShopUrl.shopId = shopDTOImpl.shopId;
            newShopUrl.fromCurrency = newShopUrl.toCurrency = resourceManager.getString('StoresManagementPanel', 'selectCurr');
            newShopUrl.rate = 1;
            rateDataGrid.dataProvider.addItem(newShopUrl);
        }
        ]]>

    </mx:Script>

    <mx:RemoteObject showBusyCursor="true" id="remoteShopService"
                     destination="remoteShopService"
                     fault="ShopManagerGlobal.instance.defaultOnRpcMethodFault(event)"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getSupportedCurrencies" name="getSupportedCurrencies"
                   result="onGetSupportedCurrenciesResult(event)"
                />


    </mx:RemoteObject>

    <mx:RemoteObject showBusyCursor="true" id="remoteShopExchangeRateService"
                     destination="remoteShopExchangeRateService"
                     result="ShopManagerGlobal.instance.defaultOnRpcMethodResult(event)"
                     fault="ShopManagerGlobal.instance.defaultOnRpcMethodFault(event)"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getAllByShopId" name="getAllByShopId"
                   result="onGetAllByShopIdResult(event)"/>
        <mx:method id="create" name="create"
                   result="onSaveResult(event)"
                   fault="onSaveFault(event)"/>
        <mx:method id="remove" name="remove"
                   result="onRemoveResult(event)"/>
        <mx:method id="update" name="update"
                   result="onUpdateResult(event)"/>

        <mx:method id="updateDerivedPrices" name="updateDerivedPrices"
                   result="onUpdateDerivedPricesResult(event)"/>

    </mx:RemoteObject>

    <mx:ArrayCollection id="currencyList"/>

    <mx:HBox paddingTop="5" width="100%">
        <mx:Button
                id="addBtn"
                label="@Resource(bundle='StoresManagementPanel',key='addRate')"
                click="onAddNewExcangeRateClick(event)"/>

        <mx:Button
                id="recalculatePriceBtn"
                label="@Resource(bundle='StoresManagementPanel',key='recalculatePrice')"
                click="onRecalculatePricesClick(event)"/>

    </mx:HBox>

    <mx:DataGrid id="rateDataGrid"
                 editable="true"
                 itemClick="onItemClick(event)"
                 itemEditEnd="onRateItemEditEnd(event)"
                 width="100%" height="100%">
        <mx:columns>
            <mx:DataGridColumn headerText="@Resource(bundle='StoresManagementPanel',key='fromCurrency')" width="200"
                               dataField="fromCurrency">
                <mx:itemEditor>
                    <mx:Component>
                        <mx:ComboBox selectedItem="{data.fromCurrency}" dataProvider="{outerDocument.currencyList}"
                                     width="150"/>
                    </mx:Component>
                </mx:itemEditor>

            </mx:DataGridColumn>
            <mx:DataGridColumn headerText="@Resource(bundle='StoresManagementPanel',key='toCurrency')" width="200"
                               dataField="toCurrency">
                <mx:itemEditor>
                    <mx:Component>
                        <mx:ComboBox selectedItem="{data.toCurrency}" dataProvider="{outerDocument.currencyList}"
                                     width="150"/>
                    </mx:Component>
                </mx:itemEditor>

            </mx:DataGridColumn>
            <mx:DataGridColumn headerText="@Resource(bundle='StoresManagementPanel',key='rate')" dataField="rate"
                               width="150">

            </mx:DataGridColumn>
            <mx:DataGridColumn headerText="@Resource(bundle='StoresManagementPanel',key='action')" editable="false">
                <mx:itemRenderer>
                    <mx:Component>
                        <mx:HBox>
                            <mx:Script><![CDATA[
                                import mx.controls.Alert;
                                import mx.events.CloseEvent;

                                import org.yes.cart.impl.ShopExchangeRateDTOImpl;


                                private function onSaveRateButtonClick(data:ShopExchangeRateDTOImpl):void {

                                    if (data.shopexchangerateId > 0) {
                                        outerDocument.remoteShopExchangeRateService.update(data);
                                    } else {
                                        outerDocument.remoteShopExchangeRateService.create(data);
                                    }
                                }

                                private function onDeleteRateButtonClick(data:ShopExchangeRateDTOImpl):void {
                                    Alert.show(
                                            resourceManager.getString('StoresManagementPanel', 'deleteRateMsg'),
                                            resourceManager.getString('Common', 'info'),
                                            Alert.YES | Alert.NO, null, onDeleteRateConfirmed, null, Alert.NO);
                                }

                                /**
                                 * User confirm cancel or return the order.
                                 * @param event
                                 */
                                private function onDeleteRateConfirmed(event:CloseEvent):void {
                                    if (event.detail == Alert.YES) { //cancel/return order
                                        outerDocument.remoteShopExchangeRateService.remove((data as ShopExchangeRateDTOImpl).shopexchangerateId);
                                    }
                                }
                                ]]></mx:Script>


                            <mx:Button

                                    label="@Resource(bundle='StoresManagementPanel',key='saveRate')"
                                    click="callLater(onSaveRateButtonClick, new Array(data))"/>


                            <mx:Button label="@Resource(bundle='StoresManagementPanel',key='deleteRate')"
                                       click="callLater(onDeleteRateButtonClick, new Array(data))"/>

                        </mx:HBox>
                    </mx:Component>
                </mx:itemRenderer>

            </mx:DataGridColumn>

        </mx:columns>
    </mx:DataGrid>

</mx:VBox>
