<?xml version="1.0" encoding="utf-8"?>
<!--
  - Copyright 2009 Igor Azarnyi, Denys Pavlov
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
         width="100%" height="100%"
         creationComplete="init();"
         paddingLeft="2" paddingTop="2" paddingRight="2" paddingBottom="2">
    <mx:Script>

<![CDATA[
        import mx.controls.Alert;
        import mx.events.CloseEvent;
        import mx.events.DataGridEvent;
        import mx.events.ListEvent;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import org.yes.cart.impl.ShopDTOImpl;
        import org.yes.cart.impl.ShopUrlDTOImpl;
        import org.yes.cart.shopmanager.ShopManagerGlobal;
        import org.yes.cart.validation.DomainNameValidator;
        import org.yes.cart.util.DomainUtils;

        private var shopDTOImpl:ShopDTOImpl;

        private function init():void {
            remoteShopUrlService.getAllByShopId(shopDTOImpl.shopId);
        }


        public function setShopDTOImpl(value:ShopDTOImpl):void {
            shopDTOImpl = value;
        }


        private function onAddNewUrlClick(event:MouseEvent):void {

            var newShopUrl:ShopUrlDTOImpl = new ShopUrlDTOImpl();
            newShopUrl.shopId = shopDTOImpl.shopId;
            newShopUrl.url = resourceManager.getString('StoreSupportedUrlsPanel', 'pressHereToEditNewURL');
            this.urlGrid.dataProvider.addItem(newShopUrl);
        }

        private function validateUrlsBeforeSave():Boolean {
            for each (var urlDto:ShopUrlDTOImpl in this.urlGrid.dataProvider) {
                if (!DomainNameValidator.validate(urlDto.url)) {
                    this.urlGrid.errorString = resourceManager.getString('StoreSupportedUrlsPanel', 'invalidUrl', [ urlDto.url ]);
                    return false;
                }
            }
            this.urlGrid.errorString = '';
            return true;
        }

        private function onSaveUrlClick(event:MouseEvent):void {
            if (validateUrlsBeforeSave()) {

                urlsChanged = false;
                for each (var urlDto:ShopUrlDTOImpl in this.urlGrid.dataProvider) {

                    if (DomainUtils.isNewPK(urlDto.storeUrlId)) {
                        remoteShopUrlService.create(urlDto);
                    } else {
                        remoteShopUrlService.update(urlDto);
                    }
                }

            }
        }


        private function onDeleteUrlClick(event:MouseEvent):void {

            if (this.allowDeleteUrl && this.urlGrid.selectedItem != null) {
                Alert.show(
                        resourceManager.getString('StoreSupportedUrlsPanel', 'deleteUrlConfirm', [ this.urlGrid.selectedItem.url ]),
                        resourceManager.getString('ShopManagerApplication', 'warning'),
                        Alert.OK | Alert.CANCEL, this, onDeleteUrlConfirm, null, Alert.OK);
            }
        }

        private function onDeleteUrlConfirm(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                if (this.allowDeleteUrl && this.urlGrid.selectedItem != null) {

                    if (DomainUtils.isNew(this.urlGrid.selectedItem, 'storeUrlId')) {
                        this.urlGrid.dataProvider.removeItemAt(this.urlGrid.selectedIndex);
                        this.allowDeleteUrl = false;
                        validateUrlsBeforeSave();
                    } else {
                        remoteShopUrlService.remove(this.urlGrid.selectedItem.storeUrlId);
                    }
                }
            }
        }

        private function onGetAllByShopIdResult(event:ResultEvent):void {

            urlsChanged = false;
            allowDeleteUrl = false;
            this.urlGrid.dataProvider = event.result;
            // default sort asc by URL
            var columnIndex:int = 0;
            this.urlGrid.dispatchEvent(new DataGridEvent(DataGridEvent.HEADER_RELEASE, false, true, columnIndex, null, 0, null, null, 0));

        }

        private function onUrlItemEditEnd(event:DataGridEvent):void {

            validateUrlsBeforeSave();
            this.urlsChanged = true;

        }

        private function onSaveResult(event:ResultEvent):void {
            // do nothing for now
        }

        private function onSaveFault(event:FaultEvent):void {

            Alert.show(
                    resourceManager.getString('StoreSupportedUrlsPanel', 'cannotSaveURL', [ event.toString() ]),
                    resourceManager.getString('StoreSupportedUrlsPanel', 'communicationError')
            );
            urlsChanged = true;
        }

        private function onRemoveResult(event:ResultEvent):void {

            remoteShopUrlService.getAllByShopId(shopDTOImpl.shopId);

            Alert.show(
                    resourceManager.getString('StoreSupportedUrlsPanel', 'urlDeletedConfirm'),
                    resourceManager.getString('ShopManagerApplication', 'info'));
        }

        private function onItemClick(event:ListEvent):void {

            this.allowDeleteUrl = this.urlGrid.selectedItem != null;

        }
        ]]>
</mx:Script>

    <mx:RemoteObject showBusyCursor="true"  id="remoteShopUrlService"
                     destination="remoteShopUrlService"
                     result="ShopManagerGlobal.instance.defaultOnRpcMethodResult(event)"
                     fault="ShopManagerGlobal.instance.defaultOnRpcMethodFault(event)"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getAllByShopId" name="getAllByShopId"
                   result="onGetAllByShopIdResult(event)"/>
        <mx:method id="create" name="create"
                   result="onSaveResult(event)"
                   fault="onSaveFault(event)"/>
        <mx:method id="remove" name="remove"
                   result="onRemoveResult(event)"/>

    </mx:RemoteObject>

    <mx:Boolean id="urlsChanged">false</mx:Boolean>
    <mx:Boolean id="allowDeleteUrl">false</mx:Boolean>

    <mx:HBox paddingTop="5" width="100%">
        <mx:Label text="@Resource(bundle='StoreSupportedUrlsPanel',key='supportedUrl')"/>
        <mx:Button
                id="addBtn"
                enabled="{!urlsChanged}"
                label="@Resource(bundle='StoreSupportedUrlsPanel',key='addUrl')"
                click="onAddNewUrlClick(event)"/>
        <mx:Button
                id="deleteBtn"
                enabled="{allowDeleteUrl}"
                label="@Resource(bundle='StoreSupportedUrlsPanel',key='deleteUrl')"
                click="onDeleteUrlClick(event)"/>
        <mx:Button
                id="saveBtn"
                visible="{urlsChanged}"
                label="@Resource(bundle='StoreSupportedUrlsPanel',key='saveUrl')"
                click="onSaveUrlClick(event)"/>

    </mx:HBox>
    <mx:DataGrid id="urlGrid"
                 editable="true"
                 itemClick="onItemClick(event)"
                 itemEditEnd="onUrlItemEditEnd(event)"
                 width="100%" height="100%">
        <mx:columns>
            <mx:DataGridColumn headerText="@Resource(bundle='StoreSupportedUrlsPanel',key='url')" dataField="url"/>
        </mx:columns>
    </mx:DataGrid>
</mx:VBox>