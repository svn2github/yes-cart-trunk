<?xml version="1.0" encoding="utf-8"?>
<!--
  - Copyright 2009 Igor Azarnyi, Denys Pavlov
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<mx:VDividedBox xmlns:mx="http://www.adobe.com/2006/mxml"
                xmlns:tax="org.yes.cart.ui.tax.*"
                xmlns:georg="com.georg.*"
                width="100%"
                height="100%"
                creationComplete="initPanel()"
                paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2">
    <mx:Script>

        <![CDATA[
        import com.hexagonstar.util.debug.Debug;

        import mx.controls.Alert;
        import mx.events.CloseEvent;
        import mx.events.IndexChangedEvent;
        import mx.events.ListEvent;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import org.yes.cart.impl.TaxDTOImpl;
        import org.yes.cart.shopmanager.ShopManagerGlobal;
        import org.yes.cart.util.CloneUtil;

        private var TAB_SUMMARY_IDX:int = 0;
        private var TAB_CONFIGS_IDX:int = 1;


        [Bindable]
        private var taxDTOImpl:TaxDTOImpl;

        public function initPanel():void {
        }

        private function onTaxSelected(event:ListEvent):void {
            taxSelected = this.taxGrid.selectedItem != null;
            if (taxSelected) {
                taxDTOImpl = TaxDTOImpl(CloneUtil.clone(event.currentTarget.selectedItem));
                initTabs(taxTabNavigator.selectedIndex);
            }
        }

        private function initTabs(tabIdx:int):void {
            if (taxSelected) {
                Debug.trace("INFO promotionTabNavigator.selectedIndex is :" + tabIdx);

                taxSummary.label = taxDTOImpl.code;

                switch (tabIdx) {


                    case TAB_SUMMARY_IDX:
                        summaryTabSelected();
                        break;

                    case TAB_CONFIGS_IDX:
                        configsTabSelected();
                        break;


                }
            }

        }

        private function onTaxUpdate(tax:TaxDTOImpl):void {
            taxDTOImpl = tax;
            taxSelected = taxDTOImpl != null;
            if (taxSelected) {
                initTabs(taxTabNavigator.selectedIndex);
            }
        }

        private function summaryTabSelected():void {
            this.taxSummary.tax = taxDTOImpl;
            Debug.trace("INFO Summary tab selected for tax id" + taxDTOImpl.taxId);
        }

        private function configsTabSelected():void {
            Debug.trace("INFO Configuration tab selected for tax id" + taxDTOImpl.taxId);
            taxConfigs.tax = taxDTOImpl;
        }

        private function onApplyFilterClick(event:MouseEvent):void {

            remoteTaxService.findByParameters(
                    codeFilterValue.text,
                    shopCodeFilterValue.text,
                    currencyFilterValue.text);
        }

        private function onRemoveTaxResult(event:ResultEvent):void {
            onApplyFilterClick(null);
        }

        private function onTabClick(event:IndexChangedEvent):void {
            initTabs(event.newIndex);
        }

        private function onRpcMethodFault(event:FaultEvent):void {
            ShopManagerGlobal.instance.defaultOnRpcMethodFault(event);
        }

        private function onFindTaxResult(event:ResultEvent):void {
            this.taxSelected = false;
            this.taxGrid.dataProvider = event.result;
        }

        private function onApplyFilterShowClick(event:MouseEvent):void {
            filterPanel.visible = !filterPanel.visible;
            filterPanel.includeInLayout = filterPanel.visible;
            if (filterPanel.visible) {
                (event.target as Button).label = resourceManager.getString('Common', 'findBtnToggleOff');
            } else {
                (event.target as Button).label = resourceManager.getString('Common', 'findBtnToggleOn');
            }
        }

        private function onRemoveBtnClick(event:MouseEvent):void {
            if (taxSelected && taxDTOImpl != null) {
                Alert.show(
                        resourceManager.getString('TaxManagementPanel', 'deleteTaxConfirm', [ this.taxDTOImpl.code ]),
                        resourceManager.getString('ShopManagerApplication', 'warning'),
                        Alert.OK | Alert.CANCEL, this, onDeleteSelectedTaxConfirm, null, Alert.OK);
            }
        }

        private function onDeleteSelectedTaxConfirm(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                if (taxSelected && taxDTOImpl != null) {
                    remoteTaxService.remove(taxDTOImpl.taxId);
                }
            }
        }

        private function onCreateBtnClick(event:MouseEvent):void {
            taxDTOImpl = new TaxDTOImpl();
            taxDTOImpl.exclusiveOfPrice = false;
            taxDTOImpl.code = resourceManager.getString('TaxManagementPanel', 'newTax');
            taxSelected = true;

            initTabs(taxTabNavigator.selectedIndex);
        }
        ]]>

    </mx:Script>

    <mx:Boolean id="taxSelected">false</mx:Boolean>

    <mx:RemoteObject showBusyCursor="true" id="remoteTaxService" destination="remoteTaxService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="findByParameters" name="findByParameters"
                   result="onFindTaxResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="remove" name="remove"
                   result="onRemoveTaxResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>

    <mx:Panel width="100%" height="100%" title="@Resource(bundle='TaxManagementPanel',key='taxes')"
              paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2">
        <mx:VBox width="100%">

            <mx:HBox paddingTop="5" width="100%">

                <mx:VBox paddingTop="5">

                    <mx:Grid >
                        <mx:GridRow>
                            <mx:GridItem>
                                <mx:Button label="@Resource(bundle='TaxManagementPanel',key='createTax')"
                                           click="onCreateBtnClick(event)"/>
                                <mx:Button label="@Resource(bundle='TaxManagementPanel',key='deleteTax')"
                                           click="onRemoveBtnClick(event)"
                                           enabled="{taxSelected}"
                                        />
                            </mx:GridItem>
                            <mx:GridItem>
                                <mx:Label text="@Resource(bundle='TaxManagementPanel',key='code')"/>

                                <mx:TextInput id="codeFilterValue" width="100"
                                              toolTip="@Resource(bundle='TaxManagementPanel',key='code')"/>
                            </mx:GridItem>
                            <mx:GridItem>
                                <mx:Button label="@Resource(bundle='Common',key='findBtnToggleOn')"
                                           click="onApplyFilterShowClick(event)"
                                        />
                            </mx:GridItem>
                        </mx:GridRow>
                    </mx:Grid>

                    <mx:Grid id="filterPanel" visible="false" includeInLayout="false" >
                        <mx:GridRow>
                            <mx:GridItem>
                                <mx:Label text="@Resource(bundle='TaxManagementPanel',key='shopCode')"/>
                                <mx:TextInput id="shopCodeFilterValue" width="100"/>
                            </mx:GridItem>
                            <mx:GridItem>
                                <mx:Label text="@Resource(bundle='TaxManagementPanel',key='currency')"/>
                                <mx:TextInput id="currencyFilterValue" width="100"/>
                            </mx:GridItem>
                        </mx:GridRow>
                    </mx:Grid>
                </mx:VBox>

                <mx:Button height="100%" label="@Resource(bundle='TaxManagementPanel',key='applyFilter')"
                           toolTip="@Resource(bundle='TaxManagementPanel',key='applyFilterToolTip')"
                           click="onApplyFilterClick(event)"
                        />


            </mx:HBox>

            <mx:DataGrid id="taxGrid" width="100%" height="100%"
                         itemClick="onTaxSelected(event)">
                <mx:columns>
                    <mx:DataGridColumn width="80" headerText="@Resource(bundle='TaxManagementPanel',key='id')"
                                       dataField="taxId"/>
                    <mx:DataGridColumn headerText="@Resource(bundle='TaxManagementPanel',key='code')"
                                       dataField="code"/>
                    <mx:DataGridColumn headerText="@Resource(bundle='TaxManagementPanel',key='shopCode')"
                                       dataField="shopCode"/>
                    <mx:DataGridColumn headerText="@Resource(bundle='TaxManagementPanel',key='currency')"
                                       dataField="currency"/>
                    <mx:DataGridColumn headerText="@Resource(bundle='TaxManagementPanel',key='exclusiveOfPrice')">
                        <mx:itemRenderer>
                            <mx:Component>
                                <mx:HBox verticalAlign="middle" paddingLeft="3" paddingRight="3">
                                    <mx:CheckBox selected="{data.exclusiveOfPrice}" enabled="false"/>
                                </mx:HBox>
                            </mx:Component>
                        </mx:itemRenderer>
                    </mx:DataGridColumn>
                    <mx:DataGridColumn headerText="@Resource(bundle='TaxManagementPanel',key='taxRate')"
                                       dataField="taxRate"/>
                </mx:columns>
            </mx:DataGrid>

        </mx:VBox>
        <mx:TabNavigator id="taxTabNavigator" change="onTabClick(event);" width="100%" height="100%"
                         visible="{taxSelected}">

            <tax:TaxSummaryPanel id="taxSummary" updateCallback="onTaxUpdate"/>
            <tax:TaxConfigManagementPanel id="taxConfigs" label="@Resource(bundle='TaxManagementPanel',key='configs')"/>

        </mx:TabNavigator>

    </mx:Panel>

</mx:VDividedBox>