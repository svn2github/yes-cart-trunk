<?xml version="1.0" encoding="utf-8"?>
<!--
  - Copyright 2009 Igor Azarnyi, Denys Pavlov
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:yci18n="org.yes.cart.ui.i18n.*" width="100%" height="100%">


    <mx:ArrayCollection id="productAvailability"/>

    <mx:HBox>
        <mx:Form width="100%">
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='code')">
                <mx:TextInput id="codeTextInput" width="300" enabled="{allowChangeCode}"/>
            </mx:FormItem>
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='featured')">
                <mx:CheckBox id="featuredCheckBox"/>
            </mx:FormItem>
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='brand')">
                <mx:ComboBox id="brandComboBox" width="300"
                             dataProvider="{brands}"
                             labelField="name"
                             prompt="@Resource(bundle='ProductManagementPanel',key='selectBrandPropmt')"
                        />
            </mx:FormItem>
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='type')">
                <mx:ComboBox id="typeComboBox" width="300"
                             dataProvider="{productTypes}"
                             labelField="name"
                             prompt="@Resource(bundle='ProductManagementPanel',key='selectTypePropmt')"
                        />

            </mx:FormItem>

            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='productAvailability')">
                <mx:ComboBox id="productAvailabilityComboBox" width="200"
                             dataProvider="{productAvailability}"
                             labelField="name"
                             change="onProductAvailabilityChanged(event)"
                             prompt="@Resource(bundle='ProductManagementPanel',key='selectAvailability')"
                        />
            </mx:FormItem>

            <mx:FormItem width="100%"
                         label="@Resource(bundle='ProductManagementPanel',key='availableFrom')">
                <mx:HBox>
                    <mx:DateField id="productAvailableFromDateField" width="125"/>
                    <mx:Button
                            visible="{productAvailableFromDateField.selectedDate != null}"
                            label="@Resource(bundle='ProductManagementPanel',key='clearDate')"
                            toolTip="@Resource(bundle='ProductManagementPanel',key='clearFromDate')"
                            click="productAvailableFromDateField.selectedDate = null;"/>
                </mx:HBox>
            </mx:FormItem>
            <mx:FormItem width="100%"
                         label="@Resource(bundle='ProductManagementPanel',key='availableTo')">
                <mx:HBox>
                    <mx:DateField id="productAvailableToDateField" width="125"/>
                    <mx:Button
                            visible="{productAvailableToDateField.selectedDate != null}"
                            label="@Resource(bundle='ProductManagementPanel',key='clearDate')"
                            toolTip="@Resource(bundle='ProductManagementPanel',key='clearToDate')"
                            click="productAvailableToDateField.selectedDate = null;"/>
                </mx:HBox>
            </mx:FormItem>
        </mx:Form>

        <mx:Form width="100%">

            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='name')">
                <mx:TextInput id="nameTextInput" width="300"/>
            </mx:FormItem>
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='displayName')">
                <yci18n:i18nStringField id="displayNames" change="onDisplayNamesChange(event)"/>
            </mx:FormItem>
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='description')">
                <mx:TextArea id="descriptionTextInput" width="300"/>
            </mx:FormItem>

            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='tag')">
                <mx:TextInput id="tagTextInput" width="300"/>
            </mx:FormItem>

            <mx:FormItem width="100%">
                <mx:Button width="150"
                           enabled="{productDTOImplChanged}"
                           label="@Resource(bundle='ProductManagementPanel',key='save')"
                           toolTip="@Resource(bundle='ProductManagementPanel',key='saveHint')"
                           click="saveProductChanges(event)"/>

            </mx:FormItem>

        </mx:Form>

    </mx:HBox>



    <mx:ArrayCollection id="propertyWatchers"/>

    <mx:ArrayCollection id="productTypes"/>
    <mx:ArrayCollection id="brands"/>

    <mx:Boolean id="allowChangeCode">false</mx:Boolean>
    <mx:Boolean id="productDTOImplChanged">false</mx:Boolean>

    <mx:Script><![CDATA[
        import mx.binding.utils.BindingUtils;
        import mx.binding.utils.ChangeWatcher;
        import mx.controls.Alert;
        import mx.events.FlexEvent;
        import mx.events.PropertyChangeEvent;
        import mx.utils.ObjectUtil;

        import org.yes.cart.event.DtoEvent;

        import org.yes.cart.impl.ProductDTOImpl;
        import org.yes.cart.util.DataModelUtils;
        import org.yes.cart.util.DomainUtils;

        [Bindable]
        private var _productDTOImpl:ProductDTOImpl;

        public function get productDTOImpl():ProductDTOImpl {
            return _productDTOImpl;
        }

        public function set productDTOImpl(value:ProductDTOImpl):void {
            unbindProperties();
            _productDTOImpl = value;
            allowChangeCode = DomainUtils.isPersistentPK(_productDTOImpl.productId);
            bindProperties();
        }

        private function onDisplayNamesChange(event:FlexEvent):void {
            productDTOImplChanged = true;
        }

        private function saveProductChanges(event:MouseEvent):void {
            dispatchEvent(new DtoEvent(DtoEvent.UPDATE, _productDTOImpl));
            productDTOImplChanged = false;
        }

        private function unbindProperties():void {
            for each (var watcher:ChangeWatcher in propertyWatchers) {
                watcher.unwatch();
            }
            propertyWatchers.removeAll();
            displayNames.setSourceObject(null, null);
        }


        private function onProductAvailabilityChanged(event:Event):void {
            _productDTOImpl.availability = productAvailabilityComboBox.selectedItem.data;
            onProductDTOChanged(null);
        }

        private function bindProperties():void {
            


            try {

                displayNames.setSourceObject(_productDTOImpl, 'displayNames');

                propertyWatchers.addItem(BindingUtils.bindProperty(codeTextInput, "text", _productDTOImpl, "code"));
                propertyWatchers.addItem(BindingUtils.bindProperty(nameTextInput, "text", _productDTOImpl, "name"));
                propertyWatchers.addItem(BindingUtils.bindProperty(tagTextInput, "text", _productDTOImpl, "tag"));
                propertyWatchers.addItem(BindingUtils.bindProperty(descriptionTextInput, "text", _productDTOImpl, "description"));
                propertyWatchers.addItem(BindingUtils.bindProperty(productAvailableFromDateField, "selectedDate", _productDTOImpl, "availablefrom"));
                propertyWatchers.addItem(BindingUtils.bindProperty(productAvailableToDateField, "selectedDate", _productDTOImpl, "availableto"));
                propertyWatchers.addItem(BindingUtils.bindProperty(featuredCheckBox, "selected", _productDTOImpl, "featured"));
                propertyWatchers.addItem(BindingUtils.bindProperty(brandComboBox, "selectedItem", _productDTOImpl, "brandDTO"));
                propertyWatchers.addItem(BindingUtils.bindProperty(typeComboBox, "selectedItem", _productDTOImpl, "productTypeDTO"));
                propertyWatchers.addItem(BindingUtils.bindProperty(productAvailabilityComboBox, "selectedItem", _productDTOImpl, "availability"));

                for (var i:int =0 ; i < productAvailabilityComboBox.dataProvider.length; i++) {
                    if (productAvailabilityComboBox.dataProvider[i].data == _productDTOImpl.availability) {
                        productAvailabilityComboBox.selectedIndex = i;
                        break;
                    }
                }

                DataModelUtils.selectCombo(brandComboBox, _productDTOImpl.brandDTO, 'brandId');
                DataModelUtils.selectCombo(typeComboBox, _productDTOImpl.productTypeDTO, 'producttypeId');


                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "code", codeTextInput, "text"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "name", nameTextInput, "text"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "tag", tagTextInput, "text"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "description", descriptionTextInput, "text"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "availablefrom", productAvailableFromDateField, "selectedDate"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "availableto", productAvailableToDateField, "selectedDate"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "featured", featuredCheckBox, "selected"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "brandDTO", brandComboBox, "selectedItem"));
                propertyWatchers.addItem(BindingUtils.bindProperty(_productDTOImpl, "productTypeDTO", typeComboBox, "selectedItem"));


                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "code", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "uri", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "title", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "metakeywords", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "metadescription", onProductDTOChanged));

                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "tag", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "name", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "description", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "availablefrom", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "availableto", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "featured", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "brandDTO", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "productTypeDTO", onProductDTOChanged));
                propertyWatchers.addItem(ChangeWatcher.watch(_productDTOImpl, "availability", onProductDTOChanged));

            } catch(e:Error) {

                Alert.show("" + e.toString());

            }




        }

        private function onProductDTOChanged(event:PropertyChangeEvent):void {
            productDTOImplChanged = true;
        }
        ]]></mx:Script>

</mx:VBox>
