<?xml version="1.0" ?>
<!--
  - Copyright 2009 Igor Azarnyi, Denys Pavlov
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="onPanelInit()">

    <mx:VBox width="100%" height="100%" paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2">
        <mx:Form>
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='product')">
                <mx:Label id="productCodeName"/>
            </mx:FormItem>
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='shop')">
                <mx:HBox>
                    <mx:ComboBox id="storesComboBox"
                                 labelField="name"
                                 data="shopId"
                                 change="onShopSelectionChanged(event)"
                                 prompt="@Resource(bundle='ProductManagementPanel',key='selectStorePropmt')"/>
                    <mx:ComboBox id="storeCurrencyComboBox" change="onShopCurrencyChange(event)"/>
                </mx:HBox>
            </mx:FormItem>
            <mx:FormItem label="@Resource(bundle='ProductManagementPanel',key='price')">
                <mx:HBox>
                    <mx:Button id="addPriceBtn"
                               label="@Resource(bundle='ProductManagementPanel',key='addPrice')"
                               toolTip="@Resource(bundle='ProductManagementPanel',key='addPriceHint')"
                               enabled="{allowAddPrice}"
                               click="onAddPriceClick(event);"
                            />
                    <mx:Button id="editPriceBtn"
                               label="@Resource(bundle='ProductManagementPanel',key='editPrice')"
                               toolTip="@Resource(bundle='ProductManagementPanel',key='editPriceHint')"
                               enabled="{allowEditPrice}"
                               click="onEditPriceClick(event);"
                            />
                    <mx:Button id="deletePriceBtn"
                               label="@Resource(bundle='ProductManagementPanel',key='deletePrice')"
                               toolTip="@Resource(bundle='ProductManagementPanel',key='deletePriceHint')"
                               enabled="{allowDeletePrice}"
                               click="onDeletePriceClick(event);"
                            />
                </mx:HBox>
            </mx:FormItem>

        </mx:Form>
        <mx:DataGrid
                id="priceDataGrid"
                x="0" y="0" width="100%" height="100%" editable="false"
                dataProvider="{prices}"
                itemClick="onPriceSelected(event)"
                itemEditEnd="onPriceValueEditEnd(event);"
                >
            <mx:columns>
                <mx:DataGridColumn width="50" headerText="@Resource(bundle='ProductManagementPanel',key='id')"
                                   dataField="skuPriceId" editable="false"/>
                <mx:DataGridColumn width="120" headerText="@Resource(bundle='ProductManagementPanel',key='skuCode')"
                                   dataField="code" editable="false"/>
                <mx:DataGridColumn headerText="@Resource(bundle='ProductManagementPanel',key='skuName')"
                                   dataField="skuName" editable="false"/>
                <mx:DataGridColumn width="50" headerText="@Resource(bundle='ProductManagementPanel',key='quantity')"
                                   dataField="quantity" editable="true"/>
                <mx:DataGridColumn headerText="@Resource(bundle='ProductManagementPanel',key='listPrice')"
                                   editorDataField="returnListPrice"
                                   rendererIsEditor="false"
                                   dataField="regularPrice"
                                   editable="true">
                    <mx:itemEditor>
                        <mx:Component>
                            <mx:HBox>
                                <mx:Script>
                                <![CDATA[
                                    // Define a property for returning the new value to the cell.
                                    [Bindable]
                                    public var returnListPrice:String;
                                    ]]>
                                </mx:Script>
                                <mx:TextInput id="newListPrice" width="70" text="{data.regularPrice}"
                                              updateComplete="returnListPrice=newListPrice.text;"
                                              change="returnListPrice=newListPrice.text;"/>

                                <mx:NumberValidator id="listPriceValidator" source="{newListPrice}" property="text"
                                                    allowNegative="false"
                                                    trigger="{newListPrice}" triggerEvent="change"
                                                    decimalSeparator="."/>
                            </mx:HBox>
                        </mx:Component>
                    </mx:itemEditor>
                    <mx:itemRenderer>
                        <mx:Component>
                            <mx:Text selectable="false" width="100%"
                                     text="{data.regularPrice==0?'':data.regularPrice}"
                                    />
                        </mx:Component>
                    </mx:itemRenderer>
                </mx:DataGridColumn>
                <mx:DataGridColumn headerText="@Resource(bundle='ProductManagementPanel',key='salePrice')"
                                   editorDataField="returnSalePrice"
                                   rendererIsEditor="false"
                                   dataField="salePrice"
                                   editable="true">
                    <mx:itemEditor>
                        <mx:Component>
                            <mx:HBox>
                                <mx:Script>
                                <![CDATA[
                                    // Define a property for returning the new value to the cell.
                                    [Bindable]
                                    public var returnSalePrice:String;
                                    ]]>
                                </mx:Script>
                                <mx:TextInput id="newSalePrice" width="70"
                                              text="{data.salePrice}"
                                              updateComplete="returnSalePrice=newSalePrice.text;"
                                              change="returnSalePrice=newSalePrice.text;"
                                        />
                                <mx:NumberValidator
                                        id="salePriceValidator"
                                        source="{newSalePrice}"
                                        property="text"
                                        allowNegative="false"
                                        trigger="{newSalePrice}"
                                        triggerEvent="change"
                                        decimalSeparator="."
                                        />
                            </mx:HBox>
                        </mx:Component>
                    </mx:itemEditor>
                    <mx:itemRenderer>
                        <mx:Component>
                            <mx:Text selectable="false" width="100%"
                                     text="{data.salePrice==0?'':data.salePrice}"
                                    />
                        </mx:Component>
                    </mx:itemRenderer>
                </mx:DataGridColumn>
                <mx:DataGridColumn headerText="@Resource(bundle='ProductManagementPanel',key='saleFrom')"
                                   dataField="salefrom"
                                   itemEditor="mx.controls.DateField"
                                   rendererIsEditor="false"
                                   editorDataField="selectedDate">
                    <mx:itemRenderer>
                        <mx:Component>
                            <mx:VBox>
                                <mx:DateFormatter id="formatDateTime" formatString="YYYY-MM-DD J:NN"></mx:DateFormatter>
                                <mx:Label text="{formatDateTime.format(data.salefrom)}"/>
                            </mx:VBox>
                        </mx:Component>
                    </mx:itemRenderer>
                </mx:DataGridColumn>
                <mx:DataGridColumn headerText="@Resource(bundle='ProductManagementPanel',key='saleTo')"
                                   dataField="saleto"
                                   itemEditor="mx.controls.DateField"
                                   rendererIsEditor="false"
                                   editorDataField="selectedDate">
                    <mx:itemRenderer>
                        <mx:Component>
                            <mx:VBox>
                                <mx:DateFormatter id="formatDateTime" formatString="YYYY-MM-DD J:NN"></mx:DateFormatter>
                                <mx:Label text="{formatDateTime.format(data.saleto)}"/>
                            </mx:VBox>
                        </mx:Component>
                    </mx:itemRenderer>
                </mx:DataGridColumn>
                <mx:DataGridColumn headerText="@Resource(bundle='ProductManagementPanel',key='minimalPrice')"
                                   editorDataField="returnMinimalPrice"
                                   rendererIsEditor="false"
                                   dataField="minimalPrice"
                                   editable="true">
                    <mx:itemEditor>
                        <mx:Component>
                            <mx:HBox>
                                <mx:Script>
                                <![CDATA[
                                    // Define a property for returning the new value to the cell.
                                    [Bindable]
                                    public var returnMinimalPrice:String;
                                    ]]>
                                </mx:Script>
                                <mx:TextInput id="newMinimalPrice" width="70"
                                              text="{data.minimalPrice}"
                                              updateComplete="returnMinimalPrice=newMinimalPrice.text;"
                                              change="returnMinimalPrice=newMinimalPrice.text;"
                                        />
                                <mx:NumberValidator
                                        id="minimalPriceValidator"
                                        source="{newMinimalPrice}"
                                        property="text"
                                        allowNegative="false"
                                        trigger="{newMinimalPrice}"
                                        triggerEvent="change"
                                        decimalSeparator="."
                                        />
                            </mx:HBox>
                        </mx:Component>
                    </mx:itemEditor>
                    <mx:itemRenderer>
                        <mx:Component>
                            <mx:Text selectable="false" width="100%"
                                     text="{data.minimalPrice==0?'':data.minimalPrice}"
                                    />
                        </mx:Component>
                    </mx:itemRenderer>
                </mx:DataGridColumn>
                <mx:DataGridColumn width="80" headerText="@Resource(bundle='ShopManagerApplication',key='tag')"
                                   dataField="tag" editable="false"/>
            </mx:columns>
        </mx:DataGrid>
    </mx:VBox>

    <mx:Boolean id="allowAddPrice">false</mx:Boolean>
    <mx:Boolean id="allowEditPrice">false</mx:Boolean>
    <mx:Boolean id="allowDeletePrice">false</mx:Boolean>

    <mx:ArrayCollection id="prices"/>
    <mx:ArrayCollection id="allProductSkus"/>


    <mx:RemoteObject showBusyCursor="true" id="remoteShopService" destination="remoteShopService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getAllShops" name="getAll"
                   result="onGetAllShopsResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="getSupportedCurrencies" name="getSupportedCurrencies"
                   result="onGetSupportedCurrenciesResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>

    <mx:RemoteObject showBusyCursor="true" id="remoteProductSkuService"
                     destination="remoteProductSkuService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getAllProductSkus" name="getAllProductSkus"
                   result="onGetAllProductSkusResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="updateSkuPrice" name="updateSkuPrice"
                   result="onUpdateSkuPriceResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="removeSkuPrice" name="removeSkuPrice"
                   result="onRemoveSkuPriceResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="createSkuPrice" name="createSkuPrice"
                   result="onCreateSkuPriceResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>


    <mx:Script>
		<![CDATA[
        import com.hexagonstar.util.debug.Debug;

        import mx.core.FlexGlobals;
        import mx.rpc.events.FaultEvent;

        import org.yes.cart.impl.ProductDTOImpl;
        import org.yes.cart.impl.ProductSkuDTOImpl;
        import org.yes.cart.impl.ShopDTOImpl;
        import org.yes.cart.impl.SkuPriceDTOImpl;
        import org.yes.cart.shopmanager.ShopManagerGlobal;

        import mx.collections.Sort;
        import mx.collections.SortField;
        import mx.controls.Alert;
        import mx.events.CloseEvent;
        import mx.events.DataGridEvent;
        import mx.events.DataGridEventReason;
        import mx.events.ListEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.ResultEvent;

        private var _productId:Number;

        private var createPriceDialog:CreatePriceDialog;

        public function get productId():Number {
            return _productId;
        }

        public function set product(value:ProductDTOImpl):void {
            if (_productId == value.productId) {
                return;
            }
            _productId = value.productId;
            productCodeName.text = value.name + ' (' + value.code + ')';
            remoteProductSkuService.getAllProductSkus(productId);
        }

        private function onShopSelectionChanged(event:Event):void {

            if (storesComboBox.selectedItem != null) {
                prices = null; // remove previous results
                var shopDTOImpl:ShopDTOImpl = event.currentTarget.selectedItem;
                remoteShopService.getSupportedCurrencies(shopDTOImpl.shopId);
            }
        }

        private function refreshSkuPrices():void {
            prices = new ArrayCollection();
            if (storesComboBox.selectedItem == null || storeCurrencyComboBox.selectedItem == null) {
                return;
            }
            var shopDTOImpl:ShopDTOImpl = storesComboBox.selectedItem as ShopDTOImpl;
            var selectedPrice:String = storeCurrencyComboBox.selectedItem as String;
            if (shopDTOImpl != null && selectedPrice != null) {
                for each (var sku:ProductSkuDTOImpl in allProductSkus) {
                    Debug.trace("DEBUG ProductPricePanel sku code is:" + (sku != null ?
                            sku.code : "null"));
                    for each (var priceCandidate:SkuPriceDTOImpl in sku.price) {
                        Debug.trace("DEBUG ProductPricePanel priceCandidate is:" + priceCandidate);
                        if (shopDTOImpl.shopId == priceCandidate.shopId
                                && selectedPrice == priceCandidate.currency) {
                            prices.addItem(priceCandidate);
                        }
                    }
                }
            }

            var skuCode:SortField = new SortField();
            skuCode.name = "code";

            var qty:SortField = new SortField();
            qty.name = "quantity";

            var sort:Sort = new Sort();
            sort.fields = [skuCode, qty];

            prices.sort = sort;
            prices.refresh();

            Debug.trace("DEBUG ProductPricePanel skusReady end");
            allowEditPrice = false;
            allowDeletePrice = false;


        }


        private function onPriceSelected(event:ListEvent):void {
            if (priceDataGrid.selectedItem != null) {
                allowEditPrice = true;
                allowDeletePrice = true;
            }
        }

        private function onPriceValueEditEnd(event:DataGridEvent):void {
            if (event.reason == DataGridEventReason.CANCELLED) {
                return; // Do not update cell.
            }

            Debug.trace("TRACE ProductPricePanel valueEditEnd ");

            var skuPriceDto:SkuPriceDTOImpl = DataGrid(event.target).dataProvider[event.rowIndex];
            Debug.trace("TRACE ProductPricePanel valueEditEnd skuPriceDto code = " + (skuPriceDto != null ?
                    skuPriceDto.code : "null"));
            remoteProductSkuService.updateSkuPrice(skuPriceDto);

            Debug.trace("TRACE ProductPricePanel update call performed ");

        }

        private function onDeletePriceClick(event:MouseEvent):void {
            if (allowDeletePrice && priceDataGrid.selectedItem != null) {
                Alert.show(
                        resourceManager.getString('ProductManagementPanel', 'deletePriceConfirm',
                                [ priceDataGrid.selectedItem.regularPrice, priceDataGrid.selectedItem.quantity ]),
                        resourceManager.getString('ShopManagerApplication', 'warning'),
                        Alert.OK | Alert.CANCEL, this, onDeletePriceClickConfirm, null, Alert.OK);
            }
        }

        private function onDeletePriceClickConfirm(event:CloseEvent):void {
            if (event.detail == Alert.OK) {

                if (allowDeletePrice && priceDataGrid.selectedItem != null) {
                    remoteProductSkuService.removeSkuPrice(priceDataGrid.selectedItem.skuPriceId);
                }
            }
        }

        private function onEditPriceClick(event:MouseEvent):void {
            if (allowEditPrice && priceDataGrid.selectedItem != null && storesComboBox.selectedItem != null
                    && storeCurrencyComboBox.selectedItem != null) {
                createPriceDialog = CreatePriceDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), CreatePriceDialog, true));

                preselectSkuOnPriceDialog(false);
                createPriceDialog.currency = storeCurrencyComboBox.selectedItem as String;
                createPriceDialog.shopId = storesComboBox.selectedItem.shopId;
                createPriceDialog.saveBtn.addEventListener(MouseEvent.CLICK, onUpdatePriceSaveClick);
                createPriceDialog.skuPrice = priceDataGrid.selectedItem as SkuPriceDTOImpl;
                PopUpManager.centerPopUp(createPriceDialog);
            }
        }

        private function preselectSkuOnPriceDialog(forceFirst:Boolean):void {
            createPriceDialog.skuComboBox.dataProvider = allProductSkus;

            if (forceFirst) {

                if (allProductSkus.length == 1) {
                    createPriceDialog.skuComboBox.selectedIndex = 0;
                    createPriceDialog.skuComboBox.selectedItem = createPriceDialog.selectedSku = createPriceDialog.skuComboBox.dataProvider.getItemAt(0);
                    createPriceDialog.skuComboBox.dispatchEvent(new ListEvent(Event.CHANGE));

                }


            } else {

                for (var i:int = 0, il:int = allProductSkus.length; i < il; i++) {
                    var skuCandidate:ProductSkuDTOImpl = allProductSkus.getItemAt(i) as ProductSkuDTOImpl;
                    if (skuCandidate.skuId == priceDataGrid.selectedItem.productSkuId) {
                        createPriceDialog.skuComboBox.selectedIndex = i;
                        createPriceDialog.selectedSku = skuCandidate;
                        createPriceDialog.skuComboBox.enabled = false;
                        break;
                    }
                }
            }

        }

        private function onUpdatePriceSaveClick(event:Event):void {

            if (createPriceDialog != null) {
                var price:SkuPriceDTOImpl = createPriceDialog.skuPrice;
                Debug.trace("INFO sku price to update is " + price);
                remoteProductSkuService.updateSkuPrice(price);
                createPriceDialog.saveBtn.removeEventListener(MouseEvent.CLICK, onUpdatePriceSaveClick);
                PopUpManager.removePopUp(createPriceDialog);
                createPriceDialog = null;
            }
        }

        private function onAddPriceClick(event:MouseEvent):void {
            if (allowAddPrice && storesComboBox.selectedItem != null && storeCurrencyComboBox.selectedItem != null) {
                createPriceDialog = CreatePriceDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), CreatePriceDialog, true));
                createPriceDialog.currency = storeCurrencyComboBox.selectedItem as String;
                createPriceDialog.shopId = storesComboBox.selectedItem.shopId;
                createPriceDialog.saveBtn.addEventListener(MouseEvent.CLICK, onAddPriceSaveClick);
                createPriceDialog.skuPriceCreate();
                preselectSkuOnPriceDialog(true);
                PopUpManager.centerPopUp(createPriceDialog);
            }
        }

        private function onAddPriceSaveClick(event:Event):void {

            if (allowAddPrice && storesComboBox.selectedItem != null && storeCurrencyComboBox.selectedItem != null) {
                var price:SkuPriceDTOImpl = createPriceDialog.skuPrice;
                price.shopId = storesComboBox.selectedItem.shopId;
                price.currency = storeCurrencyComboBox.selectedItem as String;
                remoteProductSkuService.createSkuPrice(price);
                createPriceDialog.saveBtn.removeEventListener(MouseEvent.CLICK, onAddPriceSaveClick);
                PopUpManager.removePopUp(createPriceDialog);
                createPriceDialog = null;
            }
        }

        protected function onRpcMethodFault(event:FaultEvent):void {
            ShopManagerGlobal.instance.defaultOnRpcMethodFault(event);
        }

        private function onPanelInit():void {
            remoteShopService.getAll();
        }

        private function onGetAllShopsResult(event:ResultEvent):void {
            storesComboBox.dataProvider = event.result;
            if (storesComboBox.dataProvider != null && storesComboBox.dataProvider.length > 0) {
                // preselect first one
                storesComboBox.selectedIndex = 0;
                storesComboBox.selectedItem = storesComboBox.dataProvider.getItemAt(0);
                storesComboBox.dispatchEvent(new ListEvent(Event.CHANGE));
            }
        }

        private function onGetSupportedCurrenciesResult(event:ResultEvent):void {
            var assignedCurrencyStr:String = String(event.result);
            allowDeletePrice = false;
            allowEditPrice = false;
            if (assignedCurrencyStr == null || assignedCurrencyStr == "null") {
                storeCurrencyComboBox.dataProvider = null;
                storeCurrencyComboBox.enabled = false;
                allowAddPrice = false;
            } else {
                storeCurrencyComboBox.dataProvider = new ArrayCollection(assignedCurrencyStr.split(","));
                storeCurrencyComboBox.enabled = true;
                storeCurrencyComboBox.selectedIndex = 0;
                storeCurrencyComboBox.selectedItem = storeCurrencyComboBox.dataProvider.getItemAt(0);
                refreshSkuPrices();
                allowAddPrice = true;
            }

        }

        private function onGetAllProductSkusResult(event:ResultEvent):void {
            allProductSkus = event.result as ArrayCollection;
            refreshSkuPrices();
        }

        private function onUpdateSkuPriceResult(event:ResultEvent):void {
            remoteProductSkuService.getAllProductSkus(productId);
        }

        private function onRemoveSkuPriceResult(event:ResultEvent):void {
            remoteProductSkuService.getAllProductSkus(productId);
        }

        private function onCreateSkuPriceResult(event:ResultEvent):void {
            remoteProductSkuService.getAllProductSkus(productId);
        }

        private function onShopCurrencyChange(event:ListEvent):void {
            refreshSkuPrices();
        }
        ]]>
   </mx:Script>
</mx:Canvas>