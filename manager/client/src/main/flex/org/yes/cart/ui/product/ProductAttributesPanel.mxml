<?xml version="1.0"?>
<!--
  - Copyright 2009 Igor Azarnyi, Denys Pavlov
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<attr:EntityAttributeValuesManagementPanel
           xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:attr="org.yes.cart.ui.attributes.*"
           width="100%"
           height="100%">

    <mx:Script><![CDATA[
        import mx.collections.ArrayCollection;
        import mx.events.DataGridEvent;
        import mx.rpc.events.ResultEvent;

        import org.yes.cart.constants.AttributeGroupNames;
        import org.yes.cart.impl.AttrValueProductDTOImpl;
        import org.yes.cart.impl.AttributeDTOImpl;
        import org.yes.cart.impl.ProductDTOImpl;
        import org.yes.cart.shopmanager.ShopManagerGlobal;
        import org.yes.cart.util.DomainUtils;

        private var _product:ProductDTOImpl;

        public function get product():ProductDTOImpl {
            return _product;
        }

        public function set product(value:ProductDTOImpl):void {
            if (_product != null && value != null && _product.productId == value.productId) {
                return;
            }
            _product = value;
            entityCode = value != null ? value.code : null;

            this.attrValues.removeAll();
            onEntitySet(AttributeGroupNames.PRODUCT);

            if (_product != null) {
                remoteProductService.getEntityAttributes(_product.productId);
            }
        }

        override protected function onValueAdded(selectedAttributeDTO:AttributeDTOImpl):void {
            var prodAttr:AttrValueProductDTOImpl = new AttrValueProductDTOImpl();
            prodAttr.attributeDTO = selectedAttributeDTO;
            prodAttr.productId = this._product.productId;
            remoteProductService.createEntityAttributeValue(prodAttr);
        }


        override protected function onValueChanged(event:DataGridEvent, attrValue:Object, newValue:Object):void {
            var catAttr:AttrValueProductDTOImpl = attrValue as AttrValueProductDTOImpl;
            catAttr.val = String(newValue);
            if (DomainUtils.isNewPK(catAttr.attrvalueId)) {
                remoteProductService.createEntityAttributeValue(catAttr);
            } else {
                remoteProductService.updateEntityAttributeValue(catAttr);
            }
        }

        override protected function onValueDelete(selectedItem:Object):void {
            this.attrValues.removeItemAt(this.attrValues.getItemIndex(selectedItem));
            remoteProductService.deleteAttributeValue(selectedItem.attrvalueId);
        }

        /**
         * Overwrite this method to allow different sibling panels to display different
         * groups of attributes
         *
         * @param attr currently loaded (into this panel) attribute
         * @return true to allow this attribute to be managed through this pannel
         */
        protected function allowManageAttribute(attr:AttrValueProductDTOImpl):Boolean {
            return true; // manage all available attributes by default
        }

        private function onGetEntityAttributesResult(event:ResultEvent):void {
            var attrs:ArrayCollection = event.result as ArrayCollection;
            if (attrs != null) {
                for each (var attr:AttrValueProductDTOImpl in attrs) {
                    if (allowManageAttribute(attr)) {
                        this.attrValues.addItem(attr);
                    }
                }
            }
        }

        private function onCreateEntityAttributeValueResult(event:ResultEvent):void {
            var prodAttr:AttrValueProductDTOImpl = event.result as AttrValueProductDTOImpl;
            var index:int = -1;
            for each (var old:AttrValueProductDTOImpl in this.attrValues) {
                index++;
                if (old.attributeDTO.attributeId == prodAttr.attributeDTO.attributeId) {
                    break;
                }
            }
            if (index != -1) {
                this.attrValues.removeItemAt(index);
                this.attrValues.addItemAt(prodAttr, index);
            } else {
                this.attrValues.addItem(prodAttr);
            }
        }

        private function onUpdateEntityAttributeValueResult(event:ResultEvent):void {
            var prodAttr:AttrValueProductDTOImpl = event.result as AttrValueProductDTOImpl;
            var index:int = -1;
            for each (var old:AttrValueProductDTOImpl in this.attrValues) {
                index++;
                if (old.attrvalueId == prodAttr.attrvalueId) {
                    break;
                }
            }
            if (index != -1) {
                this.attrValues.removeItemAt(index);
                this.attrValues.addItemAt(prodAttr, index);
            }
        }

        private function onDeleteAttributeValueResult(event:ResultEvent):void {
            // ok deleted
        }
        ]]></mx:Script>


    <mx:RemoteObject showBusyCursor="true" id="remoteProductService"
                     destination="remoteProductService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getEntityAttributes" name="getEntityAttributes"
                   result="onGetEntityAttributesResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="createEntityAttributeValue" name="createEntityAttributeValue"
                   result="onCreateEntityAttributeValueResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="updateEntityAttributeValue" name="updateEntityAttributeValue"
                   result="onUpdateEntityAttributeValueResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="deleteAttributeValue" name="deleteAttributeValue"
                   result="onDeleteAttributeValueResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>

</attr:EntityAttributeValuesManagementPanel>
