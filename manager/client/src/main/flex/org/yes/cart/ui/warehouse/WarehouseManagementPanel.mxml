<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           width="100%"
           height="100%"
           creationComplete="init();">
    <mx:Script>
		<![CDATA[
        import com.hexagonstar.util.debug.Debug;

        import mx.core.FlexGlobals;

        import org.yes.cart.impl.WarehouseDTOImpl;
        import org.yes.cart.util.CloneUtil;
        import org.yes.cart.shopmanager.ShopManagerGlobal;

        import flash.events.MouseEvent;

        import mx.controls.Alert;
        import mx.events.CloseEvent;
        import mx.events.ListEvent;

        import mx.managers.PopUpManager;
        import mx.rpc.AsyncResponder;
        import mx.rpc.AsyncToken;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;


        [Bindable]
        private var selectedWarehouse:WarehouseDTOImpl;

        private var newPopUp:WarehouseCreateEditDialog;


        /**
         * Init warehouse panel
         * @return none.
         */
        public function init():void {
            remoteWarehouseService.getAll();
        }


        private function remoteWarehouseService_faultHandler(event:FaultEvent):void {
            Debug.trace("remoteWarehouseService is failed, reason:" + event.toString());
            selectedWarehouse = null;
        }


        /**
         * Handle the warehouse selection in data grid.
         * @param event event
         * @return nothing
         */
        private function handle_warehouseSelectedClick(event:ListEvent):void {
            selectedWarehouse = WarehouseDTOImpl(event.currentTarget.selectedItem);
        }

        /**
         * Create new warehouse click handler.
         * @param event event
         * @return nothing
         */
        private function newWarehouseclickHandler(event:MouseEvent):void {
            Debug.trace("warehouse panel newWarehouseclickHandler");
            newPopUp = WarehouseCreateEditDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), WarehouseCreateEditDialog, true));
            newPopUp.saveBtn.addEventListener("click", createNewWarehouse);
            newPopUp.createEditWarehouse(new WarehouseDTOImpl(), true);
            PopUpManager.centerPopUp(newPopUp);
        }

        /**
         * Perform new warehouse creation.
         * @param event event
         * @return nothing
         */
        private function createNewWarehouse(event:Event):void {

            var asyncToken:AsyncToken = remoteWarehouseService.create(newPopUp.warehouseDTOImpl);
            asyncToken.addResponder(new AsyncResponder(warehouseCreatedResultHandler, warehouseCreateFaultHandler));
            PopUpManager.removePopUp(newPopUp);
        }

        /**
         * Warehouse created service call back .
         * @param event event
         * @param token async token
         * @return nothing
         */
        private function warehouseCreatedResultHandler(event:ResultEvent, token:AsyncToken):void {

            selectedWarehouse = null;
            remoteWarehouseService.getAll();
        }

        /**
         * Warehouse creation fauld handler
         * @param event event
         * @param token async token
         * @return
         */
        private function warehouseCreateFaultHandler(event:FaultEvent, token:AsyncToken):void {

            Debug.trace("warehouse panel create fault handler:" + event.toString());
            Alert.show(
                    resourceManager.getString('WarehouseManagementPanel', 'warehouseNotCreated'),
                    resourceManager.getString('WarehouseManagementPanel', 'error'));
            selectedWarehouse = null;
            remoteWarehouseService.getAll();
        }


        /**
         * Edit existing warehouse click handler.
         * @param event event
         * @return nothing
         */
        private function editWarehouseclickHandler(event:MouseEvent):void {
            Debug.trace("warehouse panel editWarehouseclickHandler");
            newPopUp = WarehouseCreateEditDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), WarehouseCreateEditDialog, true));
            newPopUp.saveBtn.addEventListener("click", updateExistingWarehouse);
            newPopUp.createEditWarehouse(WarehouseDTOImpl(CloneUtil.clone(selectedWarehouse)), false);
            PopUpManager.centerPopUp(newPopUp);
        }

        /**
         * Perform warehouse update.
         * @param event event
         * @return nothing.
         */
        private function updateExistingWarehouse(event:Event):void {

            var asyncToken:AsyncToken = remoteWarehouseService.update(newPopUp.warehouseDTOImpl);
            asyncToken.addResponder(new AsyncResponder(warehouseUpdatedResultHandler, warehouseUpdateFaultHandler));
            PopUpManager.removePopUp(newPopUp);
        }


        /**
         * Warehouse updated service call back .
         * @param event event
         * @param token async token
         * @return nothing
         */
        private function warehouseUpdatedResultHandler(event:ResultEvent, token:AsyncToken):void {
            selectedWarehouse = null;
            remoteWarehouseService.getAll();
        }

        /**
         * Warehouse update fault handler
         * @param event event
         * @param token async token
         * @return
         */
        private function warehouseUpdateFaultHandler(event:FaultEvent, token:AsyncToken):void {
            Debug.trace("warehouse panel update fault handler:" + event.toString());
            Alert.show(
                    resourceManager.getString('WarehouseManagementPanel', 'warehouseNotUpdated'),
                    resourceManager.getString('WarehouseManagementPanel', 'error'));
            selectedWarehouse = null;
            remoteWarehouseService.getAll();
        }


        /**
         * Delete warehouse click handler.
         * @param event event
         * @return nothing
         */
        private function deleteWarehouseClickHandler(event:flash.events.MouseEvent):void {
            Alert.show(
                    resourceManager.getString('WarehouseManagementPanel', 'deleteWarehouseConfirm'),
                    resourceManager.getString('WarehouseManagementPanel', 'warning'),
                    Alert.OK | Alert.CANCEL, this, deleteWarehouse, null, Alert.OK);
        }

        /**
         * Perform delete warehouse operation.
         * @param event close event
         * @return nothing
         */
        private function deleteWarehouse(event:CloseEvent):void {
            if (event.detail == Alert.OK) {

                Debug.trace("warehouse panel deleteWarehouse with id " + selectedWarehouse.warehouseId);
                var asyncToken:AsyncToken = remoteWarehouseService.remove(selectedWarehouse.warehouseId);
                asyncToken.addResponder(new AsyncResponder(warehouseDeletedResultHandler, warehouseDeleteFaultHandler));
            }
        }


        /**
         * Delete warehouse service call back .
         * @param event event
         * @param token async token
         * @return nothing
         */
        private function warehouseDeletedResultHandler(event:ResultEvent, token:AsyncToken):void {
            Debug.trace("warehouse panel delete fault handler:" + event.toString());
            Alert.show(
                    resourceManager.getString('WarehouseManagementPanel', 'warehouseDeletedConfirm'),
                    resourceManager.getString('WarehouseManagementPanel', 'info'));
            selectedWarehouse = null;
            remoteWarehouseService.getAll();
        }

        /**
         * Delete warehouse fauld handler
         * @param event
         * @param token
         * @return
         */
        private function warehouseDeleteFaultHandler(event:FaultEvent, token:AsyncToken):void {
            Alert.show(
                    resourceManager.getString('WarehouseManagementPanel', 'warehouseNotDeleted'),
                    resourceManager.getString('WarehouseManagementPanel', 'error'));
        }
        ]]>
    </mx:Script>


    <mx:RemoteObject showBusyCursor="true"  id="remoteWarehouseService"
                     destination="remoteWarehouseService"
                     result="ShopManagerGlobal.instance.defaultResultHandler(event)"
                     fault="remoteWarehouseService_faultHandler(event)"
                     channelSet="{ShopManagerGlobal.instance.channelSet}"/>

    <mx:Panel width="100%" height="100%" title="@Resource(bundle='WarehouseManagementPanel',key='warehouses')">
        <mx:VBox id="roleManagementPanel" height="100%" width="100%">


        <mx:ControlBar >
            <mx:Button label="@Resource(bundle='WarehouseManagementPanel',key='newWarehouse')"
                       toolTip="@Resource(bundle='WarehouseManagementPanel',key='newWarehouseHint')"
                       click="newWarehouseclickHandler(event)"/>
            <mx:Button label="@Resource(bundle='WarehouseManagementPanel',key='editWarehouse')"
                       toolTip="@Resource(bundle='WarehouseManagementPanel',key='editWarehouseHint')"
                       enabled="{selectedWarehouse != null}"
                       click="editWarehouseclickHandler(event)"/>
            <mx:Button label="@Resource(bundle='WarehouseManagementPanel',key='deleteWarehouse')"
                       toolTip="@Resource(bundle='WarehouseManagementPanel',key='deleteWarehouseHint')"
                       enabled="{selectedWarehouse != null}"
                       click="deleteWarehouseClickHandler(event)"/>

        </mx:ControlBar>

        <mx:DataGrid x="0" y="0" width="100%" height="99%"
                     dataProvider="{remoteWarehouseService.getAll.lastResult}"
                     itemClick="handle_warehouseSelectedClick(event)">
            <mx:columns>
                <mx:DataGridColumn width="80" headerText="@Resource(bundle='WarehouseManagementPanel',key='code')" dataField="code"/>
                <mx:DataGridColumn width="300" headerText="@Resource(bundle='WarehouseManagementPanel',key='name')" dataField="name"/>
                <mx:DataGridColumn headerText="@Resource(bundle='WarehouseManagementPanel',key='description')" dataField="description"/>
            </mx:columns>
        </mx:DataGrid>

    </mx:VBox>
    </mx:Panel>


</mx:Canvas>