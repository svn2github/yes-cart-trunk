<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
          title="@Resource(bundle='WarehouseManagementPanel',key='warehouses')"
           width="100%"
           height="100%"
           creationComplete="init();"
           paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2">
    <mx:Script>
		<![CDATA[
        import com.hexagonstar.util.debug.Debug;

        import mx.controls.Alert;
        import mx.core.FlexGlobals;
        import mx.events.CloseEvent;
        import mx.events.ListEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import org.yes.cart.impl.WarehouseDTOImpl;
        import org.yes.cart.shopmanager.ShopManagerGlobal;
        import org.yes.cart.util.CloneUtil;

        private var newPopUp:WarehouseCreateEditDialog;


        /**
         * Init warehouse panel
         * @return none.
         */
        public function init():void {
            remoteWarehouseService.getAll();
        }

        /**
         * Handle the warehouse selection in data grid.
         * @param event event
         * @return nothing
         */
        private function handle_warehouseSelectedClick(event:ListEvent):void {
            this.warehouseSelected = this.warehouseGrid.selectedItem != null;
        }

        /**
         * Create new warehouse click handler.
         * @param event event
         * @return nothing
         */
        private function onNewWarehouseClick(event:MouseEvent):void {
            Debug.trace("warehouse panel onNewWarehouseClick");
            newPopUp = WarehouseCreateEditDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), WarehouseCreateEditDialog, true));
            newPopUp.saveBtn.addEventListener(MouseEvent.CLICK, createNewWarehouse);
            newPopUp.createEditWarehouse(new WarehouseDTOImpl());
            PopUpManager.centerPopUp(newPopUp);
        }

        /**
         * Perform new warehouse creation.
         * @param event event
         * @return nothing
         */
        private function createNewWarehouse(event:Event):void {
            remoteWarehouseService.create(newPopUp.warehouseDTOImpl);
        }

        /**
         * Edit existing warehouse click handler.
         * @param event event
         * @return nothing
         */
        private function onEditWarehouseClick(event:Event):void {
            if (this.warehouseSelected && this.warehouseGrid.selectedItem != null) {
                Debug.trace("warehouse panel onEditWarehouseClick");
                newPopUp = WarehouseCreateEditDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), WarehouseCreateEditDialog, true));
                newPopUp.saveBtn.addEventListener(MouseEvent.CLICK, updateExistingWarehouse);
                newPopUp.createEditWarehouse(WarehouseDTOImpl(CloneUtil.clone(this.warehouseGrid.selectedItem)));
                PopUpManager.centerPopUp(newPopUp);
            }
        }

        /**
         * Perform warehouse update.
         * @param event event
         * @return nothing.
         */
        private function updateExistingWarehouse(event:Event):void {

            remoteWarehouseService.update(newPopUp.warehouseDTOImpl);

        }

        /**
         * Delete warehouse click handler.
         * @param event event
         * @return nothing
         */
        private function onDeleteWarehouseClick(event:MouseEvent):void {
            if (this.warehouseSelected && this.warehouseGrid.selectedItem != null) {
                Alert.show(
                        resourceManager.getString('WarehouseManagementPanel', 'deleteWarehouseConfirm', [ this.warehouseGrid.selectedItem.name ]),
                        resourceManager.getString('ShopManagerApplication', 'warning'),
                        Alert.OK | Alert.CANCEL, this, onDeleteWarehouseConfirm, null, Alert.OK);
            }
        }

        /**
         * Perform delete warehouse operation.
         * @param event close event
         * @return nothing
         */
        private function onDeleteWarehouseConfirm(event:CloseEvent):void {
            if (event.detail == Alert.OK) {

                if (this.warehouseSelected && this.warehouseGrid.selectedItem != null) {

                    Debug.trace("warehouse panel deleteWarehouse with id " + this.warehouseGrid.selectedItem.warehouseId);
                    remoteWarehouseService.remove(this.warehouseGrid.selectedItem.warehouseId);

                }
            }
            this.warehouseSelected = false;
        }

        private function onRpcMethodFault(event:FaultEvent):void {
            ShopManagerGlobal.instance.defaultOnRpcMethodFault(event);
        }

        private function onGetAllResult(event:ResultEvent):void {
            this.warehouseSelected = false;
            this.warehouseGrid.dataProvider = event.result;
        }

        private function onCreateResult(event:ResultEvent):void {
            if (newPopUp != null) {
                newPopUp.saveBtn.removeEventListener(MouseEvent.CLICK, onNewWarehouseClick);
                PopUpManager.removePopUp(newPopUp);
            }
            newPopUp = null;
            remoteWarehouseService.getAll();
        }

        private function onUpdateResult(event:ResultEvent):void {
            if (newPopUp != null) {
                newPopUp.saveBtn.removeEventListener(MouseEvent.CLICK, updateExistingWarehouse);
                PopUpManager.removePopUp(newPopUp);
            }
            newPopUp = null;
            remoteWarehouseService.getAll();

        }

        private function onRemoveResult(event:ResultEvent):void {
            Debug.trace("warehouse panel delete fault handler:" + event.toString());
            Alert.show(
                    resourceManager.getString('WarehouseManagementPanel', 'warehouseDeletedConfirm'),
                    resourceManager.getString('ShopManagerApplication', 'info'));
            remoteWarehouseService.getAll();

        }
        ]]>
    </mx:Script>


    <mx:RemoteObject showBusyCursor="true"  id="remoteWarehouseService"
                     destination="remoteWarehouseService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getAll" name="getAll"
                   result="onGetAllResult(event)"
                   fault="onRpcMethodFault(event)"/>
        <mx:method id="create" name="create"
                   result="onCreateResult(event)"
                   fault="onRpcMethodFault(event)"/>
        <mx:method id="update" name="update"
                   result="onUpdateResult(event)"
                   fault="onRpcMethodFault(event)"/>
        <mx:method id="remove" name="remove"
                   result="onRemoveResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>

    <mx:Boolean id="warehouseSelected">false</mx:Boolean>

    <mx:VBox height="100%" width="100%">

        <mx:ControlBar >
            <mx:Button label="@Resource(bundle='WarehouseManagementPanel',key='newWarehouse')"
                       toolTip="@Resource(bundle='WarehouseManagementPanel',key='newWarehouseHint')"
                       click="onNewWarehouseClick(event)"/>
            <mx:Button label="@Resource(bundle='WarehouseManagementPanel',key='editWarehouse')"
                       toolTip="@Resource(bundle='WarehouseManagementPanel',key='editWarehouseHint')"
                       enabled="{warehouseSelected}"
                       click="onEditWarehouseClick(event)"/>
            <mx:Button label="@Resource(bundle='WarehouseManagementPanel',key='deleteWarehouse')"
                       toolTip="@Resource(bundle='WarehouseManagementPanel',key='deleteWarehouseHint')"
                       enabled="{warehouseSelected}"
                       click="onDeleteWarehouseClick(event)"/>

        </mx:ControlBar>

        <mx:DataGrid id="warehouseGrid"
                     width="100%" height="100%"
                     doubleClickEnabled="true"
                     doubleClick="onEditWarehouseClick(event)"
                     itemClick="handle_warehouseSelectedClick(event)">
            <mx:columns>
                <mx:DataGridColumn width="80" headerText="@Resource(bundle='WarehouseManagementPanel',key='code')" dataField="code"/>
                <mx:DataGridColumn width="300" headerText="@Resource(bundle='WarehouseManagementPanel',key='name')" dataField="name"/>
                <mx:DataGridColumn headerText="@Resource(bundle='WarehouseManagementPanel',key='description')" dataField="description"/>
            </mx:columns>
        </mx:DataGrid>

    </mx:VBox>


</mx:Panel>