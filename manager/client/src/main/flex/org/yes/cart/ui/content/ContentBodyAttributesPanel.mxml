<?xml version="1.0"?>
<!--
  - Copyright 2009 Igor Azarnyi, Denys Pavlov
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<attr:EntityAttributeValuesManagementPanel
           label="@Resource(bundle='CategoryManagementPanel',key='content.body')"
           xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:attr="org.yes.cart.ui.attributes.*"
           width="100%"
           height="100%">

    <mx:Script><![CDATA[
        import mx.collections.ArrayCollection;
        import mx.controls.dataGridClasses.DataGridColumn;
        import mx.events.DataGridEvent;
        import mx.events.ListEvent;
        import mx.rpc.events.ResultEvent;

        import org.yes.cart.constants.AttributeGroupNames;
        import org.yes.cart.impl.AttrValueCategoryDTOImpl;
        import org.yes.cart.impl.AttributeDTOImpl;
        import org.yes.cart.impl.CategoryDTOImpl;
        import org.yes.cart.shopmanager.ShopManagerGlobal;
        import org.yes.cart.util.DomainUtils;

        private var _category:CategoryDTOImpl;

        public function get category():CategoryDTOImpl {
            return _category;
        }

        public function set category(value:CategoryDTOImpl):void {
            if (_category != null && value != null && _category.categoryId == value.categoryId) {
                return;
            }
            _category = value;

            this.attrValues.removeAll();
            onEntitySet(AttributeGroupNames.CATEGORY);

            if (_category != null) {
                remoteContentService.getEntityContentAttributes(_category.categoryId);
            }
        }

        override protected function onValueAdded(selectedAttributeDTO:AttributeDTOImpl):void {
            var catAttr:AttrValueCategoryDTOImpl = new AttrValueCategoryDTOImpl();
            catAttr.attributeDTO = selectedAttributeDTO;
            catAttr.categoryId = this._category.categoryId;
            remoteContentService.createEntityAttributeValue(catAttr);
        }


        override protected function onValueChanged(event:DataGridEvent, attrValue:Object, newValue:Object):void {
            var catAttr:AttrValueCategoryDTOImpl = attrValue as AttrValueCategoryDTOImpl;
            catAttr.val = String(newValue);
            remoteContentService.updateEntityAttributeValue(catAttr);
        }

        override protected function onAttributeSelected(event:ListEvent):void {
            canDelete = false;
        }

        override protected function onValueDelete(selectedItem:Object):void {
            // do nothing
        }

        /**
         * Overwrite this method to allow different sibling panels to display different
         * groups of attributes
         *
         * @param attr currently loaded (into this panel) attribute
         * @return true to allow this attribute to be managed through this pannel
         */
        protected function allowManageAttribute(attr:AttrValueCategoryDTOImpl):Boolean {
            return true; // manage all available attributes by default
        }

        private function onGetEntityAttributesResult(event:ResultEvent):void {
            var attrs:ArrayCollection = event.result as ArrayCollection;
            if (attrs != null) {
                for each (var attr:AttrValueCategoryDTOImpl in attrs) {
                    if (allowManageAttribute(attr)) {
                        this.attrValues.addItem(attr);
                    }
                }
            }
        }

        private function onCreateEntityAttributeValueResult(event:ResultEvent):void {
            var catAttr:AttrValueCategoryDTOImpl = event.result as AttrValueCategoryDTOImpl;
            var index:int = -1;
            for each (var old:AttrValueCategoryDTOImpl in this.attrValues) {
                index++;
                if (old.attributeDTO.attributeId == catAttr.attributeDTO.attributeId) {
                    break;
                }
            }
            if (index != -1) {
                this.attrValues.removeItemAt(index);
                this.attrValues.addItemAt(catAttr, index);
            } else {
                this.attrValues.addItem(catAttr);
            }
        }

        private function onUpdateEntityAttributeValueResult(event:ResultEvent):void {
            var catAttr:AttrValueCategoryDTOImpl = event.result as AttrValueCategoryDTOImpl;
            var index:int = -1;
            for each (var old:AttrValueCategoryDTOImpl in this.attrValues) {
                index++;
                if (old.attrvalueId == catAttr.attrvalueId) {
                    break;
                }
            }
            if (index != -1) {
                this.attrValues.removeItemAt(index);
                this.attrValues.addItemAt(catAttr, index);
            }
        }

        private function onDeleteAttributeValueResult(event:ResultEvent):void {
            // ok deleted
        }


        override protected function idLabelFunction(item:Object, column:DataGridColumn):String {
            return "";
        }

        ]]></mx:Script>


    <mx:RemoteObject showBusyCursor="true" id="remoteContentService"
                     destination="remoteContentService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getEntityContentAttributes" name="getEntityContentAttributes"
                   result="onGetEntityAttributesResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="updateEntityAttributeValue" name="updateEntityAttributeValue"
                   result="onUpdateEntityAttributeValueResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>

</attr:EntityAttributeValuesManagementPanel>
