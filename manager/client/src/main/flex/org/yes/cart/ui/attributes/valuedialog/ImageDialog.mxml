<?xml version="1.0" ?>
<!--
  - Copyright 2009 Igor Azarnyi, Denys Pavlov
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
                showCloseButton="true"
                close="PopUpManager.removePopUp(this)"
                implements="org.yes.cart.ui.attributes.valuedialog.ValueDialog"
                creationComplete="init();">

    <mx:VBox>
        <mx:Canvas id="imageView"
                   width="480"
                   height="480"
                   borderColor="#CCCCCC"
                   borderStyle="solid"/>

        <mx:Form x="0" y="0" width="100%">
            <mx:FormItem label="@Resource(bundle='AttributesManagementPanel',key='value')">
                <mx:TextInput width="310" id="valueTextInput"/>
            </mx:FormItem>
            <mx:FormItem label="@Resource(bundle='AttributesManagementPanel',key='altText')">
                <mx:TextInput width="310" id="altTextInput"/>
            </mx:FormItem>
            <mx:FormItem label="@Resource(bundle='AttributesManagementPanel',key='title')">
                <mx:TextInput width="310" id="titleTextInput"/>
            </mx:FormItem>

        </mx:Form>
        <mx:ControlBar width="100%" horizontalAlign="right">
            <mx:Button id="btnLoad"
                       label="@Resource(bundle='AttributesManagementPanel',key='loadImage')"
                       toolTip="@Resource(bundle='AttributesManagementPanel',key='loadImageHint')"
                       click="onLoadImageDialogButtonClick()"/>
            <mx:Button id="btnSave"
                       label="@Resource(bundle='AttributesManagementPanel',key='save')" click="onSaveImageClick()"/>
            <mx:Button id="btnCancel"
                       label="@Resource(bundle='AttributesManagementPanel',key='cancel')"
                       click="PopUpManager.removePopUp(this)"
                    />
        </mx:ControlBar>

    </mx:VBox>
    <mx:RemoteObject showBusyCursor="true" id="remoteImageService"
                     destination="remoteImageService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getImageAsByteArray" name="getImageAsByteArray"
                   result="onGetImageAsByteArrayResult(event)"
                   fault="onGetImageAsByteArrayFault(event)"/>

        <mx:method id="getSeoImage" name="getSeoImage"
                   result="onGetSeoImageResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="addImageToRepository" name="addImageToRepository"
                   result="onAddImageToRepositoryResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="create" name="create"
                   result="onCreateResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="update" name="update"
                   result="onUpdateResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>

    <mx:Script><![CDATA[
        import com.hexagonstar.util.debug.Debug;

        import mx.controls.Alert;

        import mx.controls.Text;

        import org.yes.cart.constants.AttributeGroupNames;
        import org.yes.cart.constants.Constants;
        import org.yes.cart.impl.SeoImageDTOImpl;
        import org.yes.cart.shopmanager.ShopManagerGlobal;

        import mx.binding.utils.BindingUtils;
        import mx.graphics.codec.JPEGEncoder;
        import mx.managers.PopUpManager;
        import mx.rpc.AsyncResponder;
        import mx.rpc.AsyncToken;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import org.yes.cart.util.DomainUtils;

        private static const THUMB_WIDTH:uint = 480;
        private static const THUMB_HEIGHT:uint = 480;


        private var _value:String;
        private var _oldValue:String;
        private var _windowTitle:String;
        private var _code:String;
        private var _attributeGroup:String;

        private var loadFileRef:FileReference;

        private var bitmapData:BitmapData;

        private var seoImage:SeoImageDTOImpl;
        private var imageBodyHasChanges:Boolean = false;

        private function init():void {
            this.title = windowTitle;

        }

        private function onSaveImageClick():void {

            if (imageBodyHasChanges) {
                //Save image when it really changed.
                var encoder:JPEGEncoder = new JPEGEncoder(); //TODO resolve the encoder by file extension
                var rawBytes:ByteArray = encoder.encode(bitmapData);
                remoteImageService.addImageToRepository(value, code, rawBytes, resolveImageStorage(attributeGroup));
            } else {
                updateImageSeoData();
            }
        }

        /**
         * Get image storage label. For sku and products the null will be returned.
         * @param attrGroupName
         * @return image starage label.
         */
        private function resolveImageStorage(attrGroupName:String):String {
            if (AttributeGroupNames.CATEGORY == attrGroupName) {
                return Constants.CATEGOTY_IMAGE_REPOSITORY_URL_PATTERN;
            } else if (AttributeGroupNames.BRAND == attrGroupName) {
                return Constants.BRAND_IMAGE_REPOSITORY_URL_PATTERN;
            } else if (AttributeGroupNames.SKU == attrGroupName) {
            } else if (AttributeGroupNames.PRODUCT == attrGroupName) {
            }
            return null;

        }


        private function updateImageSeoData():void {
            seoImage.imageName = value;
            seoImage.alt = altTextInput.text;
            seoImage.title = titleTextInput.text;
            if (DomainUtils.isNewPK(seoImage.seoImageId)) {
                remoteImageService.create(seoImage);
            } else {
                remoteImageService.update(seoImage);
            }

        }


        /**
         * Load file from local disk and show in {@link imageView}.
         * @return nothing
         */
        private function onLoadImageDialogButtonClick():void {
            loadFileRef = new FileReference();
            loadFileRef.addEventListener(Event.SELECT, onImageDialogFileSelect);
            loadFileRef.browse();
        }

        /**
         * Hanlde file selection event.
         * @param e event
         * @return nothing
         */
        private function onImageDialogFileSelect(e:Event):void {

            loadFileRef.removeEventListener(Event.SELECT, onImageDialogFileSelect);
            loadFileRef.addEventListener(Event.COMPLETE, onImageFileDialogLoadComplete);
            loadFileRef.load();
        }


        /**
         * File loaded event handle
         * @param e event
         * @return nothing
         */
        private function onImageFileDialogLoadComplete(e:Event):void {
            loadFileRef.removeEventListener(Event.COMPLETE, onImageFileDialogLoadComplete);

            var loader:Loader = new Loader();
            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onDataLoadComplete);
            loader.loadBytes(loadFileRef.data);

            var modifiedName:String = loadFileRef.name;
            /*if (code != null && code.length > 0) { // TO DO remove it after image service and image filter refactoring
             modifiedName = FileNameUtils.getFileNameWithoutExtension(modifiedName) + "_" + code + "_a." + FileNameUtils.getFileExtension(modifiedName);
             } */

            valueTextInput.text = modifiedName;
            _value = modifiedName; // update directly, since getter will try to reload the data from server
            loadFileRef = null;
            imageBodyHasChanges = true;

        }

        /**
         * Image loading complete, so we can show it.
         * @param e event
         * @return nothing
         */
        private function onDataLoadComplete(e:Event):void {
            bitmapData = Bitmap(e.target.content).bitmapData;
            var matrix:Matrix = new Matrix();
            var maxImageSide:uint = Math.max(bitmapData.width, bitmapData.height);
            var scale:Number = THUMB_WIDTH / maxImageSide;
            var xOffset:Number = (THUMB_WIDTH - scale * bitmapData.width) / 2;
            var yOffset:Number = (THUMB_HEIGHT - scale * bitmapData.height) / 2;

            matrix.scale(scale, scale);
            matrix.translate(xOffset, yOffset);

            imageView.removeAllChildren();
            imageView.graphics.clear();
            imageView.graphics.beginBitmapFill(bitmapData, matrix, false);
            imageView.graphics.drawRect(xOffset, yOffset, THUMB_WIDTH - 2 * xOffset, THUMB_HEIGHT - 2 * yOffset);
            imageView.graphics.endFill();

        }


        public function get value():String {
            return _value;
        }

        public function set value(value:String):void {
            if (attributeGroup == null) {
                Alert.show(
                        resourceManager.getString('AttributesManagementPanel', 'emptyAttributeGroup'),
                        resourceManager.getString('AttributesManagementPanel', 'communicationError')
                );
            }
            imageBodyHasChanges = false;
            _value = value;
            valueTextInput.text = value;

            if (value != null && value.length > 0) {
                //get the existing image and image seo information
                remoteImageService.getImageAsByteArray(value, code, resolveImageStorage(attributeGroup));

            } else {
                //nothing to do this is a new image
                seoImage = new SeoImageDTOImpl();

            }


        }

        public function get oldValue():String {
            return _oldValue;
        }

        public function set oldValue(value:String):void {
            _oldValue = value;
        }

        public function get windowTitle():String {
            return _windowTitle;
        }

        public function set windowTitle(value:String):void {
            _windowTitle = value;
        }

        public function getButtonSave():Button {
            return this.btnSave;
        }

        public function get code():String {
            return _code;
        }

        public function set code(value:String):void {
            _code = value;
        }

        public function get attributeGroup():String {
            return _attributeGroup;
        }

        public function set attributeGroup(value:String):void {
            _attributeGroup = value;
        }

        protected function onRpcMethodFault(event:FaultEvent):void {
            ShopManagerGlobal.instance.defaultOnRpcMethodFault(event);
        }

        private function onGetImageAsByteArrayResult(event:ResultEvent):void {

            var ba:ByteArray = ByteArray(event.result);
            var loader:Loader = new Loader();
            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onDataLoadComplete);
            loader.loadBytes(ba);
            remoteImageService.getSeoImage(value);


        }

        private function onGetImageAsByteArrayFault(event:FaultEvent):void {

            imageView.graphics.clear();
            imageView.removeAllChildren();
            var text:Text = new Text();
            text.text = resourceManager.getString('AttributesManagementPanel', 'loadImageFailed');
            imageView.addChild(text);

        }

        private function onGetSeoImageResult(event:ResultEvent):void {

            if (event.result == null) {
                seoImage = new SeoImageDTOImpl();
            } else {
                seoImage = SeoImageDTOImpl(event.result);
            }
            titleTextInput.text = seoImage.title;
            altTextInput.text = seoImage.alt;

        }

        private function onAddImageToRepositoryResult(event:ResultEvent):void {

            updateImageSeoData();

        }

        private function onCreateResult(event:ResultEvent):void {
            // do nothing
        }

        private function onUpdateResult(event:ResultEvent):void {
            // do nothing
        }
        ]]>
</mx:Script>
</mx:TitleWindow>