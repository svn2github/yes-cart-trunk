<?xml version="1.0" ?>
<!--
  - Copyright 2009 Igor Azarnyi, Denys Pavlov
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
                showCloseButton="true"
                close="PopUpManager.removePopUp(this)"
                implements="org.yes.cart.ui.attributes.valuedialog.ValueDialog"
                layout="vertical"
                creationComplete="init();">

    <mx:Canvas id="imageView"
               width="480"
               height="480"
               borderColor="#CCCCCC"
               borderStyle="solid"/>

    <mx:Form x="0" y="0" width="100%">
        <mx:FormItem label="@Resource(bundle='AttributesManagementPanel',key='value')">
            <mx:TextInput width="310" id="valueTextInput"/>
        </mx:FormItem>
        <mx:FormItem label="@Resource(bundle='AttributesManagementPanel',key='altText')">
            <mx:TextInput width="310" id="altTextInput"/>
        </mx:FormItem>
        <mx:FormItem label="@Resource(bundle='AttributesManagementPanel',key='title')">
            <mx:TextInput width="310" id="titleTextInput"/>
        </mx:FormItem>

    </mx:Form>
    <mx:ControlBar width="100%" horizontalAlign="right">
        <mx:Button id="btnLoad"
                   label="@Resource(bundle='AttributesManagementPanel',key='loadImage')"
                   toolTip="@Resource(bundle='AttributesManagementPanel',key='loadImageHint')"
                   click="onLoadImageDialogButtonClick()"/>
        <mx:Button id="btnSave"
                   label="@Resource(bundle='AttributesManagementPanel',key='save')" click="onSaveImageClick(event)"/>
        <mx:Button id="btnCancel"
                   label="@Resource(bundle='AttributesManagementPanel',key='cancel')"
                   click="PopUpManager.removePopUp(this)"
                />
    </mx:ControlBar>

    <mx:RemoteObject showBusyCursor="true" id="remoteImageService"
                     destination="remoteImageService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getImageAsByteArray" name="getImageAsByteArray"
                   result="onGetImageAsByteArrayResult(event)"
                   fault="onGetImageAsByteArrayFault(event)"/>

        <mx:method id="getSeoImage" name="getSeoImage"
                   result="onGetSeoImageResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="addImageToRepository" name="addImageToRepository"
                   result="onAddImageToRepositoryResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="create" name="create"
                   result="onCreateResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="update" name="update"
                   result="onUpdateResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>

    <mx:Script><![CDATA[
        import com.hexagonstar.util.debug.Debug;

        import mx.controls.Alert;

        import mx.controls.Text;
        import mx.graphics.codec.IImageEncoder;
        import mx.graphics.codec.PNGEncoder;

        import org.yes.cart.constants.AttributeGroupNames;
        import org.yes.cart.constants.Constants;
        import org.yes.cart.impl.SeoImageDTOImpl;
        import org.yes.cart.shopmanager.ShopManagerGlobal;

        import mx.binding.utils.BindingUtils;
        import mx.graphics.codec.JPEGEncoder;
        import mx.managers.PopUpManager;
        import mx.rpc.AsyncResponder;
        import mx.rpc.AsyncToken;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import org.yes.cart.util.DomainUtils;
        import org.yes.cart.util.FileNameUtils;

        private static const THUMB_WIDTH:uint = 480;
        private static const THUMB_HEIGHT:uint = 480;


        private var _value:String;
        private var _valueTypeName:String;
        private var _oldValue:String;
        private var _attributeCode:String;
        private var _windowTitle:String;
        private var _code:String;
        private var _attributeGroup:String;

        private var loadFileRef:FileReference;

        private var bitmapData:BitmapData;

        private var seoImage:SeoImageDTOImpl;
        private var imageBodyHasChanges:Boolean = false;
        private var _dataReadyCallbackFunction:Function;

        private function init():void {
            this.title = windowTitle;

            initialiseValidator();
        }

        private function initialiseValidator():void {
            // No validator by default as this is a specialised editor for image values only
        }

        public function get dataReadyCallbackFunction():Function {
            return _dataReadyCallbackFunction;
        }

        public function set dataReadyCallbackFunction(value:Function):void {
            _dataReadyCallbackFunction = value;
        }

        private function onSaveImageClick(evt:MouseEvent):void {
            if (imageBodyHasChanges) {
                //Save image when it really changed.
                value = storeImageOnServer(value, code, bitmapData, resolveImageStorage(attributeGroup));

            } else {
                updateImageSeoData();
            }
        }

        /**
         * Sends the image byte array to the server and returns the name for the file that was used.
         *
         * @param filename original filename
         * @param attrCode attribute code
         * @param bitmapData image data
         * @param imgPath image path
         *
         * @return file name that will be associated with this image
         */
        private function storeImageOnServer(filename:String, attrCode:String, bitmapData:BitmapData, imgPath:String):String {

            var _name:String = filename;
            var _ext:String = 'jpg';
            if (filename.lastIndexOf('.') > -1) {
                var _pos:int = filename.lastIndexOf('.');
                _name = filename.substr(0, _pos).toLowerCase();
                _ext = filename.substr(_pos + 1).toLowerCase();
            }

            var _filename:String;

            /*
                Determine correct encoder so that image has better quality and make sure the extension is correct
                for the image service on the server.
             */
            var _encoder:IImageEncoder;
            switch(_ext) {
                case 'png':
                    _encoder = new PNGEncoder();
                    _filename = _name + '.png';
                    break;
                case 'jpg':
                case 'jpeg':
                default:
                    _encoder = new JPEGEncoder();
                    _filename = _name + '.jpeg';
                    break;
            }

            var _rawBytes:ByteArray = _encoder.encode(bitmapData);

            remoteImageService.addImageToRepository(_filename, attrCode, _rawBytes, imgPath);

            return _filename;
        }

        private function updateImageSeoData():void {

            if (seoImage == null) {
                seoImage = new SeoImageDTOImpl();
            }

            seoImage.imageName = value;
            seoImage.alt = altTextInput.text;
            seoImage.title = titleTextInput.text;
            if (DomainUtils.isNewPK(seoImage.seoImageId)) {
                remoteImageService.create(seoImage);
            } else {
                remoteImageService.update(seoImage);
            }


        }

        private function onAddImageToRepositoryResult(event:ResultEvent):void {

            Debug.trace("INFO ImageDialog new attribute values is " + event.result);

            value = String(event.result);

            updateImageSeoData();

            dataReadyCallbackFunction(null);


        }

        private function resolveImageStorage(attrGroupName:String):String {
            if (AttributeGroupNames.CATEGORY == attrGroupName) {
                return Constants.CATEGORY_IMAGE_REPOSITORY_URL_PATTERN;
            } else if (AttributeGroupNames.BRAND == attrGroupName) {
                return Constants.BRAND_IMAGE_REPOSITORY_URL_PATTERN;
            } else if (AttributeGroupNames.PRODUCT == attrGroupName) {
            }
            return null;

        }

        private function onLoadImageDialogButtonClick():void {
            loadFileRef = new FileReference();
            loadFileRef.addEventListener(Event.SELECT, onImageDialogFileSelect);
            loadFileRef.browse();
        }

        private function onImageDialogFileSelect(e:Event):void {

            loadFileRef.removeEventListener(Event.SELECT, onImageDialogFileSelect);
            loadFileRef.addEventListener(Event.COMPLETE, onImageFileDialogLoadComplete);
            loadFileRef.load();
        }

        private function ensureCorrectFileName(fileName:String, skuCode:String, attributImageCode:String):String {
            if (skuCode != null && skuCode.length > 0) {

                var newFileName:String;
                if (code != null && code.length > 0) { // TO DO remove it after image service and image filter refactoring
                    newFileName = FileNameUtils.getFileNameWithoutExtension(fileName)
                            + "_"
                            + code
                            + "_"
                            + getFileNameSuffix(attributImageCode)
                            + "."
                            + FileNameUtils.getFileExtension(fileName);
                }
                return newFileName;

            }
            return fileName;
        }

        private function getFileNameSuffix(attributImageCode:String):String {
            switch (attributImageCode) {
                case "IMAGE0" :
                    return "a";
                case "IMAGE1" :
                    return "b";
                case "IMAGE2" :
                    return "c";
                case "IMAGE3" :
                    return "d";
                case "IMAGE4" :
                    return "e";
                case "IMAGE5" :
                    return "f";
            }
            return "";
        }


        private function onImageFileDialogLoadComplete(e:Event):void {
            loadFileRef.removeEventListener(Event.COMPLETE, onImageFileDialogLoadComplete);

            var loader:Loader = new Loader();
            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onDataLoadComplete);
            loader.loadBytes(loadFileRef.data);

            var modifiedName:String = ensureCorrectFileName(loadFileRef.name, code, attributeCode);
            /*if (code != null && code.length > 0) { // TO DO remove it after image service and image filter refactoring
             modifiedName = FileNameUtils.getFileNameWithoutExtension(modifiedName) + "_" + code + "_a." + FileNameUtils.getFileExtension(modifiedName);
             } */

            valueTextInput.text = modifiedName;
            _value = modifiedName; // update directly, since getter will try to reload the data from server
            loadFileRef = null;
            imageBodyHasChanges = true;

        }

        /**
         * Image loading complete, so we can show it.
         */
        private function onDataLoadComplete(e:Event):void {
            bitmapData = Bitmap(e.target.content).bitmapData;
            var matrix:Matrix = new Matrix();
            var maxImageSide:uint = Math.max(bitmapData.width, bitmapData.height);
            var scale:Number = THUMB_WIDTH / maxImageSide;
            var xOffset:Number = (THUMB_WIDTH - scale * bitmapData.width) / 2;
            var yOffset:Number = (THUMB_HEIGHT - scale * bitmapData.height) / 2;

            matrix.scale(scale, scale);
            matrix.translate(xOffset, yOffset);

            imageView.removeAllChildren();
            imageView.graphics.clear();
            imageView.graphics.beginBitmapFill(bitmapData, matrix, false);
            imageView.graphics.drawRect(xOffset, yOffset, THUMB_WIDTH - 2 * xOffset, THUMB_HEIGHT - 2 * yOffset);
            imageView.graphics.endFill();

        }


        public function get value():String {
            return _value;
        }

        public function set value(value:String):void {
            if (attributeGroup == null) {
                Alert.show(
                        resourceManager.getString('AttributesManagementPanel', 'emptyAttributeGroup'),
                        resourceManager.getString('AttributesManagementPanel', 'communicationError')
                );
            }
            imageBodyHasChanges = false;
            _value = value;
            valueTextInput.text = value;

            if (value != null && value.length > 0) {
                //get the existing image and image seo information
                remoteImageService.getImageAsByteArray(value, code, resolveImageStorage(attributeGroup));

            } else {
                //nothing to do this is a new image
                seoImage = new SeoImageDTOImpl();

            }


        }

        public function get displayValues():Object {
            return { };
        }

        public function set displayValues(value:Object):void {

        }

        public function get oldValue():String {
            return _oldValue;
        }

        public function set oldValue(value:String):void {
            _oldValue = value;
        }

        public function get windowTitle():String {
            return _windowTitle;
        }

        public function set windowTitle(value:String):void {
            _windowTitle = value;
        }

        public function getButtonSave():Button {
            return this.btnSave;
        }

        public function get code():String {
            return _code;
        }

        public function set code(value:String):void {
            _code = value;
        }

        public function get attributeGroup():String {
            return _attributeGroup;
        }

        public function set attributeGroup(value:String):void {
            _attributeGroup = value;
        }

        public function setInformation(value:String):void {
            //do nothing
        }

        protected function onRpcMethodFault(event:FaultEvent):void {
            ShopManagerGlobal.instance.defaultOnRpcMethodFault(event);
        }

        private function onGetImageAsByteArrayResult(event:ResultEvent):void {

            var ba:ByteArray = ByteArray(event.result);
            var loader:Loader = new Loader();
            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onDataLoadComplete);
            loader.loadBytes(ba);
            remoteImageService.getSeoImage(value);


        }

        private function onGetImageAsByteArrayFault(event:FaultEvent):void {

            imageView.graphics.clear();
            imageView.removeAllChildren();
            var text:Text = new Text();
            text.text = resourceManager.getString('AttributesManagementPanel', 'loadImageFailed');
            imageView.addChild(text);

        }

        private function onGetSeoImageResult(event:ResultEvent):void {

            if (event.result == null) {
                seoImage = new SeoImageDTOImpl();
            } else {
                seoImage = SeoImageDTOImpl(event.result);
            }
            titleTextInput.text = seoImage.title;
            altTextInput.text = seoImage.alt;

        }


        public function get attributeCode():String {
            return _attributeCode;
        }

        public function set attributeCode(value:String):void {
            _attributeCode = value;
        }

        public function get valueTypeName():String {
            return _valueTypeName;
        }

        public function set valueTypeName(value:String):void {
            _valueTypeName = value;
        }

        private function onCreateResult(event:ResultEvent):void {
            // do nothing
        }

        private function onUpdateResult(event:ResultEvent):void {
            // do nothing
        }
        ]]>
</mx:Script>
</mx:TitleWindow>