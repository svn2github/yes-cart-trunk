<?xml version="1.0" encoding="utf-8"?>
<!--
  - Copyright 2009 Igor Azarnyi, Denys Pavlov
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="500" height="400"
                title="@Resource(bundle='ProductTypeManagementPanel',key='productTypeAttr')"
                showCloseButton="true"
                close="PopUpManager.removePopUp(this)"
                creationComplete="init();">


    <mx:VBox>
        <mx:VBox>
            <mx:TabBar id="currencyTabBar" itemClick="currencySelected(event);"
                       dataProvider="{currencyViewStack}"/>
            <mx:HBox paddingTop="5" width="100%">
                <mx:Button label="@Resource(bundle='ProductTypeManagementPanel',key='priceNavigationAddRow')"
                           toolTip="@Resource(bundle='ProductTypeManagementPanel',key='priceNavigationAddRowHint')"
                           enabled="{addRowEnabled}"
                           click="addNewPriceRangeRow(event)"
                        />
                <mx:Button label="@Resource(bundle='ProductTypeManagementPanel',key='priceNavigationDeleteRow')"
                           toolTip="@Resource(bundle='ProductTypeManagementPanel',key='priceNavigationDeleteRowHint')"
                           enabled="{xmlNode != null}"
                           click="deleteSelectedPriceRangeRow(event)"
                        />
            </mx:HBox>
        </mx:VBox>
        <mx:ViewStack id="currencyViewStack" width="100%" height="230" backgroundColor="#777777"/>
        <mx:ControlBar horizontalAlign="right">
            <mx:Button id="closeBtn" label="@Resource(bundle='ShopManagerApplication',key='close')"
                       click="PopUpManager.removePopUp(this)" width="94"/>
            <mx:Button id="saveBtn" label="@Resource(bundle='ProductTypeManagementPanel',key='save')"
                       width="94"/>
        </mx:ControlBar>
    </mx:VBox>

    <mx:Boolean id="addCurrencyEnabled">true</mx:Boolean>
    <mx:Boolean id="addRowEnabled">true</mx:Boolean>


    <mx:Script><![CDATA[
        import com.hexagonstar.util.debug.Debug;

        import mx.containers.Canvas;
        import mx.controls.DataGrid;
        import mx.controls.Label;
        import mx.controls.TextArea;
        import mx.controls.dataGridClasses.DataGridColumn;
        import mx.core.UIComponent;
        import mx.events.DataGridEvent;
        import mx.events.DataGridEventReason;
        import mx.events.ItemClickEvent;
        import mx.events.ListEvent;
        import mx.managers.PopUpManager;

        import org.yes.cart.model.PriceRangeModel;

        [Bindable]
        private var xmlNode:XML;

        public var xmlString:String;

        private var xml:XML;
        private var gridXml:XML;


        private var currArray:Array = new Array();

        public function init():void {
            internalInit();
            currencyTabBar.selectedIndex = 0;
        }


        /**
         * Tab selected event handler.
         * @param event event
         * @return nothing
         */
        private function currencySelected(event:ItemClickEvent):void {
            xmlNode = null; // disable to delete
            addRowEnabled = !(event.label == "XML");
            if (event.label == "XML") {
                xml = new XML(getGridXml());
                TextArea(Canvas(currencyViewStack.getChildAt(event.index)).getChildAt(0)).text = xml.toXMLString();
            } else {
                var newXmlString:String = TextArea(Canvas(currencyViewStack.getChildAt(currencyViewStack.numChildren - 1)).getChildAt(0)).text; // get the edited xml back
                recreateTabs(newXmlString);
                currencyTabBar.selectedIndex = event.index;
                currencyViewStack.selectedIndex = event.index;
            }
        }

        /**
         * TODO move to utils
         * @param node
         * @return
         */
        public function deleteNode(node:XML):void {
            if (node != null && node.parent() != null) {
                delete node.parent().children()[node.childIndex()];
            }
        }

        private function deleteSelectedPriceRangeRow(event:MouseEvent):void {

            delete xml.list.range.range.(first == xmlNode.first.text() && second == xmlNode.second.text())[0];
            for each (var node:XML in xml.list.range) {
                if ("" == node.toString()) {
                    deleteNode(node);
                    break;
                }
            }
            xmlNode = null;
            recreateTabs(xml.toXMLString());
            currencyTabBar.selectedIndex = 0;
            currencyViewStack.selectedIndex = 0;
        }

        /**
         * Recreate currency and xml tabs
         * @return nothing
         */
        private function recreateTabs(newXmlString:String):void {
            xmlString = newXmlString;
            currencyViewStack.removeAllChildren();
            currencyTabBar.removeAllChildren();
            internalInit();

        }

        private function getGridXml():String {
            var newXml:String = "<rangeList serialization=\"custom\"><unserializable-parents/><list><default><size>" +
                    gridXml.children().length() +
                    "</size></default><int>" +
                    gridXml.children().length() +
                    "</int>";
            newXml += gridXml.toXMLString().replace(new RegExp("<root>", "g"), "").replace(new RegExp("</root>", "g"), "");
            newXml += "</list></rangeList>";
            return newXml;
        }

        /**
         * Get the price navigation xml string.
         * @return price navigation xml string
         */
        public function getXmlString():String {
            var idx:int = currencyTabBar.selectedIndex;
            if (PriceRangeModel(currArray[idx]).currency == "XML") {
                return TextArea(Canvas(currencyViewStack.getChildAt(idx)).getChildAt(0)).text;
            }
            return getGridXml();
        }


        /**
         * Create tab and datagrids to edit xml price navigation model.
         * @return nothing
         */
        private function internalInit():void {

            try {

                xml = new XML(xmlString);
                gridXml = new XML("<root>" + xml.list.range.toXMLString() + "</root>");
                currArray = new Array();

                currArray.push(new PriceRangeModel("Ranges", gridXml, 0));
                currArray.push(new PriceRangeModel("XML", xml, 1));
                addTabs(currArray);

            } catch (e:Error) {

                Debug.trace("ERROR RangeNavigationDialog can not convert string to xml " + e.message); //TODO alert
            }

        }


        /**
         * Add tabs to tab bar
         * @param curr
         */
        private function addTabs(currArray:Array):void {
            for each (var curr:PriceRangeModel in currArray) {
                addTab(curr);
            }
        }

        /**
         * Add new tab to tab bar
         * @param priceRangeList
         */
        private function addTab(priceRangeList:PriceRangeModel):void {

            var canvas:Canvas = new Canvas();
            canvas.label = priceRangeList.currency;
            currencyViewStack.addChild(canvas);
            var editComponent:UIComponent = getEditComponent(priceRangeList);
            canvas.addChild(editComponent);
        }


        private function getEditComponent(priceRangeList:PriceRangeModel):UIComponent {

            var result:UIComponent;
            if (priceRangeList.tag == 0) {
                var dataGrid:DataGrid = new DataGrid();
                dataGrid.editable = true;

                addDataGridColumn(dataGrid, "first", resourceManager.getString('ProductTypeManagementPanel', 'valueFrom'));
                addDataGridColumn(dataGrid, "second", resourceManager.getString('ProductTypeManagementPanel', 'valueTill'));

                dataGrid.dataProvider = priceRangeList.entry.range.range;

                dataGrid.addEventListener(DataGridEvent.ITEM_EDIT_END, onItemEditEnd);
                dataGrid.addEventListener(ListEvent.ITEM_CLICK, onXmlNodeSelected);


                result = dataGrid;
            } else if (priceRangeList.tag == 1) {
                var textArea:TextArea = new TextArea();
                textArea.text = priceRangeList.entry.toXMLString();
                result = textArea;
            } else {
                result = new Label();
            }

            result.width = this.width - 2;
            result.height = currencyViewStack.height;

            return result;


        }

        private function onXmlNodeSelected(event:ListEvent):void {
            xmlNode = event.currentTarget.selectedItem;
        }

        protected function onItemEditEnd(event:DataGridEvent):void {
            if (event.reason == DataGridEventReason.CANCELLED) {
                return; // Do not update cell.
            }
            var obj:Object = DataGrid(event.target).dataProvider[event.rowIndex];
        }


        private function addDataGridColumn(dataGrid:DataGrid, dataField:String, headerText:String):void {
            var dgc:DataGridColumn = new DataGridColumn(dataField);
            dgc.editable = true;
            dgc.sortable = false;
            dgc.headerText = headerText;

            var cols:Array = dataGrid.columns;
            cols.push(dgc);
            dataGrid.columns = cols;
        }


        /**
         * Add new empty price navigation row.
         * @param event
         * @return nothing
         */
        private function addNewPriceRangeRow(event:MouseEvent):void {
            var x:XMLList = xml.list;
            x.appendChild(
                    new XML(
                            "<range><range><first class=\"string\"></first><second class=\"string\"></second></range></range>"
                    )
            );
            recreateTabs(xml.toXMLString());

            currencyTabBar.selectedIndex = 0;
            currencyViewStack.selectedIndex = 0;

        }
        ]]>
    </mx:Script>

</mx:TitleWindow>
