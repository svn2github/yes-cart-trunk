<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
           width="100%"
           height="100%"
           creationComplete="init();">
    <mx:Script>
		<![CDATA[
        import mx.core.FlexGlobals;

        import org.yes.cart.impl.CountryDTOImpl;
        import org.yes.cart.impl.StateDTOImpl;
        import org.yes.cart.util.CloneUtil;

        import org.yes.cart.shopmanager.ShopManagerGlobal;

        import mx.controls.Alert;
        import mx.events.CloseEvent;
        import mx.events.ListEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.AsyncResponder;
        import mx.rpc.events.ResultEvent;

        private var countryCreateEditDialog:CountryCreateEditDialog;

        private var stateCreateEditDialog:StateCreateEditDialog;

        public function init():void {
            remoteCountryService.getAll();
        }

        /**
         * Country selected event handler.
         * @param event
         * @return nothing
         */
        private function handleCoutrySelectedClick(event:ListEvent):void {
            this.countrySelected = this.countryGrid.selectedItem != null;
            if (this.countrySelected) {
                countrySelectedAndHasNoStates = false;
                stateSelected = false;
                remoteStateService.findByCountry(this.countryGrid.selectedItem.countryCode).addResponder(
                        new AsyncResponder(
                                function (event:*, obj:Object = null):void {
                                    countrySelectedAndHasNoStates = remoteStateService.findByCountry.lastResult.length == 0;
                                },
                                ShopManagerGlobal.instance.defaultFaultHandler
                        )
                );
            }
        }


        /**
         * Delete country click handler.
         * @param event event
         * @return nothing
         */
        private function deleteCountryClickHandler(event:flash.events.MouseEvent):void {
            if (this.countrySelected && this.countryGrid.selectedItem != null) {
                Alert.show(
                        resourceManager.getString('LocationManagementPanel', 'deleteCountryConfirm', [ this.countryGrid.selectedItem.countryCode ]),
                        resourceManager.getString('LocationManagementPanel', 'warning'),
                        Alert.OK | Alert.CANCEL, this, deleteCountry, null, Alert.OK);
            }
        }

        /**
         * Perform country delete operation.
         * @param event close event
         * @return nothing
         */
        private function deleteCountry(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                if (this.countrySelected && this.countryGrid.selectedItem != null) {
                    var countryId:Object = this.countryGrid.selectedItem.countryId;
                    remoteCountryService.remove(countryId).addResponder(
                            new AsyncResponder(
                                    function (event:*, obj:Object = null):void {
                                        countrySelected = false;
                                        countrySelectedAndHasNoStates = false;
                                        stateSelected = false;
                                        remoteCountryService.getAll();
                                    },
                                    ShopManagerGlobal.instance.defaultFaultHandler
                            )
                    );
                }
                this.countrySelected = false;
                this.countrySelectedAndHasNoStates = false;
                this.stateSelected = false;
            }
        }


        /**
         * Edit country click handler.
         * @param event event
         * @return nothing
         */
        private function editCountryClickHandler(event:flash.events.MouseEvent):void {
            if (this.countrySelected && this.countryGrid.selectedItem != null) {
                countryCreateEditDialog = CountryCreateEditDialog(
                        PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), CountryCreateEditDialog, true));
                countryCreateEditDialog.newCountryFlag = false;
                countryCreateEditDialog.countryDTOImpl = CountryDTOImpl(CloneUtil.clone(this.countryGrid.selectedItem));
                countryCreateEditDialog.saveBtn.addEventListener("click", updateCountry);
                PopUpManager.centerPopUp(countryCreateEditDialog);
            }
        }


        /**
         * Perform update country action
         * @param event event
         * @return nothing
         */
        private function updateCountry(event:Event):void {
            remoteCountryService.update(countryCreateEditDialog.countryDTOImpl).addResponder(
                    new AsyncResponder(
                            function (event:*, obj:Object = null):void {
                                remoteCountryService.getAll().addResponder(
                                        new AsyncResponder(
                                                function (event2:*, obj2:Object = null):void {
                                                    countrySelected = false;
                                                    countrySelectedAndHasNoStates = false;
                                                    stateSelected = false;
                                                }
                                                ,
                                                ShopManagerGlobal.instance.defaultFaultHandler
                                        )
                                );

                            },
                            ShopManagerGlobal.instance.defaultFaultHandler)
            );
            PopUpManager.removePopUp(countryCreateEditDialog);
            countryCreateEditDialog = null;
        }


        /**
         * New country click handler.
         * @param event event
         * @return nothing
         */
        private function newCountryClickHandler(event:flash.events.MouseEvent):void {
            countryCreateEditDialog = CountryCreateEditDialog(
                    PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), CountryCreateEditDialog, true));
            countryCreateEditDialog.newCountryFlag = true;
            countryCreateEditDialog.countryDTOImpl = new CountryDTOImpl();
            countryCreateEditDialog.saveBtn.addEventListener("click", saveCountry);
            PopUpManager.centerPopUp(countryCreateEditDialog);
        }

        /**
         * Perform create new country action
         * @param event event
         * @return nothing
         */
        private function saveCountry(event:Event):void {
            remoteCountryService.create(countryCreateEditDialog.countryDTOImpl).addResponder(
                    new AsyncResponder(
                            function (event:*, obj:Object = null):void {
                                countrySelected = false;
                                countrySelectedAndHasNoStates = false;
                                stateSelected = false;
                                remoteCountryService.getAll();
                            },
                            ShopManagerGlobal.instance.defaultFaultHandler)
            );
            PopUpManager.removePopUp(countryCreateEditDialog);
            countryCreateEditDialog = null;
        }


        /**
         * New state click handler.
         * @param event event
         * @return nothing
         */
        private function newStateClickHandler(event:flash.events.MouseEvent):void {
            if (this.countrySelected && this.countryGrid.selectedItem != null) {
                var parent:DisplayObject = this;
                remoteStateService.getNew().addResponder(
                        new AsyncResponder(
                                function (event:ResultEvent, obj:Object = null):void {

                                    var countryCode:String = countryGrid.selectedItem.countryCode;

                                    stateCreateEditDialog = StateCreateEditDialog(PopUpManager.createPopUp(parent, StateCreateEditDialog, true));
                                    stateCreateEditDialog.newStateFlag = true;

                                    stateCreateEditDialog.stateDTOImpl = StateDTOImpl(event.result);
                                    stateCreateEditDialog.stateDTOImpl.countryCode = countryCode;
                                    stateCreateEditDialog.saveBtn.addEventListener("click", saveState);
                                    PopUpManager.centerPopUp(stateCreateEditDialog);
                                }
                                ,
                                ShopManagerGlobal.instance.defaultFaultHandler)
                );
            }
        }


        /**
         * New state click handler.
         * @param event event
         * @return nothing
         */
        private function editStateClickHandler(event:flash.events.MouseEvent):void {
            if (this.stateSelected && this.stateGrid.selectedItem != null) {
                stateCreateEditDialog = StateCreateEditDialog(
                        PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), StateCreateEditDialog, true));
                stateCreateEditDialog.newStateFlag = false;
                stateCreateEditDialog.stateDTOImpl = StateDTOImpl(CloneUtil.clone(this.stateGrid.selectedItem));
                stateCreateEditDialog.saveBtn.addEventListener("click", updateState);
                PopUpManager.centerPopUp(stateCreateEditDialog);
            }
        }


        /**
         * Perform create new state or area or county or province action
         * @param event event
         * @return nothing
         */
        private function saveState(event:Event):void {
            var stateDTOImpl:StateDTOImpl = stateCreateEditDialog.stateDTOImpl;
            remoteStateService.create(stateDTOImpl).addResponder(
                    new AsyncResponder(
                            function (event:*, obj:Object = null):void {
                                stateSelected = false;
                                remoteStateService.findByCountry(stateDTOImpl.countryCode).addResponder(
                                        new AsyncResponder(
                                                function (event:*, obj:Object = null):void {
                                                    countrySelectedAndHasNoStates = remoteStateService.findByCountry.lastResult.length == 0;
                                                },
                                                ShopManagerGlobal.instance.defaultFaultHandler
                                        )
                                );
                            },
                            ShopManagerGlobal.instance.defaultFaultHandler)
            );
            PopUpManager.removePopUp(stateCreateEditDialog);
            stateCreateEditDialog = null;
        }


        /**
         * Perform create new state or area or county or province action
         * @param event event
         * @return nothing
         */
        private function updateState(event:Event):void {
            var stateDTOImpl:StateDTOImpl = stateCreateEditDialog.stateDTOImpl;
            remoteStateService.update(stateDTOImpl).addResponder(
                    new AsyncResponder(
                            function (event:*, obj:Object = null):void {
                                remoteStateService.findByCountry(stateDTOImpl.countryCode).addResponder(
                                        new AsyncResponder(
                                                function (event:*, obj:Object = null):void {
                                                    stateSelected = false;
                                                },
                                                ShopManagerGlobal.instance.defaultFaultHandler
                                        )
                                );

                            },
                            ShopManagerGlobal.instance.defaultFaultHandler
                    )
            );
            PopUpManager.removePopUp(stateCreateEditDialog);
            stateCreateEditDialog = null;
        }


        /**
         * Delete state click handler.
         * @param event event
         * @return nothing
         */
        private function deleteStateClickHandler(event:flash.events.MouseEvent):void {
            Alert.show(
                    resourceManager.getString('LocationManagementPanel', 'deleteStateConfirm'),
                    resourceManager.getString('LocationManagementPanel', 'warning'),
                    Alert.OK | Alert.CANCEL, this, deleteState, null, Alert.OK);
        }

        /**
         * Perform state delete operation.
         * @param event close event
         * @return nothing
         */
        private function deleteState(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                if (this.stateSelected && this.stateGrid.selectedItem != null) {
                    remoteStateService.remove(this.stateGrid.selectedItem.stateId).addResponder(
                            new AsyncResponder(
                                    function (event:*, obj:Object = null):void {
                                        stateSelected = false;
                                        remoteStateService.findByCountry(stateGrid.selectedItem.countryCode).addResponder(
                                                new AsyncResponder(
                                                        function (event:*, obj:Object = null):void {
                                                            stateSelected = false;
                                                        },
                                                        ShopManagerGlobal.instance.defaultFaultHandler
                                                )
                                        );
                                    },
                                    ShopManagerGlobal.instance.defaultFaultHandler
                            )
                    );
                }
                stateSelected = false;
            }
        }


        /**
         * State selected event handler.
         * @param event
         * @return nothing
         */
        private function handleStateSelectedClick(event:ListEvent):void {
            this.stateSelected = this.stateGrid.selectedItem != null;
        }
        ]]>
    </mx:Script>

    <mx:RemoteObject showBusyCursor="true" id="remoteCountryService"
                     destination="remoteCountryService"
                     result="ShopManagerGlobal.instance.defaultResultHandler(event)"
                     fault="ShopManagerGlobal.instance.defaultFaultHandler(event)"
                     channelSet="{ShopManagerGlobal.instance.channelSet}"/>

    <mx:RemoteObject showBusyCursor="true" id="remoteStateService"
                     destination="remoteStateService"
                     result="ShopManagerGlobal.instance.defaultResultHandler(event)"
                     fault="ShopManagerGlobal.instance.defaultFaultHandler(event)"
                     channelSet="{ShopManagerGlobal.instance.channelSet}"/>

    <mx:Boolean id="countrySelected">false</mx:Boolean>
    <mx:Boolean id="countrySelectedAndHasNoStates">false</mx:Boolean>
    <mx:Boolean id="stateSelected">false</mx:Boolean>

    <mx:VDividedBox height="100%" width="100%">
        <mx:Panel width="100%" title="@Resource(bundle='LocationManagementPanel',key='countries')"
                  paddingLeft="2" paddingRight="2" paddingBottom="5">
            <mx:HBox paddingTop="5" width="100%">
                <mx:Button label="@Resource(bundle='LocationManagementPanel',key='newCountry')"
                           toolTip="@Resource(bundle='LocationManagementPanel',key='newCountryHint')"
                           click="newCountryClickHandler(event)"
                        />
                <mx:Button label="@Resource(bundle='LocationManagementPanel',key='editCountry')"
                           toolTip="@Resource(bundle='LocationManagementPanel',key='editCountryHint')"
                           enabled="{countrySelected}"
                           click="editCountryClickHandler(event)"
                        />
                <mx:Button label="@Resource(bundle='LocationManagementPanel',key='deleteCountry')"
                           toolTip="@Resource(bundle='LocationManagementPanel',key='deleteCountryHint')"
                           enabled="{countrySelectedAndHasNoStates}"
                           click="deleteCountryClickHandler(event)"
                        />

            </mx:HBox>
            <mx:DataGrid id="countryGrid"
                         dataProvider="{remoteCountryService.getAll.lastResult}"
                         itemClick="handleCoutrySelectedClick(event)"
                         width="100%" height="100%">
                <mx:columns>
                    <mx:DataGridColumn width="80"
                                       headerText="@Resource(bundle='LocationManagementPanel',key='countryId')"
                                       dataField="countryId"/>
                    <mx:DataGridColumn width="100"
                                       headerText="@Resource(bundle='LocationManagementPanel',key='countryCode')"
                                       dataField="countryCode"/>
                    <mx:DataGridColumn width="100"
                                       headerText="@Resource(bundle='LocationManagementPanel',key='isoCode')"
                                       dataField="isoCode"/>
                    <mx:DataGridColumn
                            headerText="@Resource(bundle='LocationManagementPanel',key='name')"
                            dataField="name"/>
                </mx:columns>
                <!--countries dg-->
            </mx:DataGrid>
        </mx:Panel>

        <mx:Panel width="100%" visible="{countrySelected}" layout="vertical"
                  title="@Resource(bundle='LocationManagementPanel',key='states')"
                  paddingLeft="2" paddingRight="2" paddingBottom="5">
            <mx:HBox paddingTop="5" width="100%">
                <mx:Button label="@Resource(bundle='LocationManagementPanel',key='newState')"
                           toolTip="@Resource(bundle='LocationManagementPanel',key='newStateHint')"
                           enabled="{countrySelected}"
                           click="newStateClickHandler(event)"
                        />
                <mx:Button label="@Resource(bundle='LocationManagementPanel',key='editState')"
                           toolTip="@Resource(bundle='LocationManagementPanel',key='editStateHint')"
                           enabled="{stateSelected}"
                           click="editStateClickHandler(event)"
                        />
                <mx:Button label="@Resource(bundle='LocationManagementPanel',key='deleteState')"
                           toolTip="@Resource(bundle='LocationManagementPanel',key='deleteStateHint')"
                           enabled="{stateSelected}"
                           click="deleteStateClickHandler(event)"
                        />

            </mx:HBox>
            <mx:DataGrid id="stateGrid"
                         dataProvider="{remoteStateService.findByCountry.lastResult}"
                         itemClick="handleStateSelectedClick(event)"
                         width="100%" height="100%">
                <mx:columns>
                    <mx:DataGridColumn width="80"
                                       headerText="@Resource(bundle='LocationManagementPanel',key='stateId')"
                                       dataField="stateId"/>

                    <mx:DataGridColumn width="80"
                                       headerText="@Resource(bundle='LocationManagementPanel',key='stateCode')"
                                       dataField="stateCode"/>

                    <mx:DataGridColumn
                            headerText="@Resource(bundle='LocationManagementPanel',key='stateName')"
                            dataField="name"/>

                </mx:columns>
            </mx:DataGrid>
        </mx:Panel>

    </mx:VDividedBox>

</mx:VBox>
