<?xml version="1.0" ?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
           width="100%"
           height="100%"
           creationComplete="init();"
           paddingLeft="2" paddingRight="2" paddingBottom="5">
    <mx:Script>
		<![CDATA[
        import mx.controls.Alert;
        import mx.core.FlexGlobals;
        import mx.events.CloseEvent;
        import mx.events.ListEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.AsyncResponder;
        import mx.rpc.events.ResultEvent;

        import org.yes.cart.impl.CountryDTOImpl;
        import org.yes.cart.impl.StateDTOImpl;
        import org.yes.cart.shopmanager.ShopManagerGlobal;
        import org.yes.cart.util.CloneUtil;

        private var countryCreateEditDialog:CountryCreateEditDialog;

        private var stateCreateEditDialog:StateCreateEditDialog;

        public function init():void {
            remoteCountryService.getAll();
        }

        /**
         * Country selected event handler.
         * @param event
         * @return nothing
         */
        private function handleCountrySelectedClick(event:ListEvent):void {
            this.countrySelected = this.countryGrid.selectedItem != null;
            if (this.countrySelected) {
                countrySelectedAndHasNoStates = false;
                stateSelected = false;
                remoteStateService.findByCountry(this.countryGrid.selectedItem.countryCode);
            }
        }


        /**
         * Delete country click handler.
         * @param event event
         * @return nothing
         */
        private function deleteCountryClickHandler(event:MouseEvent):void {
            if (this.countrySelected && this.countryGrid.selectedItem != null) {
                Alert.show(
                        resourceManager.getString('LocationManagementPanel', 'deleteCountryConfirm', [ this.countryGrid.selectedItem.countryCode ]),
                        resourceManager.getString('LocationManagementPanel', 'warning'),
                        Alert.OK | Alert.CANCEL, this, onDeleteCountryConfirm, null, Alert.OK);
            }
        }

        /**
         * Perform country delete operation.
         * @param event close event
         * @return nothing
         */
        private function onDeleteCountryConfirm(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                if (this.countrySelected && this.countryGrid.selectedItem != null) {
                    var countryId:Object = this.countryGrid.selectedItem.countryId;
                    remoteCountryService.remove(countryId);
                }
                this.countrySelected = false;
                this.countrySelectedAndHasNoStates = false;
                this.stateSelected = false;
            }
        }


        /**
         * Edit country click handler.
         * @param event event
         * @return nothing
         */
        private function editCountryClickHandler(event:Event):void {
            if (this.countrySelected && this.countryGrid.selectedItem != null) {
                countryCreateEditDialog = CountryCreateEditDialog(
                        PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), CountryCreateEditDialog, true));
                countryCreateEditDialog.newCountryFlag = false;
                countryCreateEditDialog.countryDTOImpl = CountryDTOImpl(CloneUtil.clone(this.countryGrid.selectedItem));
                countryCreateEditDialog.saveBtn.addEventListener("click", onUpdateCountryClick);
                PopUpManager.centerPopUp(countryCreateEditDialog);
            }
        }


        /**
         * Perform update country action
         * @param event event
         * @return nothing
         */
        private function onUpdateCountryClick(event:Event):void {
            remoteCountryService.update(countryCreateEditDialog.countryDTOImpl);
        }


        /**
         * New country click handler.
         * @param event event
         * @return nothing
         */
        private function newCountryClickHandler(event:MouseEvent):void {
            countryCreateEditDialog = CountryCreateEditDialog(
                    PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), CountryCreateEditDialog, true));
            countryCreateEditDialog.newCountryFlag = true;
            countryCreateEditDialog.countryDTOImpl = new CountryDTOImpl();
            countryCreateEditDialog.saveBtn.addEventListener("click", onSaveCountryClick);
            PopUpManager.centerPopUp(countryCreateEditDialog);
        }

        /**
         * Perform create new country action
         * @param event event
         * @return nothing
         */
        private function onSaveCountryClick(event:Event):void {
            remoteCountryService.create(countryCreateEditDialog.countryDTOImpl);
        }


        /**
         * New state click handler.
         * @param event event
         * @return nothing
         */
        private function newStateClickHandler(event:MouseEvent):void {
            if (this.countrySelected && this.countryGrid.selectedItem != null) {

                var state:StateDTOImpl = new StateDTOImpl();
                var countryCode:String = countryGrid.selectedItem.countryCode;
                state.countryCode = countryCode;
                stateCreateEditDialog = StateCreateEditDialog(PopUpManager.createPopUp(parent, StateCreateEditDialog, true));
                stateCreateEditDialog.newStateFlag = true;

                stateCreateEditDialog.stateDTOImpl = state;
                stateCreateEditDialog.saveBtn.addEventListener("click", onSaveStateClick);
                PopUpManager.centerPopUp(stateCreateEditDialog);
            }
        }


        /**
         * New state click handler.
         * @param event event
         * @return nothing
         */
        private function editStateClickHandler(event:Event):void {
            if (this.stateSelected && this.stateGrid.selectedItem != null) {
                stateCreateEditDialog = StateCreateEditDialog(
                        PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), StateCreateEditDialog, true));
                stateCreateEditDialog.newStateFlag = false;
                stateCreateEditDialog.stateDTOImpl = StateDTOImpl(CloneUtil.clone(this.stateGrid.selectedItem));
                stateCreateEditDialog.saveBtn.addEventListener("click", onUpdateStateClick);
                PopUpManager.centerPopUp(stateCreateEditDialog);
            }
        }


        /**
         * Perform create new state or area or county or province action
         * @param event event
         * @return nothing
         */
        private function onSaveStateClick(event:Event):void {
            var stateDTOImpl:StateDTOImpl = stateCreateEditDialog.stateDTOImpl;
            remoteStateService.create(stateDTOImpl);
        }


        /**
         * Perform create new state or area or county or province action
         * @param event event
         * @return nothing
         */
        private function onUpdateStateClick(event:Event):void {
            var stateDTOImpl:StateDTOImpl = stateCreateEditDialog.stateDTOImpl;
            remoteStateService.update(stateDTOImpl);
        }


        /**
         * Delete state click handler.
         * @param event event
         * @return nothing
         */
        private function deleteStateClickHandler(event:MouseEvent):void {
            if (this.stateSelected && this.stateGrid.selectedItem != null) {
                Alert.show(
                        resourceManager.getString('LocationManagementPanel', 'deleteStateConfirm', [ this.stateGrid.selectedItem.stateCode ]),
                        resourceManager.getString('LocationManagementPanel', 'warning'),
                        Alert.OK | Alert.CANCEL, this, onDeleteStateConfirm, null, Alert.OK);
            }
        }

        /**
         * Perform state delete operation.
         * @param event close event
         * @return nothing
         */
        private function onDeleteStateConfirm(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                if (this.stateSelected && this.stateGrid.selectedItem != null) {
                    remoteStateService.remove(this.stateGrid.selectedItem.stateId);
                }
                stateSelected = false;
            }
        }


        /**
         * State selected event handler.
         * @param event
         * @return nothing
         */
        private function handleStateSelectedClick(event:ListEvent):void {
            this.stateSelected = this.stateGrid.selectedItem != null;
        }

        private function onGetAllCountriesResult(event:ResultEvent):void {
            countrySelected = false;
            countrySelectedAndHasNoStates = false;
            stateSelected = false;
            this.countryGrid.dataProvider = event.result;
        }

        private function onFindByCountryResult(event:ResultEvent):void {
            this.stateGrid.dataProvider = event.result;
            stateSelected = false;
            countrySelectedAndHasNoStates = countrySelected && this.stateGrid.dataProvider.length == 0;
        }

        private function onRemoveCountryResult(event:ResultEvent):void {
            countrySelected = false;
            countrySelectedAndHasNoStates = false;
            stateSelected = false;
            remoteCountryService.getAll();
        }

        private function onUpdateCountryResult(event:ResultEvent):void {

            if (countryCreateEditDialog != null) {
                PopUpManager.removePopUp(countryCreateEditDialog);
            }
            countryCreateEditDialog = null;
            countrySelected = false;
            countrySelectedAndHasNoStates = false;
            stateSelected = false;
            remoteCountryService.getAll();
        }

        private function onCreateCountryResult(event:ResultEvent):void {

            if (countryCreateEditDialog != null) {
                PopUpManager.removePopUp(countryCreateEditDialog);
            }
            countryCreateEditDialog = null;
            countrySelected = false;
            countrySelectedAndHasNoStates = false;
            stateSelected = false;
            remoteCountryService.getAll();

        }

        private function onUpdateStateResult(event:ResultEvent):void {

            if (stateCreateEditDialog != null) {
                PopUpManager.removePopUp(stateCreateEditDialog);
            }
            stateCreateEditDialog = null;
            stateSelected = false;
            if (countrySelected && this.countryGrid.selectedItem != null) {
                remoteStateService.findByCountry(this.countryGrid.selectedItem.countryCode);
            }

        }

        private function onCreateStateResult(event:ResultEvent):void {

            if (stateCreateEditDialog != null) {
                PopUpManager.removePopUp(stateCreateEditDialog);
            }
            stateCreateEditDialog = null;
            stateSelected = false;
            if (countrySelected && this.countryGrid.selectedItem != null) {
                remoteStateService.findByCountry(this.countryGrid.selectedItem.countryCode);
            }

        }

        private function onRemoveStateResult(event:ResultEvent):void {

            stateCreateEditDialog = null;
            stateSelected = false;
            if (countrySelected && this.countryGrid.selectedItem != null) {
                remoteStateService.findByCountry(this.countryGrid.selectedItem.countryCode);
            }

        }
        ]]>
    </mx:Script>

    <mx:RemoteObject showBusyCursor="true" id="remoteCountryService"
                     destination="remoteCountryService"
                     result="ShopManagerGlobal.instance.defaultResultHandler(event)"
                     fault="ShopManagerGlobal.instance.defaultFaultHandler(event)"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">
    
        <mx:method id="getAllCountries" name="getAll"
                   result="onGetAllCountriesResult(event)"/>
        <mx:method id="removeCountry" name="remove"
                   result="onRemoveCountryResult(event)"/>
        <mx:method id="updateCountry" name="update"
                   result="onUpdateCountryResult(event)"/>
        <mx:method id="createCountry" name="create"
                   result="onCreateCountryResult(event)"/>
        
    </mx:RemoteObject>

    <mx:RemoteObject showBusyCursor="true" id="remoteStateService"
                     destination="remoteStateService"
                     result="ShopManagerGlobal.instance.defaultResultHandler(event)"
                     fault="ShopManagerGlobal.instance.defaultFaultHandler(event)"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">
            
        <mx:method id="findByCountry" name="findByCountry"
                   result="onFindByCountryResult(event)"/>
        <mx:method id="removeState" name="remove"
                   result="onRemoveStateResult(event)"/>
        <mx:method id="updateState" name="update"
                   result="onUpdateStateResult(event)"/>
        <mx:method id="createState" name="create"
                   result="onCreateStateResult(event)"/>

    </mx:RemoteObject>

    <mx:Boolean id="countrySelected">false</mx:Boolean>
    <mx:Boolean id="countrySelectedAndHasNoStates">false</mx:Boolean>
    <mx:Boolean id="stateSelected">false</mx:Boolean>

    <mx:VDividedBox height="100%" width="100%">
        <mx:Panel width="100%" title="@Resource(bundle='LocationManagementPanel',key='countries')"
                  paddingLeft="2" paddingRight="2" paddingBottom="5">
            <mx:HBox paddingTop="5" width="100%">
                <mx:Button label="@Resource(bundle='LocationManagementPanel',key='newCountry')"
                           toolTip="@Resource(bundle='LocationManagementPanel',key='newCountryHint')"
                           click="newCountryClickHandler(event)"
                        />
                <mx:Button label="@Resource(bundle='LocationManagementPanel',key='editCountry')"
                           toolTip="@Resource(bundle='LocationManagementPanel',key='editCountryHint')"
                           enabled="{countrySelected}"
                           click="editCountryClickHandler(event)"
                        />
                <mx:Button label="@Resource(bundle='LocationManagementPanel',key='deleteCountry')"
                           toolTip="@Resource(bundle='LocationManagementPanel',key='deleteCountryHint')"
                           enabled="{countrySelectedAndHasNoStates}"
                           click="deleteCountryClickHandler(event)"
                        />

            </mx:HBox>
            <mx:DataGrid id="countryGrid"
                         doubleClickEnabled="true"
                         itemDoubleClick="editCountryClickHandler(event)"
                         itemClick="handleCountrySelectedClick(event)"
                         width="100%" height="100%">
                <mx:columns>
                    <mx:DataGridColumn width="80"
                                       headerText="@Resource(bundle='LocationManagementPanel',key='countryId')"
                                       dataField="countryId"/>
                    <mx:DataGridColumn width="100"
                                       headerText="@Resource(bundle='LocationManagementPanel',key='countryCode')"
                                       dataField="countryCode"/>
                    <mx:DataGridColumn width="100"
                                       headerText="@Resource(bundle='LocationManagementPanel',key='isoCode')"
                                       dataField="isoCode"/>
                    <mx:DataGridColumn
                            headerText="@Resource(bundle='LocationManagementPanel',key='name')"
                            dataField="name"/>
                </mx:columns>
                <!--countries dg-->
            </mx:DataGrid>
        </mx:Panel>

        <mx:Panel width="100%" visible="{countrySelected}" layout="vertical"
                  title="@Resource(bundle='LocationManagementPanel',key='states')"
                  paddingLeft="2" paddingRight="2" paddingBottom="5">
            <mx:HBox paddingTop="5" width="100%">
                <mx:Button label="@Resource(bundle='LocationManagementPanel',key='newState')"
                           toolTip="@Resource(bundle='LocationManagementPanel',key='newStateHint')"
                           enabled="{countrySelected}"
                           click="newStateClickHandler(event)"
                        />
                <mx:Button label="@Resource(bundle='LocationManagementPanel',key='editState')"
                           toolTip="@Resource(bundle='LocationManagementPanel',key='editStateHint')"
                           enabled="{stateSelected}"
                           click="editStateClickHandler(event)"
                        />
                <mx:Button label="@Resource(bundle='LocationManagementPanel',key='deleteState')"
                           toolTip="@Resource(bundle='LocationManagementPanel',key='deleteStateHint')"
                           enabled="{stateSelected}"
                           click="deleteStateClickHandler(event)"
                        />

            </mx:HBox>
            <mx:DataGrid id="stateGrid"
                         doubleClickEnabled="true"
                         itemDoubleClick="editStateClickHandler(event)"
                         itemClick="handleStateSelectedClick(event)"
                         width="100%" height="100%">
                <mx:columns>
                    <mx:DataGridColumn width="80"
                                       headerText="@Resource(bundle='LocationManagementPanel',key='stateId')"
                                       dataField="stateId"/>

                    <mx:DataGridColumn width="80"
                                       headerText="@Resource(bundle='LocationManagementPanel',key='stateCode')"
                                       dataField="stateCode"/>

                    <mx:DataGridColumn
                            headerText="@Resource(bundle='LocationManagementPanel',key='stateName')"
                            dataField="name"/>

                </mx:columns>
            </mx:DataGrid>
        </mx:Panel>

    </mx:VDividedBox>

</mx:VBox>
