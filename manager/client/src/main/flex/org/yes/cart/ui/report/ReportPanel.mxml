<?xml version="1.0" encoding="utf-8"?>
<!--
  - Copyright 2009 Igor Azarnyi, Denys Pavlov
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:core="mx.core.*" width="100%" height="100%"
          title="@Resource(bundle='ReportPanel',key='reports')"
          paddingLeft="2" paddingTop="2" paddingRight="2" paddingBottom="2"
          creationComplete="init();">

    <mx:Script>
        <![CDATA[
        import com.georg.DateTimeField;
        import com.hexagonstar.util.debug.Debug;

        import mx.collections.ArrayList;
        import mx.containers.FormItem;

        import mx.controls.Alert;
        import mx.controls.DateField;
        import mx.controls.TextInput;
        import mx.core.UIComponent;
        import mx.events.CloseEvent;
        import mx.events.ValidationResultEvent;
        import mx.rpc.AsyncResponder;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;
        import mx.validators.DateValidator;
        import mx.validators.NumberValidator;
        import mx.validators.StringValidator;
        import mx.validators.Validator;

        import org.yes.cart.report.impl.ReportDescriptor;
        import org.yes.cart.report.impl.ReportParameter;
        import org.yes.cart.shopmanager.ShopManagerGlobal;

        import spark.components.Label;

        [Bindable]
        private var pdf:ByteArray;
        private var validationArray:Array = new Array();
        private var paramsArray:Array = new Array();

        private var reportName:String;

        private function init():void {
            localeFilter = resourceManager.getString('Common', 'localeFilter');
            remoteReportService.getReportDescriptors();
        }


        /**
         * Get report display name, which depends from current locale.
         * @param item report descriptor.
         * @return report display name.
         */
        private function getReportLabel(itm:Object):String {
            var reportDescriptor:ReportDescriptor = itm as ReportDescriptor;
            var rez:String = reportDescriptor.reportId;
            var label:String = resourceManager.getString('ReportPanel', rez);
            if (label == null) {
                return rez;
            }
            return label;
        }

        /**
         * Fill parameter form with new parameters to get user input for selected report.
         * @param event
         */
        private function onReportComboboxChange(event:Event):void {
            var reportDescriptor:ReportDescriptor = ReportDescriptor(reportComboBox.selectedItem);
            parameterForm.removeAllChildren();
            validationArray = [];
            paramsArray = [];
            pdf = null;
            Debug.trace("DEBUG Report has " + reportDescriptor.parameters.length + " parameters");
            try {
                for (var i:int = 0; i < reportDescriptor.parameters.length; i++) {
                    var repoParam:ReportParameter = ReportParameter(reportDescriptor.parameters.getItemAt(i));
                    var formItem:FormItem = new FormItem();
                    var paramId:String = repoParam.parameterId;
                    var label:String = resourceManager.getString('ReportPanel', paramId);
                    if (label == null) {
                        formItem.label = paramId + (repoParam.mandatory ? ' *' : '');
                    } else {
                        formItem.label = label + (repoParam.mandatory ? ' *' : '');
                    }
                    if (repoParam.businesstype.indexOf('org.yes.cart') > -1) {
                        var cbmBox:ComboBox = new ComboBox();
                        cbmBox.prompt = resourceManager.getString('ReportPanel', 'selectDataPrompt');
                        cbmBox.labelField = "label";
                        remoteReportService.getParameterValues(localeFilter, reportDescriptor.reportId, repoParam.parameterId, null).addResponder(
                                new AsyncResponder(
                                        function (event:ResultEvent, obj:Object = null):void {
                                            cbmBox.dataProvider = event.result;
                                        }
                                        ,
                                        function (event:FaultEvent):void {
                                            ShopManagerGlobal.instance.defaultOnRpcMethodFault(event);
                                        }
                                )
                        );
                        if (repoParam.mandatory) {
                            var numberValidator:NumberValidator = new NumberValidator();
                            numberValidator.source = cbmBox;
                            numberValidator.property = "selectedIndex";
                            numberValidator.minValue = 0; // -1 means no selection
                            numberValidator.lowerThanMinError = resourceManager.getString('ReportPanel', 'cmbSelectValue');
                            validationArray.push(numberValidator);
                        }
                        formItem.addChild(cbmBox);
                        paramsArray.push({
                            'param': repoParam,
                            'control': cbmBox
                        });
                    } else if (repoParam.businesstype == "Date") {
                        var dtf:DateTimeField = new DateTimeField();
                        if (repoParam.mandatory) {
                            var dataValidator:DateValidator = new DateValidator();
                            dataValidator.source = dtf;
                            dataValidator.property = "selectedDate";
                            dataValidator.required = true;
                            validationArray.push(dataValidator);
                        }
                        formItem.addChild(dtf);
                        paramsArray.push({
                            'param': repoParam,
                            'control': dtf
                        });
                    } else {
                        var textInput:TextInput = new TextInput();
                        if (repoParam.mandatory) {
                            var stringValidator:StringValidator = new StringValidator();
                            stringValidator.source = textInput;
                            stringValidator.property = "text";
                            stringValidator.required = true;
                            stringValidator.minLength = 1;
                            validationArray.push(stringValidator);
                        }
                        formItem.addChild(textInput);
                        paramsArray.push({
                            'param': repoParam,
                            'control': textInput
                        });
                    }

                    parameterForm.addChild(formItem);

                }
                if (validationArray.length > 0) {
                    var mandatoryLabelItem:FormItem = new FormItem();
                    var mandatoryLabel:Label = new Label();
                    mandatoryLabel.text = resourceManager.getString('ReportPanel', 'mandatoryParamsNote');
                    mandatoryLabelItem.addChild(mandatoryLabel);
                    parameterForm.addChild(mandatoryLabelItem);
                }

            } catch (e:Error) {
                Debug.trace("DEBUG error " + e);
            }

        }


        /**
         * Collect report parameters from form.
         * @return array list , which contains report parameters
         */
        private function collectReportParameters():Object {
            var rez:Object = {};
            for (var i:int = 0; i < paramsArray.length; i++) {
                var item:Object = paramsArray[i];
                if (item != null) {
                    var param:ReportParameter = item['param'] as ReportParameter;
                    var uiComponent:UIComponent = item['control'] as UIComponent;

                    if (uiComponent is ComboBox) {
                        rez[param.parameterId] = ComboBox(uiComponent).selectedItem.value;
                    } else if (uiComponent is DateTimeField) {
                        rez[param.parameterId] = DateTimeField(uiComponent).selectedDate;
                    } else if (uiComponent is TextInput) {
                        var val:String = TextInput(uiComponent).text;
                        if (param.businesstype == 'Number') {
                            rez[param.parameterId] = val != null && !isNaN(Number(val)) ? Number(val) : null;
                        } else {
                            rez[param.parameterId] = val;
                        }
                    } else {
                        Debug.trace(" Cant determinate ui type for  " + param + " value extracted as null and will be passed as report parameter");
                        rez[param.parameterId] = null;
                    }
                }
            }
            return rez;

        }

        /**
         * Save report to disk.
         * @param event  mouse event
         */
        private function onDownloadReportClick(event:CloseEvent):void {
            if (event.detail == Alert.YES) { //save
                //http://forums.adobe.com/message/3614898
                new FileReference().save(
                        pdf,
                        reportName
                );
                pdf = null;
            }
        }

        /**
         * Create report on server side. Download as byte array and prompt user to save it on disk.
         *
         * @param event mouse event
         */
        private function onCreateReportButtonClick(event:MouseEvent):void {
            var errArr:Array = Validator.validateAll(validationArray);
            if (errArr.length == 0) {
                pdf = null;
                reportName = getReportLabel(reportComboBox.selectedItem) + "_" + DateField.dateToString(new Date(), "DD-MM-YYYY") + ".pdf";
                var reportDescriptor:ReportDescriptor = ReportDescriptor(reportComboBox.selectedItem);
                remoteReportService.downloadReport(
                        localeFilter,
                        reportDescriptor.reportId,
                        collectReportParameters()
                );
            } else {
                var err:ValidationResultEvent;
                var errorMessageArray:Array = [];
                for each (err in errArr) {
                    var errField:String = FormItem(err.currentTarget.source.parent).label;
                    errorMessageArray.push(errField + " : " + err.message);
                }
                Alert.show(
                        errorMessageArray.join("\n\n"),
                        resourceManager.getString('ReportPanel', 'invalidForm'),
                        Alert.OK);
            }
        }

        private function onRpcMethodFault(event:FaultEvent):void {
            ShopManagerGlobal.instance.defaultOnRpcMethodFault(event);
        }

        private function onDownloadReportResult(event:ResultEvent):void {
            pdf = ByteArray(event.result);
            Alert.show(
                    resourceManager.getString("ReportPanel", "reportReadyToSave"),
                    resourceManager.getString("ReportPanel", "info"),
                    Alert.YES | Alert.NO, null, onDownloadReportClick, null, Alert.NO);
        }
        ]]>
    </mx:Script>

    <mx:String id="localeFilter"/>


    <mx:RemoteObject showBusyCursor="true" id="remoteReportService"
                     destination="remoteReportService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">
        <mx:makeObjectsBindable>true</mx:makeObjectsBindable>

        <mx:method id="downloadReport" name="downloadReport"
                   result="onDownloadReportResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>

    <mx:Canvas width="100%" height="100%">
        <mx:VBox x="0" y="0" width="100%" height="100%" id="reportManagementPanel">
            <mx:ControlBar width="100%">

                <mx:Text text="@Resource(bundle='ReportPanel',key='report')"/>

                <mx:ComboBox id="reportComboBox"
                             labelFunction="getReportLabel"
                             data="reportId"
                             dataProvider="{remoteReportService.getReportDescriptors.lastResult}"
                             change="onReportComboboxChange(event)"
                             prompt="@Resource(bundle='ReportPanel',key='selectReportPropmt')">
                </mx:ComboBox>

                <mx:Button visible="{reportComboBox.selectedItem != null}" click="onCreateReportButtonClick(event)"
                           id="okBtn" label="@Resource(bundle='ReportPanel',key='ok')"/>

            </mx:ControlBar>

            <mx:Form id="parameterForm" visible="{reportComboBox.selectedItem != null}" x="0" y="0">
                <mx:FormItem label="@Resource(bundle='BrandManagementPanel',key='name')">
                    <mx:TextInput id="nameTextImput" width="200"/>
                </mx:FormItem>
                <mx:FormItem label="@Resource(bundle='BrandManagementPanel',key='description')">
                    <mx:TextArea id="descriptionTextInput" width="200"/>
                </mx:FormItem>
            </mx:Form>


        </mx:VBox>
    </mx:Canvas>


</mx:Panel>