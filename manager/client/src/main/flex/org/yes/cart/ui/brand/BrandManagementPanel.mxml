<?xml version="1.0" encoding="utf-8"?>
<!--
  - Copyright 2009 Igor Azarnyi, Denys Pavlov
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
          xmlns:attr="org.yes.cart.ui.brand.*"
           width="100%"
           height="100%"
           title="@Resource(bundle='BrandManagementPanel',key='brand')"
           creationComplete="init();"
           paddingLeft="2" paddingTop="2" paddingBottom="2" paddingRight="2">
    <mx:Script>
		<![CDATA[
        import com.hexagonstar.util.debug.Debug;

        import mx.core.FlexGlobals;

        import org.yes.cart.impl.BrandDTOImpl;
        import org.yes.cart.util.CloneUtil;
        import org.yes.cart.shopmanager.ShopManagerGlobal;

        import mx.controls.Alert;
        import mx.events.CloseEvent;
        import mx.events.IndexChangedEvent;
        import mx.events.ListEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        private var TAB_SUMMARY_IDX:int = 0;
        private var TAB_IMAGE_IDX:int = 1;
        private var TAB_ATTR_IDX:int = 2;


        private var newPopUp:BrandCreateDialog;

        public function init():void {
            remoteBrandService.getAll();
        }


        private function onBrandSelectedClick(event:ListEvent):void {
            brandSelected = this.brandGrid.selectedItem != null;
            if (brandSelected) {
                initTab(brandTabNavigator.selectedIndex);
            }
        }


        private function summaryTabSelected():void {
            if (brandSelected && this.brandGrid.selectedItem != null) {
                nameTextImput.text = this.brandGrid.selectedItem.name;
                descriptionTextInput.text = this.brandGrid.selectedItem.description;
            } else {
                nameTextImput.text = '';
                descriptionTextInput.text = '';
            }
        }

        private function imageTabSelected():void {
            if (brandSelected && this.brandGrid.selectedItem != null) {
                brandImagesPanel.brand = this.brandGrid.selectedItem as BrandDTOImpl;
            } else {
                brandImagesPanel.brand = null;
            }
        }

        private function attrTabSelected():void {
            if (brandSelected && this.brandGrid.selectedItem != null) {
                brandNonImagesPanel.brand = this.brandGrid.selectedItem as BrandDTOImpl;
            } else {
                brandNonImagesPanel.brand = null;
            }
        }

        private function initTab(idx:int):void {
            Debug.trace("INFO BrandManagementPanel selected tab idx is " + idx);
            switch (idx) {
                case TAB_SUMMARY_IDX:
                {
                    summaryTabSelected();
                    break;
                }
                case TAB_IMAGE_IDX:
                {
                    imageTabSelected();
                    break;
                }
                case TAB_ATTR_IDX: {
                    attrTabSelected();
                 break;
                }
            }
        }

        private function onTabClick(event:IndexChangedEvent):void {
            initTab(event.newIndex);
        }

        private function onNewBrandClick(event:MouseEvent):void {
            newPopUp = BrandCreateDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), BrandCreateDialog, true));
            newPopUp.saveBtn.addEventListener(MouseEvent.CLICK, onCreateBrandClick);
            newPopUp.brandDTOImpl = new BrandDTOImpl();
            PopUpManager.centerPopUp(newPopUp);
        }

        private function onCreateBrandClick(event:Event):void {
            if (newPopUp != null) {
                remoteBrandService.create(newPopUp.brandDTOImpl);
                newPopUp.saveBtn.removeEventListener(MouseEvent.CLICK, onCreateBrandClick);
                PopUpManager.removePopUp(newPopUp);
                newPopUp = null;
            }
        }

        private function onEditBrandClick(event:Event):void {
            if (this.brandSelected && this.brandGrid.selectedItem != null) {
                newPopUp = BrandCreateDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), BrandCreateDialog, true));
                newPopUp.saveBtn.addEventListener(MouseEvent.CLICK, onUpdateBrandClick);
                newPopUp.brandDTOImpl = BrandDTOImpl(CloneUtil.clone(this.brandGrid.selectedItem));
                PopUpManager.centerPopUp(newPopUp);
            }
        }

        private function onUpdateBrandClick(event:Event):void {
            if (newPopUp != null) {
                remoteBrandService.update(newPopUp.brandDTOImpl);
                newPopUp.saveBtn.removeEventListener(MouseEvent.CLICK, onUpdateBrandClick);
                PopUpManager.removePopUp(newPopUp);
                newPopUp = null;
            }
        }


        private function onDeleteBrandClick(event:MouseEvent):void {
            if (this.brandSelected && this.brandGrid.selectedItem != null) {
                Alert.show(
                        resourceManager.getString('BrandManagementPanel', 'deleteBrandConfirm', [ this.brandGrid.selectedItem.name ]),
                        resourceManager.getString('ShopManagerApplication', 'warning'),
                        Alert.OK | Alert.CANCEL, this, onDeleteBrandConfirm, null, Alert.OK);
            }
        }

        private function onDeleteBrandConfirm(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                if (this.brandSelected && this.brandGrid.selectedItem != null) {
                    remoteBrandService.remove(this.brandGrid.selectedItem.brandId);
                }
            }
        }

        private function onRpcMethodFault(event:FaultEvent):void {
            ShopManagerGlobal.instance.defaultOnRpcMethodFault(event);
        }

        private function onGetAllResult(event:ResultEvent):void {

            this.brandGrid.dataProvider = event.result;

        }

        private function onCreateResult(event:ResultEvent):void {
            remoteBrandService.getAll();
            this.brandSelected = false;
        }

        private function onUpdateResult(event:ResultEvent):void {
            remoteBrandService.getAll();
            this.brandSelected = false;
        }

        private function onRemoveResult(event:ResultEvent):void {
            Alert.show(
                    resourceManager.getString('BrandManagementPanel', 'brandDeletedConfirm'),
                    resourceManager.getString('ShopManagerApplication', 'info'));
            remoteBrandService.getAll();
            this.brandSelected = false;
        }
        ]]>
    </mx:Script>

    <mx:Boolean id="brandSelected">false</mx:Boolean>

    <mx:RemoteObject showBusyCursor="true" id="remoteBrandService"
                     destination="remoteBrandService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getAll" name="getAll"
                   result="onGetAllResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="create" name="create"
                   result="onCreateResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="update" name="update"
                   result="onUpdateResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="remove" name="remove"
                   result="onRemoveResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>

    <mx:VDividedBox height="100%" width="100%">
        <mx:VBox width="100%">
            <mx:HBox paddingTop="5" width="100%">
                <mx:Button label="@Resource(bundle='BrandManagementPanel',key='newBrand')"
                           toolTip="@Resource(bundle='BrandManagementPanel',key='newBrandHint')"
                           click="onNewBrandClick(event)"/>
                <mx:Button label="@Resource(bundle='BrandManagementPanel',key='editBrand')"
                           toolTip="@Resource(bundle='BrandManagementPanel',key='editBrandHint')"
                           enabled="{brandSelected}"
                           click="onEditBrandClick(event)"/>
                <mx:Button label="@Resource(bundle='BrandManagementPanel',key='deleteBrand')"
                           toolTip="@Resource(bundle='BrandManagementPanel',key='deleteBrandHint')"
                           enabled="{brandSelected}"
                           click="onDeleteBrandClick(event)"/>

            </mx:HBox>

            <mx:DataGrid id="brandGrid"
                         width="100%" height="100%"
                         doubleClickEnabled="true"
                         itemDoubleClick="onEditBrandClick(event)"
                         itemClick="onBrandSelectedClick(event)">
                <mx:columns>
                    <mx:DataGridColumn width="80" headerText="@Resource(bundle='BrandManagementPanel',key='id')"
                                       dataField="brandId"/>
                    <mx:DataGridColumn width="300" headerText="@Resource(bundle='BrandManagementPanel',key='name')"
                                       dataField="name"/>
                    <mx:DataGridColumn headerText="@Resource(bundle='BrandManagementPanel',key='description')"
                                       dataField="description"/>
                </mx:columns>
            </mx:DataGrid>

        </mx:VBox>
        <mx:TabNavigator id="brandTabNavigator" width="100%" height="100%" change="onTabClick(event);"
                         visible="{brandSelected}">
            <mx:Canvas id="brandSummaryPanel" label="@Resource(bundle='BrandManagementPanel',key='summary')"
                       width="100%" height="100%">
                <mx:Form x="0" y="0">
                    <mx:FormItem label="@Resource(bundle='BrandManagementPanel',key='name')">
                        <mx:TextInput id="nameTextImput" width="200" editable="false"/>
                    </mx:FormItem>
                    <mx:FormItem label="@Resource(bundle='BrandManagementPanel',key='description')">
                        <mx:TextArea id="descriptionTextInput" width="200" editable="false"/>
                    </mx:FormItem>
                </mx:Form>
            </mx:Canvas>
            <attr:BrandImageAttributesPanel id="brandImagesPanel"/>
            <attr:BrandNonImageAttributesPanel id="brandNonImagesPanel"/>

        </mx:TabNavigator>


    </mx:VDividedBox>
</mx:Panel>