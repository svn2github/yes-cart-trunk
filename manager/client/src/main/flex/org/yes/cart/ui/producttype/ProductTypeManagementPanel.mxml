<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           width="100%"
           height="100%"
           creationComplete="init();">
    <mx:Script>
		<![CDATA[
        import com.hexagonstar.util.debug.Debug;

        import mx.collections.ArrayList;

        import mx.core.FlexGlobals;

        import org.yes.cart.constants.AttributeGroupNames;
        import org.yes.cart.impl.ProdTypeAttributeViewGroupDTOImpl;
        import org.yes.cart.impl.ProductTypeAttrDTOImpl;
        import org.yes.cart.impl.ProductTypeDTOImpl;
        import org.yes.cart.util.CloneUtil;
        import org.yes.cart.shopmanager.ShopManagerGlobal;

        import mx.controls.Alert;
        import mx.events.CloseEvent;
        import mx.events.ListEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.AsyncResponder;
        import mx.rpc.AsyncToken;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;


        [Bindable]
        private var selectedProductTypeDTO:ProductTypeDTOImpl;
        [Bindable]
        private var selectedProductTypeAttrDTO:ProductTypeAttrDTOImpl;

        [Bindable]
        private var selectedProdTypeAttributeViewGroupDTO:ProdTypeAttributeViewGroupDTOImpl;

        private var productTypeCreateDialog:ProductTypeCreateDialog;
        private var productTypeAttrCreateDialog:ProductTypeAttrCreateDialog;


        public function init():void {

            remoteAttributeService.findByAttributeGroupCode(AttributeGroupNames.PRODUCT);
            remoteProductTypeService.getAll();
        }


        /**
         * Edit selected product type attr.
         * @param event
         * @return  nothing
         */
        private function onNewProductTypeAttrClick(event:flash.events.MouseEvent):void {
            var pta:ProductTypeAttrDTOImpl = new ProductTypeAttrDTOImpl();
            pta.navigationType = "S";
            editProductTypeAttrInternal(pta);
            productTypeAttrCreateDialog.saveBtn.addEventListener(MouseEvent.CLICK, createProductTypeAttr);
        }

        /**
         * Edit selected product type attr.
         * @param event
         * @return  nothing
         */
        private function onEditProductTypeAttrClick(event:flash.events.MouseEvent):void {
            var pta:ProductTypeAttrDTOImpl = ProductTypeAttrDTOImpl(CloneUtil.clone(selectedProductTypeAttrDTO));
            editProductTypeAttrInternal(pta);
            productTypeAttrCreateDialog.saveBtn.addEventListener(MouseEvent.CLICK, saveProductTypeAttr);
        }


        private function editProductTypeAttrInternal(pta:ProductTypeAttrDTOImpl):void {
            productTypeAttrCreateDialog = ProductTypeAttrCreateDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), ProductTypeAttrCreateDialog, true));
            productTypeAttrCreateDialog.attributeComboBox.dataProvider = remoteAttributeService.findByAttributeGroupCode.lastResult;
            productTypeAttrCreateDialog.productTypeAttr = pta;
            productTypeAttrCreateDialog.productTypeAttr.producttypeId = selectedProductTypeDTO.producttypeId;
            PopUpManager.centerPopUp(productTypeAttrCreateDialog);

        }


        /**
         * Perform new prod type attr creation.
         * @param event event
         * @return nothing
         */
        private function saveProductTypeAttr(event:Event):void {
            selectedProductTypeAttrDTO = productTypeAttrCreateDialog.productTypeAttr;
            var asyncToken:AsyncToken = remoteProductTypeAttrService.update(productTypeAttrCreateDialog.productTypeAttr);
            asyncToken.addResponder(
                    new AsyncResponder(
                            productTypeAttrUpdatedResultHandler,
                            ShopManagerGlobal.instance.defaultOnRpcMethodFault
                    )
            );

            PopUpManager.removePopUp(productTypeAttrCreateDialog);
        }

        /**
         * Perform new prod type attr creation.
         * @param event event
         * @return nothing
         */
        private function createProductTypeAttr(event:Event):void {
            selectedProductTypeAttrDTO = null;
            var asyncToken:AsyncToken = remoteProductTypeAttrService.create(productTypeAttrCreateDialog.productTypeAttr);
            asyncToken.addResponder(
                    new AsyncResponder(
                            productTypeAttrUpdatedResultHandler,
                            ShopManagerGlobal.instance.defaultOnRpcMethodFault
                    )
            );
            PopUpManager.removePopUp(productTypeAttrCreateDialog);
        }


        /**
         * Product type created service call back .
         * @param event event
         * @param token async token
         * @return nothing
         */
        private function productTypeAttrUpdatedResultHandler(event:ResultEvent, token:AsyncToken):void {
            selectedProductTypeAttrDTO = null;
            remoteProductTypeAttrService.getByProductTypeId(selectedProductTypeDTO.producttypeId);
            remoteProdTypeAttributeViewGroupService.getByProductTypeId(selectedProductTypeDTO.producttypeId);
        }


        /**
         * Delete product type attr click handler.
         * @param event event
         * @return nothing
         */
        private function onDeleteProductTypeAttrClick(event:flash.events.MouseEvent):void {
            Alert.show(
                    resourceManager.getString('ProductTypeManagementPanel', 'deleteProductTypeAttrConfirm'),
                    resourceManager.getString('ShopManagerApplication', 'warning'),
                    Alert.OK | Alert.CANCEL, this, deleteProductTypeAttr, null, Alert.OK);
        }

        /**
         * Perform delete product type attr operation.
         * @param event close event
         * @return nothing
         */
        private function deleteProductTypeAttr(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var asyncToken:AsyncToken = remoteProductTypeAttrService.remove(selectedProductTypeAttrDTO.productTypeAttrId);
                asyncToken.addResponder(
                        new AsyncResponder(
                                productTypeAttrUpdatedResultHandler,
                                ShopManagerGlobal.instance.defaultOnRpcMethodFault
                        )
                );
            }
        }

        /**
         * Product type selected event handler.
         * @param event
         * @return nothing
         */
        private function onProductTypeAttrSelected(event:ListEvent):void {
            selectedProductTypeAttrDTO = ProductTypeAttrDTOImpl(event.currentTarget.selectedItem);
        }

        /**
         * Product type selected event handler.
         * @param event
         * @return nothing
         */
        private function handleProductTypeSelectedClick(event:ListEvent):void {
            selectedProductTypeDTO = ProductTypeDTOImpl(event.currentTarget.selectedItem);
            remoteProductTypeAttrService.getByProductTypeId(selectedProductTypeDTO.producttypeId);
            remoteProdTypeAttributeViewGroupService.getByProductTypeId(selectedProductTypeDTO.producttypeId);
            availableAttributes = [];
            assignedAttributes = [];
            selectedProdTypeAttributeViewGroupDTO = null;
            selectedProductTypeAttrDTO = null;
        }


        /**
         * Product type view group selected. Need to show what is included into
         * each view group.
         * @param event mouse event
         * @return nothing
         */
        private function handleProdTypeAttributeViewGroupClick(event:ListEvent):void {
            selectedProdTypeAttributeViewGroupDTO = ProdTypeAttributeViewGroupDTOImpl(event.currentTarget.selectedItem);
            refreshAttributeLists();
        }

        /**
         * Assemble string from attribute array.
         * @param arr given array
         * @return result string as comma separated list of string. Last item will be without comma.
         */
        private function assebmleString(arr:Array):String {
            var rez:String = "";
            for (var i:int = 0; i < arr.length; i++) {
                if (arr[i] != null && arr[i].length > 0) {
                    if (i == (arr.length - 1)) {
                        rez += arr[i];
                        Debug.trace(">>> " + arr[i]);
                    } else {
                        rez += arr[i] + ",";
                        Debug.trace("#### " + arr[i] + ",");
                    }
                }
            }
            return rez;
        }


        /**
         * Assign attribute to selected view group.
         * @param event event
         */
        private function assignAttribute(event:MouseEvent):void {
            Debug.trace("Add " + selectedAvailable + " to assigned");
            assignedAttributes.push(selectedAvailable);
            Debug.trace("Total length " + assignedAttributes.length);
            var str:String = assebmleString(assignedAttributes);
            Debug.trace("rez  " + str);

            selectedProdTypeAttributeViewGroupDTO.attrCodeList = str;
            remoteProdTypeAttributeViewGroupService.update(selectedProdTypeAttributeViewGroupDTO).addResponder(
                    new AsyncResponder(
                            function (event:*, obj:Object = null):void {
                                Debug.trace("Attribute view group was updated " + selectedProdTypeAttributeViewGroupDTO);
                                refreshAttributeLists();
                            },
                            ShopManagerGlobal.instance.defaultOnRpcMethodFault
                    )
            );


        }

        /**
         * Remove attribute from view group
         * @param event event
         */
        private function removeAttribute(event:MouseEvent):void {

            Debug.trace("Remove " + selectedAssigned
                    + " to available");
            var newArr:Array = assignedAttributes.filter(
                    function (element:String, index:int, array:Array):Boolean {
                        return (element != null && element.length > 0 && element != selectedAssigned);
                    }
            );
            Debug.trace("Total length " + newArr.length);
            var str:String = assebmleString(newArr);
            Debug.trace("rez  " + str);

            selectedProdTypeAttributeViewGroupDTO.attrCodeList = str;
            remoteProdTypeAttributeViewGroupService.update(selectedProdTypeAttributeViewGroupDTO).addResponder(
                    new AsyncResponder(
                            function (event:*, obj:Object = null):void {
                                Debug.trace("Attribute view group was updated " + selectedProdTypeAttributeViewGroupDTO);
                                refreshAttributeLists();
                            },
                            ShopManagerGlobal.instance.defaultOnRpcMethodFault
                    )
            );

        }


        /**
         * Get available atribute codes to assign into group.
         * @param assigned
         * @return available attribute codes.
         */
        private function getAvailableCodes(assigned:Array):Array {
            var result:ArrayList = new ArrayList();
            for each (var pta:ProductTypeAttrDTOImpl in remoteProductTypeAttrService.getByProductTypeId.lastResult) {
                if (assigned.indexOf(pta.attributeDTO.code) == -1) {
                    result.addItem(pta.attributeDTO.code);
                }
            }
            return result.toArray();
        }


        /**
         * Get attribute code name by given code.
         * @param code given code
         * @return code name
         */
        private function getNameByCode(code:Object):String {
            for each (var pta:ProductTypeAttrDTOImpl in remoteProductTypeAttrService.getByProductTypeId.lastResult) {
                if (code === pta.attributeDTO.code) {
                    return  pta.attributeDTO.name;
                }
            }
            return String(code);
        }

        private function refreshAttributeLists():void {
            if (selectedProdTypeAttributeViewGroupDTO.attrCodeList != null && selectedProdTypeAttributeViewGroupDTO.attrCodeList.length > 0) {
                assignedAttributes = selectedProdTypeAttributeViewGroupDTO.attrCodeList.split(",").filter(
                        function (element:String, index:int, array:Array):Boolean {
                            return (element != null && element.length > 0);
                        }
                );
            } else {
                assignedAttributes = [];

            }
            availableAttributes = getAvailableCodes(assignedAttributes);
            addAvailableEnabled = addAssignedEnabled = false;
        }


        /**
         * Edit selected product type.
         * @param event
         * @return  nothing
         */
        private function onEditProductTypeClickc(event:flash.events.MouseEvent):void {
            productTypeCreateDialog = ProductTypeCreateDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), ProductTypeCreateDialog, true));
            productTypeCreateDialog.productType = ProductTypeDTOImpl(CloneUtil.clone(selectedProductTypeDTO));
            productTypeCreateDialog.saveBtn.addEventListener(MouseEvent.CLICK, saveProductType);
            PopUpManager.centerPopUp(productTypeCreateDialog);
        }


        /**
         * Perform new warehouse creation.
         * @param event event
         * @return nothing
         */
        private function saveProductType(event:Event):void {

            selectedProductTypeDTO = productTypeCreateDialog.productType;
            remoteProductTypeService.update(productTypeCreateDialog.productType).addResponder(
                    new AsyncResponder(
                            function (event:*, obj:Object = null):void {
                                //Product type created service call back .
                                remoteProductTypeService.getAll();
                            },
                            ShopManagerGlobal.instance.defaultOnRpcMethodFault
                    )
            );

            PopUpManager.removePopUp(productTypeCreateDialog);
        }

        /**
         * Edit selected product type.
         * @param event
         * @return  nothing
         */
        private function onNewProductTypeClick(event:flash.events.MouseEvent):void {
            productTypeCreateDialog = ProductTypeCreateDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), ProductTypeCreateDialog, true));
            productTypeCreateDialog.productType = new ProductTypeDTOImpl();
            productTypeCreateDialog.saveBtn.addEventListener(MouseEvent.CLICK, createProductType);
            PopUpManager.centerPopUp(productTypeCreateDialog);
        }

        /**
         * Perform new warehouse creation.
         * @param event event
         * @return nothing
         */
        private function createProductType(event:Event):void {
            var asyncToken:AsyncToken = remoteProductTypeService.create(productTypeCreateDialog.productType);
            asyncToken.addResponder(
                    new AsyncResponder(
                            function (event:*, obj:Object = null):void {
                                //Product type created service call back .
                                selectedProductTypeDTO = null;
                                remoteProductTypeService.getAll();

                            }
                            ,
                            ShopManagerGlobal.instance.defaultOnRpcMethodFault
                    )
            );
            PopUpManager.removePopUp(productTypeCreateDialog);
        }


        /**
         * Delete product type click handler.
         * @param event event
         * @return nothing
         */
        private function onDeleteProductTypeClick(event:flash.events.MouseEvent):void {
            Alert.show(
                    resourceManager.getString('ProductTypeManagementPanel', 'deleteProductTypeConfirm'),
                    resourceManager.getString('ShopManagerApplication', 'warning'),
                    Alert.OK | Alert.CANCEL, this, deleteProductType, null, Alert.OK);
        }

        /**
         * Perform delete product type operation.
         * @param event close event
         * @return nothing
         */
        private function deleteProductType(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                var asyncToken:AsyncToken = remoteProductTypeService.remove(selectedProductTypeDTO.producttypeId);
                asyncToken.addResponder(
                        new AsyncResponder(
                                function (event:*, obj:Object = null):void {
                                    //Delete product type service call back .
                                    selectedProductTypeDTO = null;
                                    selectedProdTypeAttributeViewGroupDTO = null;
                                    remoteProductTypeService.getAll();
                                    Alert.show(
                                            resourceManager.getString('ProductTypeManagementPanel', 'productTypeDeletedConfirm'),
                                            resourceManager.getString('ShopManagerApplication', 'info'));

                                },
                                productTypeDeleteFaultHandler));
            }
        }


        /**
         * Delete product type fauld handler
         * @param event
         * @param token
         * @return
         */
        private function productTypeDeleteFaultHandler(event:FaultEvent, token:AsyncToken):void {
            Alert.show(
                    resourceManager.getString('ProductTypeManagementPanel', 'productTypeNotDeleted'),
                    resourceManager.getString('ShopManagerApplication', 'error'));
        }


        private function availableAttributeSelected(event:MouseEvent):void {
            addAvailableEnabled = true;
            selectedAvailable = event.currentTarget.selectedItem;
        }

        private function assignedAttributeSelected(event:MouseEvent):void {
            addAssignedEnabled = true;
            selectedAssigned = event.currentTarget.selectedItem;
        }


        private var prodTypeAttributeViewGroupCreateDialog:ProdTypeAttributeViewGroupCreateDialog;

        /**
         * Call dialog to create view group.
         * @param event mouse evt
         */
        private function createAttrViewGroup(event:MouseEvent):void {

            prodTypeAttributeViewGroupCreateDialog = ProdTypeAttributeViewGroupCreateDialog(

                    PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), ProdTypeAttributeViewGroupCreateDialog, true)

            );

            prodTypeAttributeViewGroupCreateDialog.productTypeAttrVG = new ProdTypeAttributeViewGroupDTOImpl();
            prodTypeAttributeViewGroupCreateDialog.productTypeAttrVG.producttypeId = selectedProductTypeDTO.producttypeId;
            prodTypeAttributeViewGroupCreateDialog.productTypeAttrVG.rank = 100;
            prodTypeAttributeViewGroupCreateDialog.saveBtn.addEventListener(
                    MouseEvent.CLICK,
                    function createProductTypeAttriViewGroup(event:Event):void {

                        remoteProdTypeAttributeViewGroupService.create(
                                prodTypeAttributeViewGroupCreateDialog.productTypeAttrVG
                        ).addResponder(
                                new AsyncResponder(
                                        function (event:*, obj:Object = null):void {
                                            //Product type view group created.
                                            selectedProdTypeAttributeViewGroupDTO = null;
                                            remoteProdTypeAttributeViewGroupService.getByProductTypeId(selectedProductTypeDTO.producttypeId);
                                        }
                                        ,
                                        ShopManagerGlobal.instance.defaultOnRpcMethodFault
                                )

                        );

                        PopUpManager.removePopUp(prodTypeAttributeViewGroupCreateDialog);
                    }
            );
            PopUpManager.centerPopUp(prodTypeAttributeViewGroupCreateDialog);
        }

        /**
         * Call dialog to create view group.
         * @param event mouse evt
         */
        private function editAttrViewGroup(event:MouseEvent):void {

            prodTypeAttributeViewGroupCreateDialog = ProdTypeAttributeViewGroupCreateDialog(

                    PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), ProdTypeAttributeViewGroupCreateDialog, true)

            );

            prodTypeAttributeViewGroupCreateDialog.productTypeAttrVG = selectedProdTypeAttributeViewGroupDTO;
            prodTypeAttributeViewGroupCreateDialog.saveBtn.addEventListener(
                    MouseEvent.CLICK,
                    function createProductTypeAttriViewGroup(event:Event):void {

                        remoteProdTypeAttributeViewGroupService.update(
                                prodTypeAttributeViewGroupCreateDialog.productTypeAttrVG
                        );

                        PopUpManager.removePopUp(prodTypeAttributeViewGroupCreateDialog);
                    }
            );
            PopUpManager.centerPopUp(prodTypeAttributeViewGroupCreateDialog);

        }

        /**
         * Call dialog to create view group.
         * @param event mouse evt
         */
        private function deleteAttrViewGroup(event:MouseEvent):void {
            Alert.show(
                    resourceManager.getString('ProductTypeManagementPanel', 'deleteProductTypeAttrViewGroupConfirm'),
                    resourceManager.getString('ShopManagerApplication', 'warning'),
                    Alert.OK | Alert.CANCEL, this,
                    function (event:CloseEvent):void {
                        if (event.detail == Alert.OK) {
                            remoteProdTypeAttributeViewGroupService.remove(selectedProdTypeAttributeViewGroupDTO.prodTypeAttributeViewGroupId);
                            selectedProdTypeAttributeViewGroupDTO = null;
                        }
                    }
                    ,
                    null, Alert.OK);
        }
        ]]>
    </mx:Script>

    <mx:Boolean id="addAvailableEnabled"/>
    <mx:Boolean id="addAssignedEnabled"/>

    <mx:Array id="availableAttributes"></mx:Array>
    <mx:Array id="assignedAttributes"></mx:Array>

    <mx:String id="selectedAvailable"></mx:String>
    <mx:String id="selectedAssigned"></mx:String>


    <mx:RemoteObject showBusyCursor="true" id="remoteProductTypeService"
                     destination="remoteProductTypeService"
                     result="ShopManagerGlobal.instance.defaultOnRpcMethodResult(event)"
                     fault="ShopManagerGlobal.instance.defaultOnRpcMethodFault(event)"
                     channelSet="{ShopManagerGlobal.instance.channelSet}"/>

    <mx:RemoteObject showBusyCursor="true" id="remoteProductTypeAttrService"
                     destination="remoteProductTypeAttrService"
                     result="ShopManagerGlobal.instance.defaultOnRpcMethodResult(event)"
                     fault="ShopManagerGlobal.instance.defaultOnRpcMethodFault(event)"
                     channelSet="{ShopManagerGlobal.instance.channelSet}"/>

    <mx:RemoteObject showBusyCursor="true" id="remoteAttributeService"
                     destination="remoteAttributeService"
                     result="ShopManagerGlobal.instance.defaultOnRpcMethodResult(event)"
                     fault="ShopManagerGlobal.instance.defaultOnRpcMethodFault(event)"
                     channelSet="{ShopManagerGlobal.instance.channelSet}"/>

    <mx:RemoteObject showBusyCursor="true" id="remoteProdTypeAttributeViewGroupService"
                     destination="remoteProdTypeAttributeViewGroupService"
                     result="ShopManagerGlobal.instance.defaultOnRpcMethodResult(event)"
                     fault="ShopManagerGlobal.instance.defaultOnRpcMethodFault(event)"
                     channelSet="{ShopManagerGlobal.instance.channelSet}"/>

    <mx:Panel width="100%" height="100%" title="@Resource(bundle='ProductTypeManagementPanel',key='productType')">


        <mx:VDividedBox height="100%" width="100%">
            <mx:VBox width="100%">
                <mx:ControlBar>
                    <mx:Button label="@Resource(bundle='ProductTypeManagementPanel',key='newProductType')"
                               toolTip="@Resource(bundle='ProductTypeManagementPanel',key='newProductTypeHint')"
                               click="onNewProductTypeClick(event)"
                            />
                    <mx:Button label="@Resource(bundle='ProductTypeManagementPanel',key='editProductType')"
                               toolTip="@Resource(bundle='ProductTypeManagementPanel',key='editProductTypeHint')"
                               enabled="{selectedProductTypeDTO != null}"
                               click="onEditProductTypeClickc(event)"
                            />
                    <mx:Button label="@Resource(bundle='ProductTypeManagementPanel',key='deleteProductType')"
                               toolTip="@Resource(bundle='ProductTypeManagementPanel',key='deleteProductTypeHint')"
                               enabled="{selectedProductTypeDTO != null}"
                               click="onDeleteProductTypeClick(event)"
                            />

                </mx:ControlBar>

                <mx:DataGrid x="0" y="0" width="100%" height="99%"
                             dataProvider="{remoteProductTypeService.getAll.lastResult}"
                             itemClick="handleProductTypeSelectedClick(event)">
                    <mx:columns>
                        <mx:DataGridColumn width="80"
                                           headerText="@Resource(bundle='ProductTypeManagementPanel',key='id')"
                                           dataField="producttypeId"/>
                        <mx:DataGridColumn width="160"
                                           headerText="@Resource(bundle='ProductTypeManagementPanel',key='name')"
                                           dataField="name"/>
                        <mx:DataGridColumn width="160"
                                           headerText="@Resource(bundle='ProductTypeManagementPanel',key='uitemplate')"
                                           dataField="uitemplate"/>
                        <mx:DataGridColumn width="160"
                                           headerText="@Resource(bundle='ProductTypeManagementPanel',key='uisearchtemplate')"
                                           dataField="uisearchtemplate"/>
                        <mx:DataGridColumn headerText="@Resource(bundle='ProductTypeManagementPanel',key='ensemble')"
                                           dataField="ensemble" textAlign="center">
                            <mx:itemRenderer>
                                <mx:Component>
                                    <mx:CheckBox paddingLeft="40" enabled="false" selected="{data.ensemble}"/>
                                </mx:Component>
                            </mx:itemRenderer>
                        </mx:DataGridColumn>
                        <mx:DataGridColumn headerText="@Resource(bundle='ProductTypeManagementPanel',key='shipable')"
                                           dataField="shipable" textAlign="center">
                            <mx:itemRenderer>
                                <mx:Component>
                                    <mx:CheckBox paddingLeft="40" enabled="false" selected="{data.shipable}"/>
                                </mx:Component>
                            </mx:itemRenderer>
                        </mx:DataGridColumn>
                        <mx:DataGridColumn headerText="@Resource(bundle='ProductTypeManagementPanel',key='service')"
                                           dataField="service" textAlign="center">
                            <mx:itemRenderer>
                                <mx:Component>
                                    <mx:CheckBox paddingLeft="40" enabled="false" selected="{data.service}"/>
                                </mx:Component>
                            </mx:itemRenderer>
                        </mx:DataGridColumn>
                        <mx:DataGridColumn headerText="@Resource(bundle='ProductTypeManagementPanel',key='digital')"
                                           dataField="digital" textAlign="center">
                            <mx:itemRenderer>
                                <mx:Component>
                                    <mx:CheckBox paddingLeft="40" enabled="false" selected="{data.digital}"/>
                                </mx:Component>
                            </mx:itemRenderer>
                        </mx:DataGridColumn>
                        <mx:DataGridColumn
                                headerText="@Resource(bundle='ProductTypeManagementPanel',key='downloadable')"
                                dataField="downloadable" textAlign="center">
                            <mx:itemRenderer>
                                <mx:Component>
                                    <mx:CheckBox paddingLeft="40" enabled="false" selected="{data.downloadable}"/>
                                </mx:Component>
                            </mx:itemRenderer>
                        </mx:DataGridColumn>
                        <mx:DataGridColumn headerText="@Resource(bundle='ProductTypeManagementPanel',key='description')"
                                           dataField="description"/>
                    </mx:columns>

                </mx:DataGrid>
            </mx:VBox>

            <mx:TabNavigator id="productTabNavigator" width="100%" height="100%"
                             visible="{selectedProductTypeDTO != null}">

                <mx:Canvas id="attrTab" label="@Resource(bundle='ProductTypeManagementPanel',key='attributes')"
                           width="100%"
                           height="100%">

                    <mx:VBox width="100%" height="100%">

                        <mx:ControlBar>
                            <mx:Button label="@Resource(bundle='ProductTypeManagementPanel',key='newAttr')"
                                       toolTip="@Resource(bundle='ProductTypeManagementPanel',key='newAttrHint')"
                                       click="onNewProductTypeAttrClick(event)"
                                    />
                            <mx:Button label="@Resource(bundle='ProductTypeManagementPanel',key='editAttr')"
                                       toolTip="@Resource(bundle='ProductTypeManagementPanel',key='editAttrHint')"
                                       enabled="{selectedProductTypeAttrDTO != null}"
                                       click="onEditProductTypeAttrClick(event)"

                                    />
                            <mx:Button label="@Resource(bundle='ProductTypeManagementPanel',key='deleteAttr')"
                                       toolTip="@Resource(bundle='ProductTypeManagementPanel',key='deleteAttrHint')"
                                       enabled="{selectedProductTypeAttrDTO != null}"
                                       click="onDeleteProductTypeAttrClick(event)"
                                    />
                        </mx:ControlBar>

                        <mx:DataGrid width="100%" height="99%"
                                     dataProvider="{remoteProductTypeAttrService.getByProductTypeId.lastResult}"
                                     itemClick="onProductTypeAttrSelected(event)">

                            <mx:columns>
                                <mx:DataGridColumn width="80"
                                                   headerText="@Resource(bundle='ProductTypeManagementPanel',key='id')"
                                                   dataField="productTypeAttrId"/>
                                <mx:DataGridColumn width="160"
                                                   headerText="@Resource(bundle='ProductTypeManagementPanel',key='code')"
                                                   dataField="attributeDTO.code"/>
                                <mx:DataGridColumn width="160"
                                                   headerText="@Resource(bundle='ProductTypeManagementPanel',key='name')"
                                                   dataField="attributeDTO.name"/>
                                <mx:DataGridColumn width="80"
                                                   headerText="@Resource(bundle='ProductTypeManagementPanel',key='rank')"
                                                   dataField="rank"/>
                                <mx:DataGridColumn
                                        headerText="@Resource(bundle='ProductTypeManagementPanel',key='navigation')"
                                        dataField="navigation">
                                    <mx:itemRenderer>
                                        <mx:Component>
                                            <mx:CheckBox paddingLeft="40" enabled="false" selected="{data.navigation}"/>
                                        </mx:Component>
                                    </mx:itemRenderer>
                                </mx:DataGridColumn>
                                <mx:DataGridColumn
                                        headerText="@Resource(bundle='ProductTypeManagementPanel',key='navigationType')"
                                        dataField="navigationType"/>
                                <mx:DataGridColumn
                                        headerText="@Resource(bundle='ProductTypeManagementPanel',key='visible')"
                                        dataField="visible" textAlign="center">
                                    <mx:itemRenderer>
                                        <mx:Component>
                                            <mx:CheckBox paddingLeft="40" enabled="false" selected="{data.visible}"/>
                                        </mx:Component>
                                    </mx:itemRenderer>
                                </mx:DataGridColumn>
                                <mx:DataGridColumn
                                        headerText="@Resource(bundle='ProductTypeManagementPanel',key='simulariry')"
                                        dataField="simulariry" textAlign="center">
                                    <mx:itemRenderer>
                                        <mx:Component>
                                            <mx:CheckBox paddingLeft="40" enabled="false" selected="{data.simulariry}"/>
                                        </mx:Component>
                                    </mx:itemRenderer>
                                </mx:DataGridColumn>
                            </mx:columns>


                        </mx:DataGrid>

                    </mx:VBox>

                </mx:Canvas>

                <mx:Canvas id="arrtViewroupTab"
                           label="@Resource(bundle='ProductTypeManagementPanel',key='attributeViewGroup')"
                           width="100%"
                           height="100%">

                    <mx:HBox width="100%" height="100%">


                        <mx:VBox height="100%">

                            <mx:ControlBar height="50">
                                <mx:Button label="@Resource(bundle='ProductTypeManagementPanel',key='createViewGroup')"
                                           toolTip="@Resource(bundle='ProductTypeManagementPanel',key='createViewGroupHint')"
                                           click="createAttrViewGroup(event)"/>

                                <mx:Button label="@Resource(bundle='ProductTypeManagementPanel',key='editViewGroup')"
                                           toolTip="@Resource(bundle='ProductTypeManagementPanel',key='editViewGroupHint')"
                                           click="editAttrViewGroup(event)"
                                           enabled="{selectedProdTypeAttributeViewGroupDTO != null}"
                                        />

                                <mx:Button label="@Resource(bundle='ProductTypeManagementPanel',key='deleteViewGroup')"
                                           toolTip="@Resource(bundle='ProductTypeManagementPanel',key='deleteViewGroupHint')"
                                           click="deleteAttrViewGroup(event)"
                                           enabled="{selectedProdTypeAttributeViewGroupDTO != null}"
                                        />

                            </mx:ControlBar>

                            <mx:DataGrid width="100%" height="100%"
                                         dataProvider="{remoteProdTypeAttributeViewGroupService.getByProductTypeId.lastResult}"
                                         itemClick="handleProdTypeAttributeViewGroupClick(event)"
                                    >

                                <mx:columns>

                                    <mx:DataGridColumn width="300"
                                                       headerText="@Resource(bundle='ProductTypeManagementPanel',key='name')"
                                                       dataField="name"/>
                                    <mx:DataGridColumn width="70"
                                                       headerText="@Resource(bundle='ProductTypeManagementPanel',key='rank')"
                                                       dataField="rank"/>


                                </mx:columns>

                            </mx:DataGrid>

                        </mx:VBox>

                        <mx:VBox height="100%" visible="{selectedProdTypeAttributeViewGroupDTO != null}">


                            <mx:Grid x="0" y="0" width="100%" height="100%" id="supportedCurrencyPanel">
                                <mx:GridRow width="100%" height="50">
                                    <mx:GridItem width="150" textAlign="center" verticalAlign="middle">
                                        <mx:Label
                                                text="@Resource(bundle='ProductTypeManagementPanel',key='availableAttributes')"/>
                                    </mx:GridItem>
                                    <mx:GridItem width="100">
                                    </mx:GridItem>
                                    <mx:GridItem width="150" textAlign="center" verticalAlign="middle">
                                        <mx:Label
                                                text="@Resource(bundle='ProductTypeManagementPanel',key='assignedAttributes')"/>
                                    </mx:GridItem>
                                </mx:GridRow>
                                <mx:GridRow height="100%">
                                    <mx:GridItem width="200" verticalAlign="middle">
                                        <mx:List
                                                width="100%"
                                                height="100%"
                                                dataProvider="{availableAttributes}"
                                                click="availableAttributeSelected(event)"
                                                labelFunction="getNameByCode"
                                                >
                                        </mx:List>

                                    </mx:GridItem>

                                    <mx:GridItem width="100">
                                        <mx:VBox width="100%" height="100%" verticalAlign="middle"
                                                 horizontalAlign="center">
                                            <mx:Button enabled="{addAvailableEnabled}"
                                                       label="@Resource(bundle='ProductTypeManagementPanel',key='assign')"
                                                       toolTip="@Resource(bundle='ProductTypeManagementPanel',key='assignHint')"
                                                       click="assignAttribute(event)"/>
                                            <mx:Button enabled="{addAssignedEnabled}"
                                                       label="@Resource(bundle='ProductTypeManagementPanel',key='unassign')"
                                                       toolTip="@Resource(bundle='ProductTypeManagementPanel',key='unassignHint')"
                                                       click="removeAttribute(event)"/>
                                        </mx:VBox>
                                    </mx:GridItem>
                                    <mx:GridItem width="200" verticalAlign="middle">
                                        <mx:List
                                                width="100%"
                                                height="100%"
                                                dataProvider="{assignedAttributes}"
                                                click="assignedAttributeSelected(event)"
                                                labelFunction="getNameByCode"
                                                >

                                        </mx:List>

                                    </mx:GridItem>
                                </mx:GridRow>
                            </mx:Grid>
                        </mx:VBox>


                    </mx:HBox>

                </mx:Canvas>

            </mx:TabNavigator>


        </mx:VDividedBox>

    </mx:Panel>
</mx:Canvas>