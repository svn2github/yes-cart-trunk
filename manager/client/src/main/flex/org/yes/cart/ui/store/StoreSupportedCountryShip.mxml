<?xml version="1.0" encoding="utf-8"?>
<!--
  - Copyright 2009 Igor Azarnyi, Denys Pavlov
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
         width="100%" height="100%" creationComplete="init();"
         paddingLeft="2" paddingTop="2" paddingRight="2" paddingBottom="2">
    <mx:Script>
<![CDATA[
        import com.hexagonstar.util.debug.Debug;

        import mx.collections.ArrayCollection;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import org.yes.cart.impl.CountryDTOImpl;

        import org.yes.cart.impl.ShopDTOImpl;
        import org.yes.cart.shopmanager.ShopManagerGlobal;

        private var _shopDTOImpl:ShopDTOImpl;

        /**
         * Init supported by shop currency panel.
         * @return nothing
         */
        private function init():void {
            remoteCountryService.getAll();
        }


        private function onGetAllCountriesResult(event:ResultEvent):void {

            availableCountry = ArrayCollection(event.result);
            addAssignedEnabled = false;
            addAvailableEnabled = false;

            remoteShopService.getSupportedShippingCountries(_shopDTOImpl.shopId);
        }


        public function set shopDTOImpl(value:ShopDTOImpl):void {
            _shopDTOImpl = value;
        }

        private function availableCountrySelected(event:MouseEvent):void {
            addAvailableEnabled = this.availableCountryList.selectedItem != null;
        }

        private function assignedCountrySelected(event:MouseEvent):void {
            addAssignedEnabled = this.assignedCurrencyList.selectedItem != null;
        }

        private function assignCountry(event:Event):void {
            if (this.addAvailableEnabled && this.availableCountryList.selectedItem != null) {
                var countries:String = constructStringList(true, this.availableCountryList.selectedItem as CountryDTOImpl);
                addAvailableEnabled = false;
                remoteShopService.updateSupportedShippingCountries(_shopDTOImpl.shopId, countries);
            }
        }

        private function unassignCountry(event:Event):void {
            if (this.addAssignedEnabled && this.assignedCurrencyList.selectedItem != null) {
                var countries:String = constructStringList(false, this.assignedCurrencyList.selectedItem as CountryDTOImpl);
                addAssignedEnabled = false;
                remoteShopService.updateSupportedShippingCountries(_shopDTOImpl.shopId, countries);
            }
        }

        private function constructStringList(addFlag:Boolean, item:CountryDTOImpl):String {
            var result:String = "";
            if (addFlag) {
                if (assignedCountry != null) {
                    for (var i:int = 0; i < assignedCountry.length; i++) {
                        result = result + (assignedCountry[i] as CountryDTOImpl).countryCode + ",";
                    }
                }
                result = result + item.countryCode + ",";
            } else {
                if (assignedCountry != null) {
                    for (var j:int = 0; j < assignedCountry.length; j++) {
                        if ((assignedCountry[j] as CountryDTOImpl).countryCode != item.countryCode) {
                            result = result + (assignedCountry[j] as CountryDTOImpl).countryCode + ",";
                        }
                    }
                }
            }
            if (result != null && result.length > 0) {
                result = result.substr(0, result.length - 1);
            }
            Debug.trace("result -> " + result);
            return result;
        }

        private function onGetSupportedShippingCountriesResult(event:ResultEvent):void {

            var assignedCurrencyStr:String = String(event.result);
            if (assignedCurrencyStr == null || assignedCurrencyStr == "null") {
                assignedCountry.removeAll();
            } else {
                var _assignedCodes:ArrayCollection = new ArrayCollection(assignedCurrencyStr.split(","));
                var _assignedCountries:ArrayCollection = new ArrayCollection();
                for each (var _code:String in _assignedCodes) {
                    for (var i:int = 0; i < availableCountry.length; i++) {
                        var _country:CountryDTOImpl = availableCountry.getItemAt(i) as CountryDTOImpl;
                        if (_country.countryCode == _code) {
                            _assignedCountries.addItem(_country);
                            availableCountry.removeItemAt(i);
                            break;
                        }
                    }
                }
                assignedCountry = _assignedCountries;
            }
            addAssignedEnabled = false;
            addAvailableEnabled = false;

        }

        private function onUpdateSupportedShippingCountriesResult(event:ResultEvent):void {

            init();

        }

        private function onRpcMethodFault(event:FaultEvent):void {
            ShopManagerGlobal.instance.defaultOnRpcMethodFault(event);
        }

        private function countryLabel(item:Object):String {
            if (item is CountryDTOImpl) {
                var _country:CountryDTOImpl = item as CountryDTOImpl;
                return _country.countryCode + ' ' + _country.displayName + ' (' + _country.name + ')';
            }
            return '';
        }
        ]]>
    </mx:Script>

    <mx:RemoteObject showBusyCursor="true" id="remoteShopService"
                     destination="remoteShopService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getSupportedShippingCountries" name="getSupportedShippingCountries"
                   result="onGetSupportedShippingCountriesResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="updateSupportedShippingCountries" name="updateSupportedShippingCountries"
                   result="onUpdateSupportedShippingCountriesResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>


    <mx:RemoteObject showBusyCursor="true" id="remoteCountryService"
                     destination="remoteCountryService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getAllCountries" name="getAll"
                   result="onGetAllCountriesResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>

    <mx:ArrayCollection id="availableCountry"/>
    <mx:ArrayCollection id="assignedCountry"/>

    <mx:Boolean id="addAvailableEnabled">false</mx:Boolean>
    <mx:Boolean id="addAssignedEnabled">false</mx:Boolean>

    <mx:Grid x="0" y="0" width="100%" height="100%" id="supportedCountryPanel">
        <mx:GridRow width="100%" height="50">
            <mx:GridItem width="45%" height="50" textAlign="center" verticalAlign="middle">
                <mx:Label text="@Resource(bundle='StoresManagementPanel',key='availableCountryShip')"/>
            </mx:GridItem>
            <mx:GridItem width="10%" height="50">
            </mx:GridItem>
            <mx:GridItem width="45%" height="50" textAlign="center" verticalAlign="middle">
                <mx:Label text="@Resource(bundle='StoresManagementPanel',key='supportedCountryShip')"/>
            </mx:GridItem>
        </mx:GridRow>
        <mx:GridRow width="100%" height="100%">
            <mx:GridItem width="45%" height="100%">
                <mx:List
                        id="availableCountryList"
                        width="100%"
                        height="100%"
                        dataProvider="{availableCountry}"
                        doubleClickEnabled="true"
                        labelFunction="countryLabel"
                        itemDoubleClick="assignCountry(event)"
                        click="availableCountrySelected(event)"
                        >
                </mx:List>
            </mx:GridItem>
            <mx:GridItem width="10%" height="100%" verticalAlign="middle" textAlign="center">
                <mx:VBox width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
                    <mx:Button enabled="{addAvailableEnabled}"
                               label="@Resource(bundle='StoresManagementPanel',key='assign')"
                               toolTip="@Resource(bundle='StoresManagementPanel',key='assignHint')"
                               click="assignCountry(event)"/>
                    <mx:Button enabled="{addAssignedEnabled}"
                               label="@Resource(bundle='StoresManagementPanel',key='unassign')"
                               toolTip="@Resource(bundle='StoresManagementPanel',key='unassignHint')"
                               click="unassignCountry(event)"/>
                </mx:VBox>
            </mx:GridItem>
            <mx:GridItem width="45%" height="100%">
                <mx:List
                        id="assignedCurrencyList"
                        width="100%"
                        height="100%"
                        dataProvider="{assignedCountry}"
                        doubleClickEnabled="true"
                        labelFunction="countryLabel"
                        itemDoubleClick="unassignCountry(event)"
                        click="assignedCountrySelected(event)"
                        >

                </mx:List>
            </mx:GridItem>
        </mx:GridRow>

    </mx:Grid>
</mx:VBox>
