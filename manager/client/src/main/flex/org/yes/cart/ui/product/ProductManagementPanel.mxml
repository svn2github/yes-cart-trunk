<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:prod="org.yes.cart.ui.product.*"
           xmlns:seo="org.yes.cart.ui.seo.*"
           width="100%" height="100%" creationComplete="init();">
    <mx:Panel width="100%" height="100%" title="@Resource(bundle='ProductManagementPanel',key='products')"
              paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2">


        <mx:VDividedBox width="100%" height="100%">
            <mx:VBox width="100%" height="50%">
                <mx:ControlBar width="100%">
                    <mx:Label text="@Resource(bundle='ProductManagementPanel',key='code')"/>
                    <mx:TextInput id="codeTextInput" width="100"/>
                    <mx:Label text="@Resource(bundle='ProductManagementPanel',key='name')"/>
                    <mx:TextInput id="nameTextInput" width="100"/>
                    <mx:Label text="@Resource(bundle='ProductManagementPanel',key='brand')"/>
                    <mx:ComboBox id="brandComboBox" width="120"
                                 dataProvider="{brandsList}"
                                 labelField="name"
                                 data="brandId"
                                 prompt="@Resource(bundle='ProductManagementPanel',key='selectBrandPropmt')"
                            />
                    <mx:Label text="@Resource(bundle='ProductManagementPanel',key='type')"/>
                    <mx:ComboBox id="typeComboBox" width="120"
                                 dataProvider="{productTypesList}"
                                 labelField="name"
                                 data="producttypeId"
                                 prompt="@Resource(bundle='ProductManagementPanel',key='selectTypePropmt')"
                            />
                    <mx:Button label="@Resource(bundle='ProductManagementPanel',key='findBtn')"
                               toolTip="@Resource(bundle='ProductManagementPanel',key='findBtnHint')"
                               click="onSearchBtnClick(event)"/>
                    <mx:Button label="@Resource(bundle='ProductManagementPanel',key='createProduct')"
                               toolTip="@Resource(bundle='ProductManagementPanel',key='createProductHint')"
                               click="onCreateBtnClick(event)"/>
                    <mx:Button label="@Resource(bundle='ProductManagementPanel',key='deleteProduct')"
                               toolTip="@Resource(bundle='ProductManagementPanel',key='deleteProductHint')"
                               click="onRemoveBtnClick(event)"
                               enabled="{productSelected}"
                            />
                </mx:ControlBar>
                <mx:DataGrid id="productGrid" width="100%" height="100%"
                             itemClick="onProductSelected(event)"
                        >
                    <mx:columns>
                        <mx:DataGridColumn width="50" headerText="@Resource(bundle='ProductManagementPanel',key='id')"
                                           dataField="productId"/>
                        <mx:DataGridColumn width="120" headerText="@Resource(bundle='ProductManagementPanel',key='code')"
                                           dataField="code"/>
                        <mx:DataGridColumn headerText="@Resource(bundle='ProductManagementPanel',key='name')"
                                           dataField="name"/>
                        <mx:DataGridColumn headerText="@Resource(bundle='ProductManagementPanel',key='description')"
                                           dataField="description"/>
                    </mx:columns>
                </mx:DataGrid>
            </mx:VBox>
            <mx:TabNavigator id="productTabNavigator" change="onTabClick(event);" width="100%" height="100%"
                             visible="{productDTOImpl != null}">
                <mx:Canvas id="summaryTab" label="@Resource(bundle='ProductManagementPanel',key='summaryTab')"
                           width="100%"
                           height="100%">
                    <prod:ProductSummaryPanel id="summaryPanel" brands="{brandsList}" productTypes="{productTypesList}"/>
                </mx:Canvas>
                <prod:ProductImageAttributesPanel id="imageTab"/>
                <prod:ProductNonImageAttributesPanel id="attrTab"/>
                <mx:Canvas id="skuTab" label="@Resource(bundle='ProductManagementPanel',key='skuTab')" width="100%"
                           height="100%"/>
                <mx:Canvas id="priceTab" label="@Resource(bundle='ProductManagementPanel',key='priceTab')" width="100%"
                           height="100%"/>
                <seo:SeoPanel id="seoTabPanel"
                              label="@Resource(bundle='ProductManagementPanel',key='seoTab')" creationComplete="initSeoListeners()"/>
                <mx:Canvas id="associationsTab" label="@Resource(bundle='ProductManagementPanel',key='associationsTab')"
                           width="100%" height="100%"/>
                <mx:Canvas id="categoryTab" label="@Resource(bundle='ProductManagementPanel',key='categoriesTab')"
                           width="100%" height="100%"/>
                <mx:Canvas id="quantityTab" label="@Resource(bundle='ProductManagementPanel',key='quantity')"
                           width="100%"
                           height="100%"/>

            </mx:TabNavigator>
        </mx:VDividedBox>

    </mx:Panel>

    <mx:RemoteObject showBusyCursor="true" id="remoteBrandService" destination="remoteBrandService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getAllBrands" name="getAll"
                   result="onGetAllBrandsResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>

    <mx:RemoteObject showBusyCursor="true" id="remoteProductTypeService" destination="remoteProductTypeService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getAllProductTypes" name="getAll"
                   result="onGetAllProductTypesResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>

    <mx:RemoteObject showBusyCursor="true" id="remoteProductService" destination="remoteProductService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="getProductByCodeNameBrandType" name="getProductByCodeNameBrandType"
                   result="onGetProductByCodeNameBrandTypeResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="createProduct" name="create"
                   result="onCreateUpdateProductResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="updateProduct" name="update"
                   result="onCreateUpdateProductResult(event)"
                   fault="onRpcMethodFault(event)"/>

        <mx:method id="removeProduct" name="remove"
                   result="onRemoveProductResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>


    <mx:ArrayCollection id="brandsList"/>
    <mx:ArrayCollection id="productTypesList"/>

    <mx:Boolean id="productSelected">false</mx:Boolean>

    <mx:Script><![CDATA[
        import com.hexagonstar.util.debug.Debug;

        import mx.controls.Alert;

        import mx.core.FlexGlobals;
        import mx.events.CloseEvent;
        import mx.rpc.events.FaultEvent;

        import org.yes.cart.event.DtoEvent;
        import org.yes.cart.impl.AttrValueProductDTOImpl;
        import org.yes.cart.impl.AttributeDTOImpl;
        import org.yes.cart.impl.BrandDTOImpl;
        import org.yes.cart.impl.ProductDTOImpl;
        import org.yes.cart.impl.ProductTypeDTOImpl;
        import org.yes.cart.impl.SeoDTOImpl;
        import org.yes.cart.util.CloneUtil;
        import org.yes.cart.util.DomainUtils;
        import org.yes.cart.util.UpdateTarget;
        import org.yes.cart.shopmanager.ShopManagerGlobal;
        import org.yes.cart.ui.attributes.EntityAttributeValuesManagementPanel;

        import mx.collections.ArrayCollection;
        import mx.events.IndexChangedEvent;
        import mx.events.ListEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.AsyncResponder;
        import mx.rpc.AsyncToken;
        import mx.rpc.events.ResultEvent;

        private var TAB_SUMMARY_IDX:int = 0;
        private var TAB_IMAGE_IDX:int = 1;
        private var TAB_ATTR_IDX:int = 2;
        private var TAB_SKU_IDX:int = 3;
        private var TAB_PRICE_IDX:int = 4;
        private var TAB_SEO_IDX:int = 5;
        private var TAB_ASSOCIATION_IDX:int = 6;
        private var TAB_CATEGORY_IDX:int = 7;
        private var TAB_WAREHOUSE_IDX:int = 8;


        [Bindable]
        public var productDTOImpl:ProductDTOImpl;

        private var attrValuePanel:EntityAttributeValuesManagementPanel;


        /**
         * Init Panel
         *
         * @return nothing
         */
        public function init():void {
            remoteBrandService.getAll();
            remoteProductTypeService.getAll();
        }

        /**
         * Product selected.
         * @param event event
         * @return nothing
         */
        private function onProductSelected(event:ListEvent):void {

            productSelected = productGrid.selectedItem != null;
            if (productSelected) {
                productDTOImpl = productGrid.selectedItem as ProductDTOImpl;
                initTab(productTabNavigator.selectedIndex);
            }
        }

        private var productCreateDialog:ProductCreateDialog;

        private function onCreateBtnClick(event:MouseEvent):void {
            productCreateDialog = ProductCreateDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), ProductCreateDialog, true));
            productCreateDialog.brandComboBox.dataProvider = brandsList;
            productCreateDialog.productTypeComboBox.dataProvider = productTypesList;
            productCreateDialog.saveBtn.addEventListener(MouseEvent.CLICK, onCreateNewProductSaveClick);
            PopUpManager.centerPopUp(productCreateDialog);
        }


        private function onRemoveBtnClick(event:MouseEvent):void {
            if (productSelected && productDTOImpl != null) {
                Alert.show(
                        resourceManager.getString('ProductManagementPanel', 'deleteProductConfirm', [ this.productDTOImpl.name ]),
                        resourceManager.getString('ShopManagerApplication', 'warning'),
                        Alert.OK | Alert.CANCEL, this, onDeleteSelectedProductConfirm, null, Alert.OK);
            }
        }


        private function onDeleteSelectedProductConfirm(event:CloseEvent):void {
            if (event.detail == Alert.OK) {
                if (productSelected && productDTOImpl != null) {
                    remoteProductService.remove(productDTOImpl.productId);
                }
            }
        }


        /**
         * Handle prouct creation.
         * @param event event.
         */
        private function onCreateNewProductSaveClick(event:Event):void {

            if (productCreateDialog != null) {
                var product:ProductDTOImpl = new ProductDTOImpl();
                product.code = productCreateDialog.codeTextInput.text;
                product.name = productCreateDialog.nameTextImput.text;
                product.productTypeDTO = ProductTypeDTOImpl(productCreateDialog.productTypeComboBox.selectedItem);
                product.brandDTO = BrandDTOImpl(productCreateDialog.brandComboBox.selectedItem);
                remoteProductService.create(product);
                productCreateDialog.saveBtn.removeEventListener(MouseEvent.CLICK, onCreateNewProductSaveClick);
                PopUpManager.removePopUp(productCreateDialog);
                productCreateDialog = null;
            }
        }

        private function onSearchBtnClick(event:MouseEvent):void {
            applyFilter();
        }

        private function onTabClick(event:IndexChangedEvent):void {
            initTab(event.newIndex);
        }


        private function initTab(idx:int):void {
            Debug.trace("INFO selected tab idx is " + idx);
            switch (idx) {
                case TAB_SUMMARY_IDX:
                {
                    summaryTabSelected();
                    break;
                }
                case TAB_IMAGE_IDX:
                {
                    imageTabSelected();
                    break;
                }
                case TAB_ATTR_IDX:
                {
                    attrTabSelected();
                    break;
                }
                case TAB_SKU_IDX:
                {
                    skuTabSelected();
                    break;
                }

                case TAB_PRICE_IDX:
                {
                    priceTabSelected();
                    break;
                }
                case TAB_SEO_IDX:
                {
                    seoTabSelected();
                    break;
                }
                case TAB_ASSOCIATION_IDX:
                {
                    associationsTabSelected();
                    break;
                }
                case TAB_CATEGORY_IDX:
                {
                    categoriesTabSelected();
                    break;
                }
                case TAB_WAREHOUSE_IDX:
                {
                    quantityTabSelected();
                    break;
                }

            }

        }


        private function summaryTabSelected():void {
            summaryPanel.productDTOImpl = ProductDTOImpl(CloneUtil.clone(productDTOImpl));
        }

        private function imageTabSelected():void {
            Debug.trace("INFO image tab selected, selected product is " + productDTOImpl);
            if (productSelected && this.productDTOImpl != null) {
                imageTab.product = this.productDTOImpl;
            } else {
                imageTab.product = null;
            }
        }

        private function attrTabSelected():void {
            Debug.trace("INFO attr tab selected, selected product is " + productDTOImpl);
            if (productSelected && this.productDTOImpl != null) {
                attrTab.product = this.productDTOImpl;
            } else {
                attrTab.product = null;
            }
        }

        private function skuTabSelected():void {
            Debug.trace("INFO skuTabSelected, selected product is " + productDTOImpl);
            skuTab.removeAllChildren();
            var productSkuManagementPanel:ProductSkuManagementPanel = new ProductSkuManagementPanel();
            productSkuManagementPanel.product = productDTOImpl;
            skuTab.addChild(productSkuManagementPanel);
        }

        /**
         * Service call back with product attribute value.
         * @param event event
         * @param updateTarget update target object
         * @return nothing
         */
        private function productAttributeUpdatedResultHandler(event:ResultEvent, updateTarget:UpdateTarget):void {
            Debug.trace("INFO Product attribute value updated result call back " + updateTarget.toString());
            Debug.traceObj(updateTarget);
            Debug.trace("INFO updateTarget.action " + updateTarget.action);
            var obj:Object;
            if (updateTarget.action == UpdateTarget.NEW) {
                obj = remoteProductService.createEntityAttributeValue.lastResult;
            } else {
                obj = remoteProductService.updateEntityAttributeValue.lastResult;
            }
            Debug.trace("INFO obj is " + obj);
            attrValuePanel.attrValues.setItemAt(obj, updateTarget.idx);

        }

        private function associationsTabSelected():void {
            Debug.trace("INFO associationsTabSelected, selected product is " + productDTOImpl);
            associationsTab.removeAllChildren();
            var panel:ProductAssociationsPanel = new ProductAssociationsPanel();
            panel.productId = productDTOImpl.productId;
            associationsTab.addChild(panel);
        }

        private function categoriesTabSelected():void {
            Debug.trace("INFO categoriesTabSelected, selected product is " + productDTOImpl);
            categoryTab.removeAllChildren();
            var productCategoriesPanel:ProductCategoriesPanel = new ProductCategoriesPanel();
            productCategoriesPanel.productId = productDTOImpl.productId;
            categoryTab.addChild(productCategoriesPanel);

        }

        private function priceTabSelected():void {
            Debug.trace("INFO priceTabSelected, selected product is " + productDTOImpl);
            priceTab.removeAllChildren();
            var productPricePanel:ProductPricePanel = new ProductPricePanel();
            productPricePanel.productId = productDTOImpl.productId;
            priceTab.addChild(productPricePanel);
        }

        private function quantityTabSelected():void {
            quantityTab.removeAllChildren();
            var productSkuQuantityPanel:ProductSkuQuantityPanel = new ProductSkuQuantityPanel();
            productSkuQuantityPanel.productId = productDTOImpl.productId;
            quantityTab.addChild(productSkuQuantityPanel);

        }

        private function seoTabSelected():void {
            if (productSelected && productDTOImpl != null) {
                seoTabPanel.seoId = productDTOImpl.seoDTO != null ? productDTOImpl.seoDTO.seoId : Number.NaN;
            }
        }

        private function initSeoListeners():void {
            seoTabPanel.addEventListener(DtoEvent.UPDATE, onSeoCreated);
        }

        public function onSeoCreated(event:DtoEvent):void {
            Debug.trace("INFO ProductManagementPanel seo " + event.dto + " for " + productDTOImpl + " created call back ");
            if (productDTOImpl.seoDTO == null || DomainUtils.isNewPK(productDTOImpl.seoDTO.seoId)) {
                Debug.trace("INFO gonna to update product");
                productDTOImpl.seoDTO = event.dto as SeoDTOImpl;
                if (DomainUtils.isNewPK(productDTOImpl.productId)) {
                    Debug.trace("INFO ProductManagementPanel product will be created " + productDTOImpl);
                    remoteProductService.create(productDTOImpl);
                } else {
                    Debug.trace("INFO ProductManagementPanel product will be updated " + productDTOImpl);
                    remoteProductService.update(productDTOImpl);
                }
            }
        }

        protected function onRpcMethodFault(event:FaultEvent):void {
            ShopManagerGlobal.instance.defaultOnRpcMethodFault(event);
        }

        private function onGetAllBrandsResult(event:ResultEvent):void {
            brandsList = event.result as ArrayCollection;
        }

        private function onGetAllProductTypesResult(event:ResultEvent):void {
            productTypesList = event.result as ArrayCollection;
        }

        private function onCreateUpdateProductResult(event:ResultEvent):void {
            applyFilter();
        }

        private function applyFilter():void {
            var selectedBrandId:Number = 0;
            var selectedTypeId:Number = 0;

            var selectedBrand:BrandDTOImpl = BrandDTOImpl(brandComboBox.selectedItem);

            var selectedType:ProductTypeDTOImpl = ProductTypeDTOImpl(typeComboBox.selectedItem);

            if (selectedBrand != null) {
                selectedBrandId = selectedBrand.brandId;
            }

            if (selectedType != null) {
                selectedTypeId = selectedType.producttypeId;
            }

            productSelected = false;
            productDTOImpl = null;

            remoteProductService.getProductByCodeNameBrandType(
                    codeTextInput.text,
                    nameTextInput.text,
                    selectedBrandId,
                    selectedTypeId);
        }

        private function onGetProductByCodeNameBrandTypeResult(event:ResultEvent):void {
            productGrid.dataProvider = event.result;
        }

        private function onRemoveProductResult(event:ResultEvent):void {
            applyFilter();
        }

        ]]></mx:Script>
</mx:Canvas>
