<?xml version="1.0" encoding="utf-8"?>
<!--
  - Copyright 2009 Igor Azarnyi, Denys Pavlov
  -
  -    Licensed under the Apache License, Version 2.0 (the "License");
  -    you may not use this file except in compliance with the License.
  -    You may obtain a copy of the License at
  -
  -        http://www.apache.org/licenses/LICENSE-2.0
  -
  -    Unless required by applicable law or agreed to in writing, software
  -    distributed under the License is distributed on an "AS IS" BASIS,
  -    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -    See the License for the specific language governing permissions and
  -    limitations under the License.
  -->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%">

    <mx:Script>
		<![CDATA[
        import com.hexagonstar.util.debug.Debug;

        import mx.controls.Alert;
        import mx.controls.TextInput;
        import mx.core.FlexGlobals;
        import mx.events.CloseEvent;
        import mx.events.DataGridEvent;
        import mx.events.DataGridEventReason;
        import mx.events.ListEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.FaultEvent;
        import mx.rpc.events.ResultEvent;

        import org.yes.cart.impl.AttributeDTOImpl;

        import org.yes.cart.shopmanager.ShopManagerGlobal;
        import org.yes.cart.util.DomainUtils;

        private var _attributeGroup:String;
        private var _entityCode:String;

        protected function onEntitySet(attributeGroup:String):void {

            if (attributeGroup != null) {

                this._attributeGroup = attributeGroup;
                remoteAttributeService.findAttributesWithMultipleValues(attributeGroup);

            } else {

                Alert.show(
                        resourceManager.getString('AttributesManagementPanel', 'emptyAttributeGroup'),
                        resourceManager.getString('AttributesManagementPanel', 'communicationError')
                );
            }
        }


        private function onAttributeSelected(event:ListEvent):void {
            canDelete = valueDataGrid.selectedItem != null && DomainUtils.isPersistent(valueDataGrid.selectedItem, 'attrvalueId');
        }

        /**
         * Attribute value edit end.
         * @param event grid event.
         * @return nothing
         */
        private function onAttributeValueEditEnd(event:DataGridEvent):void {
            if (event.reason == DataGridEventReason.CANCELLED) {
                return; // Do not update cell.
            }

            event.preventDefault(); // Disable copying data back to the control.

            //var textInput:TextInput = TextInput(DataGrid(event.target).itemEditorInstance);
            var attrValue:Object = DataGrid(event.target).dataProvider[event.rowIndex];

            onValueChanged(event, attrValue, /*textInput.text*/ attrValue.val);

        }

        /**
         * Callback function that must be overwritten by sub classes.
         */
        protected function onValueChanged(event:DataGridEvent, attrValue:Object, newValue:Object):void {
            // Overwrite in sub class
        }


        public function get attributeGroup():String {
            return _attributeGroup;
        }

        /**
         * Get entity code. Used for product and skus.
         * @return entity code (sku or product).
         */
        public function get entityCode():String {
            return _entityCode;
        }

        /**
         * Set entity code. Used for product and skus
         * @param value product or sku code
         * @return nothig
         */
        public function set entityCode(value:String):void {
            _entityCode = value;
        }

        /**
         * Label function for id column
         * @param item
         * @param column
         * @return  string representation of id
         */
        private function idLabelFunction(item:Object, column:DataGridColumn):String {
            if (DomainUtils.isNew(item, 'attrvalueId')) {
                return "*";
            }
            return String(item.attrvalueId);
        }

        private var newAttrPopUp:AttributeValueAddDialog;

        /**
         * Open attribute dialog.
         * @param event event
         * @return nothing
         */
        private function onAddAttributeValueClick(event:MouseEvent):void {
            newAttrPopUp = AttributeValueAddDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), AttributeValueAddDialog, true));
            newAttrPopUp.okBtn.addEventListener(MouseEvent.CLICK, onAddAttrSaveClick);
            newAttrPopUp.attributeComboBox.dataProvider = availableAttributes;
            //newAttrPopUp.createNewAttr(currentAttributeDTO);
            PopUpManager.centerPopUp(newAttrPopUp);
        }

        /**
         * Perform call back when attribute selected.
         * @param event event
         * @return nothing
         */
        private function onAddAttrSaveClick(event:Event):void {
            if (newAttrPopUp != null) {
                Debug.traceObj(newAttrPopUp.selectedAttributeDTO);
                onValueAdded(newAttrPopUp.selectedAttributeDTO)
                newAttrPopUp.okBtn.removeEventListener(MouseEvent.CLICK, onAddAttrSaveClick);
                PopUpManager.removePopUp(newAttrPopUp);
                newAttrPopUp = null;
            }
        }

        /**
         * Hook for sub classes for the new attribute value functionality
         *
         * @param selectedAttributeDTO attribute for which to create value for
         */
        protected function onValueAdded(selectedAttributeDTO:AttributeDTOImpl):void {
            // must be overwritten in sub classes
        }


        /**
         * Remove attribute value  click handler
         * @param event event
         * @return nothing
         */
        private function onRemoveAttributeValueClick(event:MouseEvent):void {
            if (canDelete && this.valueDataGrid.selectedItem != null) {
                Alert.show(
                        resourceManager.getString('AttributesManagementPanel', 'deleteAttributeValueConfirm', [ this.valueDataGrid.selectedItem.val ]),
                        resourceManager.getString('ShopManagerApplication', 'warning'),
                        Alert.OK | Alert.CANCEL, this, onRemoveAttributeValueConfirm, null, Alert.OK);
            }
        }

        /**
         * Perform delete operation.
         * @param event close event
         * @return nothing
         */
        private function onRemoveAttributeValueConfirm(event:CloseEvent):void {
            if (canDelete && this.valueDataGrid.selectedItem != null) {
                Debug.trace("INFO delete attribute value " + this.valueDataGrid.selectedItem);
                canDelete = false;
                onValueDelete(this.valueDataGrid.selectedItem);
            }
        }

        /**
         * Hook for subclasses to implement remove attribute value logic.
         *
         * @param selectedItem item to remove
         */
        protected function onValueDelete(selectedItem:Object):void {
            // Must be overwritten in sub classes
        }


        protected function onRpcMethodFault(event:FaultEvent):void {
            ShopManagerGlobal.instance.defaultOnRpcMethodFault(event);
        }

        private function onFindAttributesWithMultipleValuesResult(event:ResultEvent):void {
            canAdd = event.result != null;
            if (canAdd) {
                availableAttributes = event.result as ArrayCollection;
            }
        }
        ]]>
    </mx:Script>


    <mx:RemoteObject showBusyCursor="true"  id="remoteAttributeService"
                     destination="remoteAttributeService"
                     channelSet="{ShopManagerGlobal.instance.channelSet}">

        <mx:method id="findAttributesWithMultipleValues" name="findAttributesWithMultipleValues"
                   result="onFindAttributesWithMultipleValuesResult(event)"
                   fault="onRpcMethodFault(event)"/>

    </mx:RemoteObject>

    <mx:ArrayCollection id="attrValues"/>
    <mx:ArrayCollection id="availableAttributes"/>

    <mx:Boolean id="canDelete">false</mx:Boolean>
    <mx:Boolean id="canAdd">false</mx:Boolean>

    <mx:VBox paddingLeft="2" paddingTop="2" paddingRight="2" paddingBottom="2" width="100%" height="100%">

        <mx:HBox width="100%">
            <mx:Button
                    label="@Resource(bundle='AttributesManagementPanel',key='addAttribute')"
                    toolTip="@Resource(bundle='AttributesManagementPanel',key='addAttributeHint')"
                    enabled="{canAdd}" visible="{canAdd}" includeInLayout="{canAdd}"
                    click="onAddAttributeValueClick(event)"
                    />
            <mx:Button
                    label="@Resource(bundle='AttributesManagementPanel',key='removeAttributeValue')"
                    toolTip="@Resource(bundle='AttributesManagementPanel',key='removeAttributeValueHint')"
                    enabled="{canDelete}"
                    click="onRemoveAttributeValueClick(event)"
                    />
        </mx:HBox>
        <mx:DataGrid id="valueDataGrid" width="100%" height="100%" editable="true"
                     dataProvider="{attrValues}"
                     itemClick="onAttributeSelected(event)"
                     itemEditEnd="onAttributeValueEditEnd(event);"
                >

            <mx:columns>
                <mx:DataGridColumn id="attrvalueIdColumn"
                                   headerText="@Resource(bundle='AttributesManagementPanel',key='attribute_id')"
                                   dataField="attrvalueId" width="40" editable="false"
                                   labelFunction="idLabelFunction"
                        />
                <mx:DataGridColumn headerText="@Resource(bundle='AttributesManagementPanel',key='code')"
                                   dataField="attributeDTO.code" width="180" editable="false"
                        />
                <mx:DataGridColumn headerText="@Resource(bundle='AttributesManagementPanel',key='name')"
                                   dataField="attributeDTO.name" width="200" editable="false"
                        />
                <mx:DataGridColumn id="valueDataGridColumn"
                                   headerText="@Resource(bundle='AttributesManagementPanel',key='value')"
                                   editable="false"
                        >
                    <mx:itemRenderer>
                        <mx:Component>
                            <mx:HBox paddingLeft="2" paddingRight="1">
                                <mx:Script>
                                <![CDATA[
                                    import com.hexagonstar.util.debug.Debug;

                                    import mx.controls.DataGrid;
                                    import mx.core.FlexGlobals;
                                    import mx.core.IFlexDisplayObject;
                                    import mx.events.DataGridEvent;
                                    import mx.events.DataGridEventReason;
                                    import mx.managers.PopUpManager;

                                    import org.yes.cart.ui.attributes.valuedialog.ImageDialog;
                                    import org.yes.cart.ui.attributes.valuedialog.SimpleTextDialog;
                                    import org.yes.cart.ui.attributes.valuedialog.ValueDialog;

                                    //Define a property for returning the new value to the cell.
                                    //[Bindable]
                                    //public var returnListPrice:String;
                                    private var popUp:ValueDialog = null;

                                    private function openPopup():void {
                                        var clz:Class = getPopUpClassName();

                                        popUp = ValueDialog(PopUpManager.createPopUp(DisplayObject(FlexGlobals.topLevelApplication), clz, true));
                                        popUp.attributeGroup = outerDocument.attributeGroup;
                                        popUp.windowTitle = data.attributeDTO.name;
                                        popUp.code = outerDocument.entityCode;
                                        popUp.value = data.val;
                                        var btnSave:Button = popUp.getButtonSave();
                                        btnSave.addEventListener(MouseEvent.CLICK, onSaveBtnclick);
                                        PopUpManager.centerPopUp(IFlexDisplayObject(popUp));

                                    }

                                    private function onSaveBtnclick(event:MouseEvent):void {
                                        if (popUp != null) {
                                            data.val = popUp.value;
                                            var dg:DataGrid = DataGrid(this.owner);
                                            dg.dataProvider.itemUpdated(data);

                                            var dataGridEvent:DataGridEvent =
                                                    new DataGridEvent(DataGridEvent.ITEM_EDIT_END, false, true);
                                            dataGridEvent.columnIndex = /*editedItemPosition.columnIndex*/3;
                                            dataGridEvent.dataField = "val"/*_columns[editedItemPosition.columnIndex].dataField*/;
                                            dataGridEvent.rowIndex = dg.selectedIndex;
                                            dataGridEvent.itemRenderer = /*editedItemRenderer*/ null;
                                            dataGridEvent.reason == DataGridEventReason.OTHER;
                                            dg.dispatchEvent(dataGridEvent);

                                            popUp.getButtonSave().removeEventListener(MouseEvent.CLICK, onSaveBtnclick);
                                            PopUpManager.removePopUp(IFlexDisplayObject(popUp));
                                            popUp = null;
                                        }
                                    }

                                    /**
                                     * Factory method to create particular dialog.
                                     * @return dialog to edit value.
                                     */
                                    private function getPopUpClassName():Class {

                                        if (data.attributeDTO.etypeName.indexOf("Image") > -1) {
                                            return ImageDialog;
                                        }

                                        return SimpleTextDialog;
                                    }
                                    ]]>
                                </mx:Script>
                                <mx:TextInput id="valueTextInput" editable="false" width="100%" text="{data.val}"/>
                                <mx:Button id="editBtn" width="30"
                                           label="..."
                                           click="callLater(openPopup)"/>
                            </mx:HBox>
                        </mx:Component>
                    </mx:itemRenderer>
                </mx:DataGridColumn>
            </mx:columns>
        </mx:DataGrid>

    </mx:VBox>

</mx:Canvas>
